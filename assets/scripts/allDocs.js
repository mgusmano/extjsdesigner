
var allDocs = [
 {
  "name": "Ext.ActionSheet",
  "xtype": "actionsheet",
  "text": "{@link Ext.ActionSheet} are used to display a list of {@link Ext.Button}\nin a popup dialog.\n\nThe key difference between ActionSheet and {@link Ext.Sheet} is that ActionSheets are\ndocked at the bottom of the screen, and the {@link #cfg!defaultType #defaultType} is set to\n{@link Ext.Button}.\n\n## Example\n\n```javascript\n@example({ framework: 'extjs' })\nvar actionSheet = Ext.create('Ext.ActionSheet', {\n    items: [\n        {\n            text: 'Delete draft',\n            ui  : 'decline'\n        },\n        {\n            text: 'Save draft'\n        },\n        {\n            text: 'Cancel',\n            ui  : 'confirm'\n        }\n    ]\n});\n\nExt.Viewport.add(actionSheet);\nactionSheet.show();\n```\n\n## Edge Menus\nAction Sheets can be used with {@link Ext.Viewport#method!setMenu Ext.Viewport#setMenu}. They can be linked with\nany side of the screen (top, left, bottom or right). To use this menu you will call various\nmenu related functions on the {@link Ext.Viewport} such as\n{@link Ext.Viewport#method!showMenu Ext.Viewport#showMenu}, {@link Ext.Viewport#method!hideMenu Ext.Viewport#hideMenu}, {@link Ext.Viewport#method!toggleMenu Ext.Viewport#toggleMenu},\n{@link Ext.Viewport#method!hideOtherMenus Ext.Viewport#hideOtherMenus}, or {@link Ext.Viewport#method!hideAllMenus Ext.Viewport#hideAllMenus}.\n\n```javascript\n@example({ framework: 'extjs' })\nvar menu = Ext.create({\n    xtype: 'actionsheet',\n    items: [{\n        text: 'Settings',\n        iconCls: 'settings'\n    }, {\n        text: 'New Item',\n        iconCls: 'compose'\n    }, {\n        text: 'Star',\n        iconCls: 'star'\n    }]\n});\n\nExt.Viewport.add({\n    xtype: 'panel',\n    html: 'Main View Content'\n});\n\nExt.Viewport.setMenu(menu, {\n    side: 'left',\n    // omitting the reveal config defaults the animation to 'cover'\n    reveal: true\n});\n\nExt.Viewport.showMenu('left');\n```\n\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n    <ext-actionsheet displayed=\"true\">\n        <ext-button ui=\"decline\" text=\"Delete Draft\"></ext-button>\n        <ext-button text=\"Save Draft\"></ext-button>\n        <ext-button text=\"Cancel\"></ext-button>\n    </ext-actionsheet>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-actionsheet.component';\nimport '@sencha/ext-web-components/dist/ext-button.component';\n\nexport default class ActionSheetComponent {}\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtActionSheet, ExtButton } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n   render() {\n       return (\n           <ExtContainer>\n               <ExtActionSheet displayed>\n                   <ExtButton ui=\"decline\" text=\"Delete Draft\"/>\n                   <ExtButton text=\"Save Draft\"/>\n                   <ExtButton text=\"Cancel\"/>\n               </ExtActionSheet>\n           </ExtContainer>\n       )\n   }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [`\n             `],\n     template: `\n         <ExtContainer>\n             <ExtActionSheet [displayed]=\"true\">\n                 <ExtButton ui=\"decline\" text=\"Delete Draft\"></ExtButton>\n                 <ExtButton text=\"Save Draft\"></ExtButton>\n                 <ExtButton text=\"Cancel\"></ExtButton>\n             </ExtActionSheet>\n         </ExtContainer>\n             `\n })\n export class AppComponent {\n\n }\n```\n"
 },
 {
  "name": "Ext.Audio",
  "xtype": "audio",
  "text": "{@link Ext.Audio} is a simple class which provides a container for the\n[HTML5 Audio element](http://developer.mozilla.org/en-US/docs/Using_HTML5_audio_and_video).\n\n## Recommended File Types/Compression:\n\n* Uncompressed WAV and AIF audio\n* MP3 audio\n* AAC-LC\n* HE-AAC audio\n\n## Notes\n\nOn Android devices, the audio tags controls do not show. You must use the {@link #method!play #method-play},\n{@link #method!pause #method-pause}, and {@link #method!toggle #toggle} methods to control the audio (example below).\n\n## Examples\n\nThis example shows the use of the {@link Ext.Audio} component in a fullscreen container--change\nthe url: item for the location of an audio file--note that the audio starts on page load:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Container', {\n    fullscreen: true,\n    layout: {\n        type : 'vbox',\n        pack : 'center',\n        align: 'stretch'\n    },\n    items: [\n        {\n            xtype : 'toolbar',\n            docked: 'top',\n            title : 'Ext.Audio'\n        },\n        {\n            xtype: 'audio',\n            url  : 'touch-build/examples/audio/crash.mp3'\n        }\n    ]\n});\n```\n\nYou can also set the {@link #cfg!hidden #hidden} configuration of the {@link Ext.Audio} component to true\nby default, and then control the audio by using the {@link #method!play #method-play}, {@link #method!pause #method-pause},\nand {@link #method!toggle #toggle} methods:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Container', {\n    fullscreen: true,\n    layout: {\n        type: 'vbox',\n        pack: 'center'\n    },\n    items: [\n        {\n            xtype : 'toolbar',\n            docked: 'top',\n            title : 'Ext.Audio'\n        },\n        {\n            xtype: 'toolbar',\n            docked: 'bottom',\n            defaults: {\n                xtype: 'button',\n                handler: function() {\n                    var container = this.getParent().getParent(),\n                        // use ComponentQuery to get the audio component (using its xtype)\n                        audio = container.down('audio');\n\n                    audio.toggle();\n                    this.setText(audio.isPlaying() ? 'Pause' : 'Play');\n                }\n            },\n            items: [\n                { text: 'Play', flex: 1 }\n            ]\n        },\n        {\n            html: 'Hidden audio!'\n        },\n        {\n            xtype : 'audio',\n            hidden: true,\n            url   : 'touch-build/examples/audio/crash.mp3'\n        }\n    ]\n});\n```\n"
 },
 {
  "name": "Ext.BreadcrumbBar",
  "xtype": "breadcrumbbar",
  "text": "A toolbar that displays hierarchical data from a {@link Ext.data.TreeStore}\nas a trail of breadcrumb buttons.  Each button represents a node in the store.  A click\non a button will \"select\" that node in the tree.  Non-leaf nodes will display their\nchild nodes on a dropdown menu of the corresponding button in the breadcrumb trail,\nand a click on an item in the menu will trigger selection of the corresponding child\nnode.\n\nThe selection can be set programmatically  using {@link #method!setSelection #setSelection}, or retrieved\nusing {@link #method!getSelection #getSelection}.\n"
 },
 {
  "name": "Ext.Button",
  "xtype": "button",
  "text": "This class provides a push button with several presentation options. There are various\ndifferent styles of Button you can create by using the {@link #cfg!icon #icon}, {@link #cfg!iconCls #iconCls},\n{@link #cfg!iconAlign #iconAlign}, {@link #cfg!ui #ui}, and {@link #cfg!text #text} configurations.\n\n## Simple Button\n\nHere is a Button in it's simplest form:\n\n```javascript\n@example({ framework: 'extjs' })\nvar button = Ext.create('Ext.Button', {\n    text: 'Button'\n});\nExt.Viewport.add({ xtype: 'container', padding: 10, items: [button] });\n```\n\n## Icons\n\nYou can also create a Button with just an icon using the {@link #cfg!iconCls #iconCls} configuration:\n\n```javascript\n@example({ framework: 'extjs' })\nvar button = Ext.create('Ext.Button', {\n    iconCls: 'x-fa fa-home'\n});\nExt.Viewport.add({ xtype: 'container', padding: 10, items: [button] });\n```\n\nSencha provides the \"Font\" and \"PNG\" icons packs from http://wwww.pictos.cc.\nUse icons with the {@link Global_CSS#sass-mixin!icon icon} mixin in your Sass.\n\n## Badges\n\nButtons can also have a badge on them, by using the {@link #cfg!badgeText #badgeText} configuration:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Container', {\n    fullscreen: true,\n    padding: 10,\n    items: {\n        xtype: 'button',\n        text: 'My Button',\n        badgeText: '2'\n    }\n});\n```\n\n## Menus\n\nYou can assign a menu to a button by using the {@link #cfg!menu} config. This config can be\neither a reference to a {@link Ext.menu.Menu} instance or a {@link Ext.menu.Menu}\nconfig object.\n\nWhen assigning a menu to a button, an arrow is automatically added to the button. You can\nchange the alignment of the arrow using the {@link #cfg!arrowAlign} config.\n\nExample usage:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Button', {\n    text: 'Menu button',\n    renderTo: Ext.getBody(),\n    arrowAlign: 'bottom',\n    menu: [\n        { text: 'Item 1' },\n        { text: 'Item 2' },\n        { text: 'Item 3' },\n        { text: 'Item 4' }\n    ]\n});\n```\n\n## UI\n\nButtons also come with a range of different default UIs. Here are the included UIs\navailable (if {@link #$include-button-uis $include-button-uis} is set to `true`):\n\n- **normal** - a basic gray button\n- **back** - a back button\n- **forward** - a forward button\n- **round** - a round button\n- **action** - shaded using the {@link Global_CSS#var!$active-color $active-color}\n- **decline** - shaded using the {@link Global_CSS#var!$alert-color $alert-color}\n- **confirm** - shaded using the {@link Global_CSS#var!$confirm-color $confirm-color}\n\nYou can also append ` round` to each of the last three UI's to give it a round shape:\n\n- **action round**\n- **decline round**\n- **confirm round**\n\nAnd setting them is very simple:\n\n    var uiButton = Ext.create('Ext.Button', {\n        text: 'My Button',\n        ui: 'action'\n    });\n\nAnd how they look:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Container', {\n    fullscreen: true,\n    padding: 4,\n    defaults: {\n        xtype: 'button',\n        margin: 5\n    },\n    layout: {\n        type: 'vbox',\n        align: 'center'\n    },\n    items: [\n        { ui: 'normal', text: 'normal' },\n        { ui: 'round', text: 'round' },\n        { ui: 'action', text: 'action' },\n        { ui: 'decline', text: 'decline round' },\n        { ui: 'confirm', text: 'confirm' }\n    ]\n});\n```\n\nNote that the default {@link #cfg!ui #ui} is **normal**.\n\nYou can also use the {@link #sass-mixin!sencha-button-ui sencha-button-ui} CSS Mixin to create your own UIs.\n\n## Example\n\nThis example shows a bunch of icons on the screen in two toolbars. When you click on the center\nbutton, it switches the {@link #cfg!iconCls #iconCls} on every button on the page.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.createWidget('container', {\n    fullscreen: true,\n    layout: {\n        type: 'vbox',\n        pack:'center',\n        align: 'center'\n    },\n    items: [\n        {\n            xtype: 'button',\n            text: 'Change iconCls',\n            handler: function() {\n                // classes for all the icons to loop through.\n                var availableIconCls = [\n                    'action', 'add', 'arrow_down', 'arrow_left',\n                    'arrow_right', 'arrow_up', 'compose', 'delete',\n                    'organize', 'refresh', 'reply', 'search',\n                    'settings', 'star', 'trash', 'maps', 'locate',\n                    'home'\n                ];\n                // get the text of this button,\n                // so we know which button we don't want to change\n                var text = this.getText();\n\n                // use ComponentQuery to find all buttons on the page\n                // and loop through all of them\n                Ext.Array.forEach(Ext.ComponentQuery.query('button'), function(button) {\n                    // if the button is the change iconCls button, continue\n                    if (button.getText() === text) {\n                        return;\n                    }\n\n                    // get the index of the new available iconCls\n                    var index = availableIconCls.indexOf(button.getIconCls()) + 1;\n\n                    // update the iconCls of the button with the next iconCls, if one exists.\n                    // if not, use the first one\n                    button.setIconCls(availableIconCls[(index === availableIconCls.length)\n                    ? 0\n                    : index]);\n                });\n            }\n        },\n        {\n            xtype: 'toolbar',\n            docked: 'top',\n            items: [\n                { xtype: 'spacer' },\n                { iconCls: 'action' },\n                { iconCls: 'add' },\n                { iconCls: 'arrow_down' },\n                { iconCls: 'arrow_left' },\n                { iconCls: 'arrow_up' },\n                { iconCls: 'compose' },\n                { iconCls: 'delete' },\n                { iconCls: 'organize' },\n                { iconCls: 'refresh' },\n                { xtype: 'spacer' }\n            ]\n        },\n        {\n            xtype: 'toolbar',\n            docked: 'bottom',\n            ui: 'light',\n            items: [\n                { xtype: 'spacer' },\n                { iconCls: 'reply' },\n                { iconCls: 'search' },\n                { iconCls: 'settings' },\n                { iconCls: 'star' },\n                { iconCls: 'trash' },\n                { iconCls: 'maps' },\n                { iconCls: 'locate' },\n                { iconCls: 'home' },\n                { xtype: 'spacer' }\n            ]\n        }\n    ]\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container padding=\"10\">\n    <ext-button\n        text=\"Say Hello\"\n        handler=\"button.sayHello\"\n        ui=\"action raised\">\n    </ext-button>\n    <ext-button\n        text=\"Say Goodbye\"\n        handler=\"button.sayGoodbye\"\n        ui=\"action raised\">\n    </ext-button>\n    <ext-container onready=\"button.resultContainerReady\"></ext-container>\n</ext-container>\n```\n\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-button.component';\nimport '@sencha/ext-web-components/dist/ext-container.component';\n\nexport default class ButtonComponent {\n    resultContainerReady(event) {\n        this.resultContainer = event.detail.cmp;\n    }\n\n    sayHello = () => {\n        this.resultContainer.setHtml('Hello world!');\n    }\n\n    sayGoodbye = () => {\n        this.resultContainer.setHtml('Goodbye cruel world.');\n    }\n}\n\nwindow.button = new ButtonComponent();\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtButton } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    state = { message: null }\n\n    render() {\n        return (\n                <ExtContainer padding=\"10\">\n                    <ExtButton\n                        text=\"Say Hello\"\n                        handler={this.sayHello}\n                        ui=\"action raised\"\n                    />\n                    <ExtButton\n                        text=\"Say Goodbye\"\n                        handler={this.sayGoodbye}\n                    />\n                    { this.state.message }\n                </ExtContainer>\n        )\n    }\n\n    sayHello = () => {\n        this.setState({ message: 'Hello world!' });\n    }\n\n    sayGoodbye = () => {\n        this.setState({ message: 'Goodbye cruel world.' });\n    }\n\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [`\n            `],\n    template: `\n        <ExtContainer padding=\"10\">\n            <ExtButton\n                text=\"Say Hello\"\n                [handler]=\"this.sayHello\"\n                ui=\"action raised\"\n            ></ExtButton>\n            <ExtButton\n                text=\"Say Goodbye\"\n                [handler]=\"this.sayGoodbye\"\n            ></ExtButton>\n            <div>\n            {{ this.message }}\n            </div>\n        </ExtContainer>\n            `\n})\nexport class AppComponent {\n    message: string;\n\n    sayHello = () => {\n        this.message = 'Hello world!';\n    }\n\n    sayGoodbye = () => {\n        this.message = 'Goodbye cruel world.';\n    }\n\n}\n```\n"
 },
 {
  "name": "Ext.calendar.Event",
  "xtype": "calendar-event",
  "text": "Represents an event on a calendar view.\n"
 },
 {
  "name": "Ext.calendar.form.Add",
  "xtype": "calendar-form-add",
  "text": "An add form implementation for data used with {@link Ext.calendar.model.Event}.\n"
 },
 {
  "name": "Ext.calendar.form.CalendarPicker",
  "xtype": "calendar-calendar-picker",
  "text": "A calendar picker component.  Similar to {@link Ext.calendar.List}, the items in the\npicker will display the title for each source calendar along with a color swatch\nrepresenting the default color the that calendar's events.\n\nThe {@link #cfg!store #cfg-store} will be the same {@link Ext.calendar.store.Calendars}\ninstance used by your target {@link Ext.calendar.view.Base}.\n"
 },
 {
  "name": "Ext.calendar.form.Edit",
  "xtype": "calendar-form-edit",
  "text": "An edit form implementation for data used with {@link Ext.calendar.model.Event}.\n"
 },
 {
  "name": "Ext.calendar.form.TimeField",
  "xtype": "calendar-timefield"
 },
 {
  "name": "Ext.calendar.header.Days",
  "xtype": "calendar-daysheader",
  "text": "A header for {@link Ext.calendar.view.Days} to display the\nactive dates.\n"
 },
 {
  "name": "Ext.calendar.header.Weeks",
  "xtype": "calendar-weeksheader",
  "text": "A header for {@link Ext.calendar.view.Weeks} to display day names.\n"
 },
 {
  "name": "Ext.calendar.List",
  "xtype": "calendar-list",
  "text": "A simple view for displaying a list of calendars.\n"
 },
 {
  "name": "Ext.calendar.panel.Day",
  "xtype": "calendar-day",
  "text": "For an overview of calendar panels see {@link Ext.calendar.panel.Base}\n\nA panel for display a single day. Composes a\n{@link Ext.calendar.view.Day} with a\n{@link Ext.calendar.header.Base}.\n\nThe Day panel operates the same as its parent {@link Ext.calendar.panel.Days}\npanel with one notable difference: the {@link #cfg!visibleDays #cfg-visibleDays} for the Day panel is\n`1` resulting in only a single day displayed at a time.\n\n### Alternative Classes\n\nTo display more than a single day consider using the {@link Ext.calendar.panel.Days}\nor {@link Ext.calendar.panel.Week} views.\n"
 },
 {
  "name": "Ext.calendar.panel.Days",
  "xtype": "calendar-days",
  "text": "For an overview of calendar panels see {@link Ext.calendar.panel.Base}\n\nA panel for display a series of days. Composes a\n{@link Ext.calendar.view.Days} with a\n{@link Ext.calendar.header.Base}.\n\nThe Days panel displays events for multiple days with the time of day along the y axis.\nThe panel will display the current date as the first day displayed unless configured\nwith a different date {@link #cfg!value #cfg-value}.  The number of days displayed can be set\nusing the {@link Ext.calendar.view.Days#cfg!visibleDays Ext.calendar.view.Days#visibleDays} config option. By default, the calendar\nhours are displayed as a 24 hour clock and are constrained to 8 (8:00am) and 20 (8:00pm). The\nbeginning and end hour can be set using the {@link #cfg!startTime #cfg-startTime} and\n{@link Ext.calendar.view.Days#cfg!endTime Ext.calendar.view.Days#cfg-endTime} configs.  The time displayed on the timeline may be\ncustomized using either the {@link Ext.calendar.view.Days#cfg!timeFormat Ext.calendar.view.Days#timeFormat} or\n{@link Ext.calendar.view.Days#cfg!timeRenderer Ext.calendar.view.Days#cfg-timeRenderer} config options.\n\nBelow are some of the distinctions to the Days panel (and generally its subclasses).\n\n### Current Local Time\n\nThe current local time (when the current date is displayed) will be shown on the panel\nas a thin marker on the day's timeline.  The current time marker can be set using the\n{@link #cfg!showNowMarker #cfg-showNowMarker} option.\n\n### Calendar Events\n\nEvents show on the timeline with their start and end times correlating to the time\nlabels.  The events will display on the timeline according to your local timezone\noffset from GMT.  The timezone offset can be applied explicitly using the\n{@link #cfg!timezoneOffset #cfg-timezoneOffset} config option.  The exception being all day or multi-day\nevents.  All day / multi-day events will show up at the top of the panel in a dedicated\nspace preceding the panel's start time.\n\n### Adding All Day Events\n\nIn addition to being able to drag / swipe across a day's timeline to show the event\nadd form, an all day type event can be quickly added by tapping / clicking on the\ndedicated all day row displayed above the start hour.  This is the same dedicated\nspace used to display existing all day events.\n\n### Date Range Navigation\n\nThe {@link #cfg-movePrevious} and {@link #cfg-moveNext} methods modify the displayed\ndate range by moving the range forward or backward the number of days set on the\n{@link #cfg!visibleDays #cfg-visibleDays} config.\n\n### Alternative Classes\n\nTo display a single day consider using the {@link Ext.calendar.panel.Day} panel or\n{@link Ext.calendar.panel.Week} to view a week at a time.\n"
 },
 {
  "name": "Ext.calendar.panel.Month",
  "xtype": "calendar-month",
  "text": "For an overview of calendar panels see {@link Ext.calendar.panel.Base}\n\nA panel for display a calendar month. Composes a\n{@link Ext.calendar.view.Month} with a\n{@link Ext.calendar.header.Base}.\n\nThe Month panel shows events over an entire month.  The panel shows a summary of the\nevents that occur on each day.  The Month view uses the current date (or the date set\non the {@link #cfg!value #cfg-value} config) to determine the month to show.\n\nThe Month panel displays (as needed) days from trailing/leading months as required to\nfill the space in the view based on the {@link #cfg!value #cfg-value} and the\n{@link #cfg!firstDayOfWeek #cfg-firstDayOfWeek}.  In the following example, the view will start on Sun Dec\n27 and conclude on Sat Feb 6 because we require 6 rows to display the month of\nJanuary.\n\n     {\n         value: new Date(2010, 0, 1) // Fri\n         firstDayOfWeek: 0 // Sunday\n     }\n\nThe {@link #cfg!visibleWeeks #cfg-visibleWeeks} can be specified as `null` to allow the view to\ncalculate the appropriate number of rows to show in the view, as this varies\nfrom month to month.  This defaults to the largest possible value (6 weeks) so that\nthe view size is consistent across months.\n\n### Date Range Navigation\n\nIn addition to {@link #cfg-navigate}, {@link #cfg-movePrevious}, and\n{@link #cfg-moveNext} the Month view let you quickly navigate between months and\nyears.  The {@link #cfg-previousMonth} and {@link #cfg-nextMonth} methods allow for\nprogrammatic month-to-month navigation while {@link #cfg-previousYear} and\n{@link #cfg-nextYear} navigate the view across years.\n\n### Alternative Classes\n\nFor a multi-week panel refer to {@link Ext.calendar.panel.Weeks}.\n"
 },
 {
  "name": "Ext.calendar.panel.Panel",
  "xtype": "calendar",
  "text": "This class is the main calendar panel, it wraps {@link Ext.calendar.view.Multi}.\n\nIt allows switching between multiple views of the same dataset. It is composed of the\nother calendar types such as {@link Ext.calendar.panel.Month},\n{@link Ext.calendar.panel.Week}, and {@link Ext.calendar.panel.Day}.\n\nIt also provides extra UI features like a switcher button,\n{@link #cfg!titleBar title bar}, and navigation buttons.\n\nSample Calendar panel\n\n    Ext.create({\n        xtype: 'calendar',\n        renderTo: Ext.getBody(),\n        height: 400,\n        width: 600,\n        store: {\n            autoLoad: true,\n            proxy: {\n                type: 'ajax',\n                url: 'calendars.php'\n            },\n            eventStoreDefaults: {\n                proxy: {\n                    type: 'ajax',\n                    url: 'events.php'\n                }\n            }\n        }\n    });\n\nBy default, the Calendar panel contains a {@link Ext.calendar.panel.Day},\n{@link Ext.calendar.panel.Week}, and {@link Ext.calendar.panel.Month} view.\nConfigurations for these views may be passed in the {@link #cfg!views #cfg-views} config option.\nFor example, to display only a 5-day work week instead of the default 7-day week the\nfollowing `{@link #cfg!views views}` config would be used:\n\n    Ext.create({\n        xtype: 'calendar',\n        renderTo: Ext.getBody(),\n        height: 400,\n        width: 600,\n        store: {\n            autoLoad: true,\n            proxy: {\n                type: 'ajax',\n                url: 'calendars.php'\n            },\n            eventStoreDefaults: {\n                proxy: {\n                    type: 'ajax',\n                    url: 'events.php'\n                }\n            }\n        },\n        views: {\n            week: {\n                visibleDays: 5,\n                firstDayOfWeek: 1\n            }\n        }\n    });\n\nThe previous example will result in a Day, Week, and Month view in the Calendar panel\nwith the Week view displaying only 5 days.  Set a default view to `null` to prevent it\nfrom being included in the Calendar panel.\n\n    Ext.create({\n        xtype: 'calendar',\n        renderTo: Ext.getBody(),\n        height: 400,\n        width: 600,\n        store: {\n            autoLoad: true,\n            proxy: {\n                type: 'ajax',\n                url: 'calendars.php'\n            },\n            eventStoreDefaults: {\n                proxy: {\n                    type: 'ajax',\n                    url: 'events.php'\n                }\n            }\n        },\n        views: {\n            month: null,  // now only the Week and Day calendars will be included\n            week: {\n                visibleDays: 5,\n                firstDayOfWeek: 1\n            }\n        }\n    });\n\nSee the {@link #cfg!views #cfg-views} config for additional configuration options.\n\nThe default view is \"month\".  This can be set using the {@link #cfg!defaultView #cfg-defaultView}\nconfig option.\n\nThe following Multi view configs will be applied to any calendar panel in the views\nconfig:\n\n - {@link #cfg!compact #cfg-compact}\n - {@link #cfg!compactOptions #cfg-compactOptions}\n - {@link #cfg!store #cfg-store}\n - {@link #cfg!timezoneOffset #cfg-timezoneOffset}\n - {@link #cfg!value #cfg-value}\n"
 },
 {
  "name": "Ext.calendar.panel.Week",
  "xtype": "calendar-week",
  "text": "For an overview of calendar panels see {@link Ext.calendar.panel.Base}\n\nA panel for display a Week. Composes a {@link Ext.calendar.view.Week} with a\n{@link Ext.calendar.header.Base}.\n\nThe Week panel displays the week containing the current date (or the date\nset on the {@link #cfg!value #cfg-value} config).  The number of days configured on the\n{@link #cfg!visibleDays #cfg-visibleDays} config (defaults to 7) are displayed starting with the value\nset on the {@link #cfg!firstDayOfWeek #cfg-firstDayOfWeek}.\n\nBy default the first day is Sunday.  If you want to create a \"work week\" type view\nwhere the weekend days are omitted you can modify the `{@link #cfg!visibleDays visibleDays}` and\n`{@link #cfg!firstDayOfWeek firstDayOfWeek}` to show only Monday - Friday.\n\n    Ext.create({\n        xtype: 'calendar-weekview',\n        renderTo: Ext.getBody(),\n        height: 400,\n        width: 400,\n        firstDayOfWeek: 1,  // starts the view on Monday\n        visibleDays: 5,     // and displays it and the 4 days after\n        store: {\n            autoLoad: true,\n            proxy: {\n                type: 'ajax',\n                url: 'calendars.php'\n            },\n            eventStoreDefaults: {\n                proxy: {\n                    type: 'ajax',\n                    url: 'events.php'\n                }\n            }\n        }\n    });\n\n### Date Range Navigation\n\nThe {@link #cfg-movePrevious} and {@link #cfg-moveNext} methods modify the displayed\ndate range by moving the range forward or backward one week.\n\ni.e.  `panel.moveNext();` called on a 7-day view 1 week.  **Note** that a panel\nconfigured with 5 `{@link #cfg!visibleDays visibleDays}` would not advance 5 days, but rather will show the\nnext full week with only 5 visible days.\n\n### Alternative Classes\n\nTo display fewer days consider using {@link Ext.calendar.panel.Day} or\n{@link Ext.calendar.panel.Days}.\n"
 },
 {
  "name": "Ext.calendar.panel.Weeks",
  "xtype": "calendar-weeks",
  "text": "For an overview of calendar panels see {@link Ext.calendar.panel.Base}\n\nA panel for display a series of weeks. Composes a\n{@link Ext.calendar.view.Weeks} with a\n{@link Ext.calendar.header.Base}.\n\nThe Weeks panel shows the events for one or more weeks as full days similar to a\nconventional calendar.  For a week view including an hourly timeline see\n{@link Ext.calendar.panel.Week}.\n\nThe weeks panel shows the week containing the current date (or the date set on the\n{@link #cfg!value #value} config) plus any additional weeks totaling the\n{@link #cfg!visibleWeeks #visibleWeeks}.  The number of days shown per week is set using\n{@link #cfg!visibleDays #visibleDays}.  Each week begins on the day set on the\n{@link #cfg!firstDayOfWeek #firstDayOfWeek}.\n\nBy default the first day is Sunday.  If you want to create a \"work week\" type view\nwhere the weekend days are omitted you can modify the `{@link #cfg!visibleDays visibleDays}` and\n`{@link #cfg!firstDayOfWeek firstDayOfWeek}` to show only Monday - Friday.\n\n    Ext.create({\n        xtype: 'calendar-weeksview',\n        renderTo: Ext.getBody(),\n        height: 400,\n        width: 400,\n        firstDayOfWeek: 1,  // starts the view on Monday\n        visibleDays: 5,     // and displays it and the 4 days after\n        store: {\n            autoLoad: true,\n            proxy: {\n                type: 'ajax',\n                url: 'calendars.php'\n            },\n            eventStoreDefaults: {\n                proxy: {\n                    type: 'ajax',\n                    url: 'events.php'\n                }\n            }\n        }\n    });\n\n### Calendar Events\n\nEvents show on the view with their start and end days correlating to the day\nlabels.  The events will display on the timeline according to your local timezone\noffset from GMT.  The timezone offset can be applied explicitly using the\n{@link #cfg!timezoneOffset #timezoneOffset} config option.\n\n### Adding All Day Events\n\nDragging / swiping across multiple days will show the event add form with multiple\ndays pre-populated in the form's start / end dates.  A single all day type event can\nbe added by tapping / clicking on a single day.\n\n### Date Range Navigation\n\nThe {@link #method!movePrevious #movePrevious} and {@link #method!moveNext #moveNext} methods modify the displayed\ndate range by moving the range forward or backward the number of\n{@link #cfg!visibleWeeks #visibleWeeks}.\n\ni.e.  `panel.moveNext();` called on a 7-day view with 2 visible weeks will advance the\nview 2 weeks.  **Note** that a panel configured with 5 `{@link #cfg!visibleDays visibleDays}` would not advance\n5 days, but rather will show the next full week with only 5 visible days.\n\n### Alternative Classes\n\nFor a month view refer to {@link Ext.calendar.view.Month}.\n"
 },
 {
  "name": "Ext.calendar.view.Day",
  "xtype": "calendar-dayview",
  "text": "For an overview of calendar views see {@link Ext.calendar.view.Base}\n\nThe Day view operates the same as its parent {@link Ext.calendar.view.Days} view\nwith one notable difference: the {@link #cfg!visibleDays #cfg-visibleDays} for the Day view is `1`\nresulting in only a single day displayed at a time.\n\n### Alternative Classes\n\nIf your view requires a header showing the date displayed consider using\n{@link Ext.calendar.panel.Day} instead.  To display more than a single day consider\nusing the {@link Ext.calendar.view.Days} or {@link Ext.calendar.view.Week} views.\n"
 },
 {
  "name": "Ext.calendar.view.Days",
  "xtype": "calendar-daysview",
  "text": "For an overview of calendar views see {@link Ext.calendar.view.Base}\n\nThe Days view displays events for multiple days with the time of day along the y axis.\nThe view will display the current date as the first day displayed unless configured\nwith a different date {@link #cfg!value #value}.  The number of days displayed can be set\nusing the {@link #cfg!visibleDays #visibleDays} config option.  By default, the calendar hours are\ndisplayed as a 24 hour clock and are constrained to 8 (8:00am) and 20 (8:00pm).  The\nbeginning and end hour can be set using the {@link #cfg!startTime #startTime} and\n{@link #cfg!endTime #endTime} configs.  The time displayed on the timeline may be customized\nusing either the {@link #cfg!timeFormat #timeFormat} or {@link #cfg!timeRenderer #timeRenderer} config options.\n\nBelow are some of the distinctions to the Days view (and generally its subclasses).\n\n### Current Local Time\n\nThe current local time (when the current date is displayed) will be shown on the view\nas a thin marker on the day's timeline.  The current time marker can be set using the\n{@link #cfg!showNowMarker #showNowMarker} option.\n\n### Calendar Events\n\nEvents show on the timeline with their start and end times correlating to the time\nlabels.  The events will display on the timeline according to your local timezone\noffset from GMT.  The timezone offset can be applied explicitly using the\n{@link #cfg!timezoneOffset #timezoneOffset} config option.  The exception being all day or multi-day\nevents.  All day / multi-day events will show up at the top of the view in a dedicated\nspace preceding the view's start time.\n\n### Adding All Day Events\n\nIn addition to being able to drag / swipe across a day's timeline to show the event\nadd form, an all day type event can be quickly added by tapping / clicking on the\ndedicated all day row displayed above the start hour.  This is the same dedicated\nspace used to display existing all day events.\n\n### Date Range Navigation\n\nThe {@link #method!movePrevious #movePrevious} and {@link #method!moveNext #moveNext} methods modify the displayed\ndate range by moving the range forward or backward the number of days set on the\n{@link #cfg!visibleDays #visibleDays} config.\n\n### Alternative Classes\n\nIf your view requires a header showing the dates displayed consider using\n{@link Ext.calendar.panel.Days} instead.  To display a single day consider using the\n{@link Ext.calendar.view.Day} view or {@link Ext.calendar.view.Week} to view a week at\na time.\n"
 },
 {
  "name": "Ext.calendar.view.Month",
  "xtype": "calendar-monthview",
  "text": "For an overview of calendar views see {@link Ext.calendar.view.Base}\n\nThe Month view shows events over an entire month.  The view shows a summary of the\nevents that occur on each day.  The month view uses the current date (or the date set\non the {@link #cfg!value #value} config) to determine the month to show.\n\nThe Month view displays (as needed) days from trailing/leading months as required to\nfill the space in the view based on the {@link #cfg!value #value} and the\n{@link #cfg!firstDayOfWeek #firstDayOfWeek}.  In the following example, the view will start on Sun Dec\n27 and conclude on Sat Feb 6 because we require 6 rows to display the month of\nJanuary.\n\n     {\n         value: new Date(2010, 0, 1) // Fri\n         firstDayOfWeek: 0 // Sunday\n     }\n\nThe {@link #cfg!visibleWeeks #visibleWeeks} can be specified as `null` to allow the view to\ncalculate the appropriate number of rows to show in the view, as this varies\nfrom month to month.  This defaults to the largest possible value (6 weeks) so that\nthe view size is consistent across months.\n\n### Date Range Navigation\n\nIn addition to {@link #method!navigate #navigate}, {@link #method!movePrevious #movePrevious}, and\n{@link #method!moveNext #moveNext} the Month view let you quickly navigate between months and\nyears.  The {@link #method!previousMonth #previousMonth} and {@link #method!nextMonth #nextMonth} methods allow for\nprogrammatic month-to-month navigation while {@link #method!previousYear #previousYear} and\n{@link #method!nextYear #nextYear} navigate the view across years.\n\n### Alternative Classes\n\nIf your view requires a header showing the days of the week consider using\n{@link Ext.calendar.panel.Weeks} instead.  For a multi-week view refer to\n{@link Ext.calendar.view.Weeks}.\n"
 },
 {
  "name": "Ext.calendar.view.Multi",
  "xtype": "calendar-multiview",
  "text": "For an overview of calendar views see {@link Ext.calendar.view.Base}\n\nThis view is used to wrap multiple calendar panels and allows switching between and\ncommunicating with them through a single interface. This class does not provide any\nadditional UI functionality.  That is provided by {@link Ext.calendar.panel.Panel}\nwhich wraps this component.\n\nSample Multi view\n\n    Ext.create({\n        xtype: 'calendar-multiview',\n        renderTo: Ext.getBody(),\n        height: 400,\n        width: 400,\n        store: {\n            autoLoad: true,\n            proxy: {\n                type: 'ajax',\n                url: 'calendars.php'\n            },\n            eventStoreDefaults: {\n                proxy: {\n                    type: 'ajax',\n                    url: 'events.php'\n                }\n            }\n        },\n        views: {\n            day: {\n                xtype: 'calendar-day'\n            },\n            week: {\n                xtype: 'calendar-week'\n            },\n            month: {\n                xtype: 'calendar-month'\n            }\n        },\n        defaultView: 'day'\n    });\n\nIn the previous example we've detailed the calendar panel types we're interested in\nhaving contained within the multi view using the {@link #cfg!views #cfg-views} config option.\nThe key specified for each calendar panel will be used when specifying the initial\n{@link #cfg!defaultView #cfg-defaultView} as well as when setting the current view at runtime using\nthe {@link #method!setView #method-setView} method.\n\nThe following Multi view configs will be applied to any calendar panel in the views\nconfig:\n\n - {@link #cfg!compact #cfg-compact}\n - {@link #cfg!compactOptions #cfg-compactOptions}\n - {@link #cfg!store #cfg-store}\n - {@link #cfg!timezoneOffset #cfg-timezoneOffset}\n - {@link #cfg!value #cfg-value}\n\n### Date Range Navigation\n\nThe {@link #method!movePrevious #movePrevious} and {@link #method!moveNext #moveNext} move the active view backward\nand forward.  The amount moved depends on the current view type.\n\n### Alternative Classes\n\nIf you require UI controls for navigating views and toggling the visibility of events\nper source calendar consider {@link Ext.calendar.panel.Panel}.\nExt.calendar.panel.Panel wraps the Multi view and provides navigational controls.\n"
 },
 {
  "name": "Ext.calendar.view.Week",
  "xtype": "calendar-weekview",
  "text": "For an overview of calendar views see {@link Ext.calendar.view.Base}\n\nThe Week view displays the week containing the current date (or the date\nset on the {@link #cfg!value #cfg-value} config).  The number of days configured on the\n{@link #cfg!visibleDays #cfg-visibleDays} config (defaults to 7) are displayed starting with the value\nset on the {@link #cfg!firstDayOfWeek #cfg-firstDayOfWeek}.\n\nBy default the first day is Sunday.  If you want to create a \"work week\" type view\nwhere the weekend days are omitted you can modify the `{@link #cfg!visibleDays visibleDays}` and\n`{@link #cfg!firstDayOfWeek firstDayOfWeek}` to show only Monday - Friday.\n\n    Ext.create({\n        xtype: 'calendar-weekview',\n        renderTo: Ext.getBody(),\n        height: 400,\n        width: 400,\n        firstDayOfWeek: 1,  // starts the view on Monday\n        visibleDays: 5,     // and displays it and the 4 days after\n        store: {\n            autoLoad: true,\n            proxy: {\n                type: 'ajax',\n                url: 'calendars.php'\n            },\n            eventStoreDefaults: {\n                proxy: {\n                    type: 'ajax',\n                    url: 'events.php'\n                }\n            }\n        }\n    });\n\n### Date Range Navigation\n\nThe {@link #cfg-movePrevious} and {@link #cfg-moveNext} methods modify the displayed\ndate range by moving the range forward or backward one week.\n\ni.e.  `view.moveNext();` called on a 7-day view 1 week.  **Note** that a view\nconfigured with 5 `{@link #cfg!visibleDays visibleDays}` would not advance 5 days, but rather will show the\nnext full week with only 5 visible days.\n\n### Alternative Classes\n\nIf your view requires a header showing the dates displayed consider using\n{@link Ext.calendar.panel.Week} instead.  To display fewer days consider using the\n{@link Ext.calendar.view.Day} or {@link Ext.calendar.view.Days} view.\n"
 },
 {
  "name": "Ext.calendar.view.Weeks",
  "xtype": "calendar-weeksview",
  "text": "For an overview of calendar views see {@link Ext.calendar.view.Base}\n\nThe Weeks view shows the events for one or more weeks as full days similar to a\nconventional calendar.  For a week view including an hourly timeline see\n{@link Ext.calendar.view.Week}.\n\nThe weeks view shows the week containing the current date (or the date set on the\n{@link #cfg!value #value} config) plus any additional weeks totaling the\n{@link #cfg!visibleWeeks #visibleWeeks}.  The number of days shown per week is set using\n{@link #cfg!visibleDays #visibleDays}.  Each week begins on the day set on the\n{@link #cfg!firstDayOfWeek #firstDayOfWeek}.\n\nBy default the first day is Sunday.  If you want to create a \"work week\" type view\nwhere the weekend days are omitted you can modify the `{@link #cfg!visibleDays visibleDays}` and\n`{@link #cfg!firstDayOfWeek firstDayOfWeek}` to show only Monday - Friday.\n\n    Ext.create({\n        xtype: 'calendar-weeksview',\n        renderTo: Ext.getBody(),\n        height: 400,\n        width: 400,\n        firstDayOfWeek: 1,  // starts the view on Monday\n        visibleDays: 5,     // and displays it and the 4 days after\n        store: {\n            autoLoad: true,\n            proxy: {\n                type: 'ajax',\n                url: 'calendars.php'\n            },\n            eventStoreDefaults: {\n                proxy: {\n                    type: 'ajax',\n                    url: 'events.php'\n                }\n            }\n        }\n    });\n\n### Calendar Events\n\nEvents show on the view with their start and end days correlating to the day\nlabels.  The events will display on the timeline according to your local timezone\noffset from GMT.  The timezone offset can be applied explicitly using the\n{@link #cfg!timezoneOffset #timezoneOffset} config option.\n\n### Adding All Day Events\n\nDragging / swiping across multiple days will show the event add form with multiple\ndays pre-populated in the form's start / end dates.  A single all day type event can\nbe added by tapping / clicking on a single day.\n\n### Date Range Navigation\n\nThe {@link #method!movePrevious #movePrevious} and {@link #method!moveNext #moveNext} methods modify the displayed\ndate range by moving the range forward or backward the number of\n{@link #cfg!visibleWeeks #visibleWeeks}.\n\ni.e.  `view.moveNext();` called on a 7-day view with 2 visible weeks will advance the\nview 2 weeks.  **Note** that a view configured with 5 `{@link #cfg!visibleDays visibleDays}` would not advance\n5 days, but rather will show the next full week with only 5 visible days.\n\n### Alternative Classes\n\nIf your view requires a header showing the days of the week consider using\n{@link Ext.calendar.panel.Weeks} instead.  For a month view refer to\n{@link Ext.calendar.view.Month}.\n"
 },
 {
  "name": "Ext.carousel.Carousel",
  "xtype": "carousel",
  "text": "Carousels, like tabs, are a great way to allow the user to swipe\nthrough multiple full-screen pages.\nA Carousel shows only one of its pages at a time but allows you\nto swipe through with your finger.\n\nCarousels can be oriented either horizontally or vertically and are\neasy to configure - they just work like any other.\nContainer. Here's how to set up a simple horizontal Carousel:\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Carousel', {\n    fullscreen: true,\n\n    items: [{\n        html : 'Item 1',\n        style: 'background-color: #5E99CC'\n    }, {\n         html : 'Item 2',\n         style: 'background-color: #759E60'\n    }, {\n          html : 'Item 3'\n    }]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtCarousel, ExtContainer } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n   render() {\n       return (\n           <ExtContainer layout=\"fit\">\n               <ExtCarousel>\n                   <ExtContainer>\n                       <div>Slide 1!</div>\n                   </ExtContainer>\n                   <ExtContainer>\n                       <div>Slide 2!</div>\n                   </ExtContainer>\n                   <ExtContainer>\n                       <div>Slide 3!</div>\n                   </ExtContainer>\n               </ExtCarousel>\n           </ExtContainer>\n       )\n   }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer [layout]=\"'fit'\">\n            <ExtCarousel [width]=\"'800'\" [height]=\"'600'\">\n                <ExtContainer [html]=\"'Slide 1!'\"></ExtContainer>\n                <ExtContainer [html]=\"'Slide 2!'\"></ExtContainer>\n                <ExtContainer [html]=\"'Slide 3!'\"></ExtContainer>\n           </ExtCarousel>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n\n```HTML\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"fit\">\n   <ext-carousel>\n       <ext-container html=\"<div>Slide 1!</div>\">\n       </ext-container>\n       <ext-container html=\"<div>Slide 2!</div>\">\n       </ext-container>\n       <ext-container html=\"<div>Slide 3!</div>\">\n       </ext-container>\n   </ext-carousel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-carousel.component';\nimport '@sencha/ext-web-components/dist/ext-spinnerfield.component';\n\nexport default class CarouselComponent {}\n```\nWe can also make Carousels orient themselves vertically:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Carousel', {\n    fullscreen: true,\n    direction: 'vertical',\n\n    items: [\n        {\n            html : 'Item 1',\n            style: 'background-color: #759E60'\n        },\n        {\n            html : 'Item 2',\n            style: 'background-color: #5E99CC'\n        }\n    ]\n});\n```\n\n### Common Configurations\n* {@link #cfg!ui #ui} defines the style of the carousel\n* {@link #cfg!direction #direction} defines the direction of the carousel\n* {@link #cfg!indicator #indicator} defines if the indicator show be shown\n\n### Useful Methods\n* {@link #method!next #next} moves to the next card\n* {@link #method!previous #previous} moves to the previous card\n* {@link #setActiveItem} moves to the passed card\n"
 },
 {
  "name": "Ext.carousel.Carousel",
  "xtype": "carousel",
  "text": "Carousels, like tabs, are a great way to allow the user to swipe\nthrough multiple full-screen pages.\nA Carousel shows only one of its pages at a time but allows you\nto swipe through with your finger.\n\nCarousels can be oriented either horizontally or vertically and are\neasy to configure - they just work like any other.\nContainer. Here's how to set up a simple horizontal Carousel:\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Carousel', {\n    fullscreen: true,\n\n    items: [{\n        html : 'Item 1',\n        style: 'background-color: #5E99CC'\n    }, {\n         html : 'Item 2',\n         style: 'background-color: #759E60'\n    }, {\n          html : 'Item 3'\n    }]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtCarousel, ExtContainer } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n   render() {\n       return (\n           <ExtContainer layout=\"fit\">\n               <ExtCarousel>\n                   <ExtContainer>\n                       <div>Slide 1!</div>\n                   </ExtContainer>\n                   <ExtContainer>\n                       <div>Slide 2!</div>\n                   </ExtContainer>\n                   <ExtContainer>\n                       <div>Slide 3!</div>\n                   </ExtContainer>\n               </ExtCarousel>\n           </ExtContainer>\n       )\n   }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer [layout]=\"'fit'\">\n            <ExtCarousel [width]=\"'800'\" [height]=\"'600'\">\n                <ExtContainer [html]=\"'Slide 1!'\"></ExtContainer>\n                <ExtContainer [html]=\"'Slide 2!'\"></ExtContainer>\n                <ExtContainer [html]=\"'Slide 3!'\"></ExtContainer>\n           </ExtCarousel>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n\n```HTML\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"fit\">\n   <ext-carousel>\n       <ext-container html=\"<div>Slide 1!</div>\">\n       </ext-container>\n       <ext-container html=\"<div>Slide 2!</div>\">\n       </ext-container>\n       <ext-container html=\"<div>Slide 3!</div>\">\n       </ext-container>\n   </ext-carousel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-carousel.component';\nimport '@sencha/ext-web-components/dist/ext-spinnerfield.component';\n\nexport default class CarouselComponent {}\n```\nWe can also make Carousels orient themselves vertically:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Carousel', {\n    fullscreen: true,\n    direction: 'vertical',\n\n    items: [\n        {\n            html : 'Item 1',\n            style: 'background-color: #759E60'\n        },\n        {\n            html : 'Item 2',\n            style: 'background-color: #5E99CC'\n        }\n    ]\n});\n```\n\n### Common Configurations\n* {@link #cfg!ui #ui} defines the style of the carousel\n* {@link #cfg!direction #direction} defines the direction of the carousel\n* {@link #cfg!indicator #indicator} defines if the indicator show be shown\n\n### Useful Methods\n* {@link #method!next #next} moves to the next card\n* {@link #method!previous #previous} moves to the previous card\n* {@link #setActiveItem} moves to the passed card\n"
 },
 {
  "name": "Ext.chart.CartesianChart",
  "xtype": "cartesian",
  "text": "Represents a chart that uses cartesian coordinates.\nA cartesian chart has two directions, X direction and Y direction.\nThe series and axes are coordinated along these directions.\nBy default the x direction is horizontal and y direction is vertical,\nYou can swap the direction by setting the {@link #cfg!flipXY #flipXY} config to `true`.\n\nCartesian series often treats x direction an y direction differently.\nIn most cases, data on x direction are assumed to be monotonically increasing.\nBased on this property, cartesian series can be trimmed and summarized properly\nto gain a better performance.\n\nPlease check out the summary for the {@link Ext.chart.AbstractChart} as well,\nfor helpful tips and important details.\n"
 },
 {
  "name": "Ext.chart.CartesianChart",
  "xtype": "chart",
  "text": "Represents a chart that uses cartesian coordinates.\nA cartesian chart has two directions, X direction and Y direction.\nThe series and axes are coordinated along these directions.\nBy default the x direction is horizontal and y direction is vertical,\nYou can swap the direction by setting the {@link #cfg!flipXY #flipXY} config to `true`.\n\nCartesian series often treats x direction an y direction differently.\nIn most cases, data on x direction are assumed to be monotonically increasing.\nBased on this property, cartesian series can be trimmed and summarized properly\nto gain a better performance.\n\nPlease check out the summary for the {@link Ext.chart.AbstractChart} as well,\nfor helpful tips and important details.\n"
 },
 {
  "name": "Ext.chart.CartesianChart",
  "xtype": "cartesian",
  "text": "Represents a chart that uses cartesian coordinates.\nA cartesian chart has two directions, X direction and Y direction.\nThe series and axes are coordinated along these directions.\nBy default the x direction is horizontal and y direction is vertical,\nYou can swap the direction by setting the {@link #cfg!flipXY #flipXY} config to `true`.\n\nCartesian series often treats x direction an y direction differently.\nIn most cases, data on x direction are assumed to be monotonically increasing.\nBased on this property, cartesian series can be trimmed and summarized properly\nto gain a better performance.\n\nPlease check out the summary for the {@link Ext.chart.AbstractChart} as well,\nfor helpful tips and important details.\n"
 },
 {
  "name": "Ext.chart.CartesianChart",
  "xtype": "chart",
  "text": "Represents a chart that uses cartesian coordinates.\nA cartesian chart has two directions, X direction and Y direction.\nThe series and axes are coordinated along these directions.\nBy default the x direction is horizontal and y direction is vertical,\nYou can swap the direction by setting the {@link #cfg!flipXY #flipXY} config to `true`.\n\nCartesian series often treats x direction an y direction differently.\nIn most cases, data on x direction are assumed to be monotonically increasing.\nBased on this property, cartesian series can be trimmed and summarized properly\nto gain a better performance.\n\nPlease check out the summary for the {@link Ext.chart.AbstractChart} as well,\nfor helpful tips and important details.\n"
 },
 {
  "name": "Ext.chart.legend.Legend",
  "xtype": "legend",
  "text": "This class provides a dataview-based chart legend.\n"
 },
 {
  "name": "Ext.chart.legend.Legend",
  "xtype": "legend",
  "text": "This class provides a dataview-based chart legend.\n"
 },
 {
  "name": "Ext.chart.navigator.Container",
  "xtype": "chartnavigator",
  "text": "The Navigator Container is a component used to lay out the chart and its\n{@link Ext.chart.navigator.Navigator}, where the navigator is docked\nto the top/bottom, and the chart fills the rest of the container's space.\n\nFor example:\n\n    @example\n    Ext.create({\n        xtype: 'chartnavigator',\n        renderTo: Ext.getBody(),\n        width: 600,\n        height: 400,\n\n        chart: {\n            xtype: 'cartesian',\n\n            store: {\n                data: (function () {\n                    var data = [];\n                    for (var i = 0; i < 360; i++) {\n                        data.push({\n                            x: i,\n                            y: Math.sin(i / 45 * Math.PI)\n                        });\n                    }\n                    return data;\n                })()\n            },\n            axes: [\n                {\n                    id: 'navigable-axis',\n\n                    type: 'numeric',\n                    position: 'bottom'\n                },\n                {\n                    type: 'numeric',\n                    position: 'left'\n                }\n            ],\n            series: {\n                type: 'line',\n                xField: 'x',\n                yField: 'y'\n            }\n        },\n\n        navigator: {\n            axis: 'navigable-axis'\n        }\n    });\n"
 },
 {
  "name": "Ext.chart.PolarChart",
  "xtype": "polar",
  "text": "\nRepresent a chart that uses polar coordinates.\nA polar chart has two axes: an angular axis (which is a circle) and\na radial axis (a straight line from the center to the edge of the circle).\nThe angular axis is usually a Category axis while the radial axis is\ntypically numerical.\n\nPie charts and Radar charts are common examples of Polar charts.\n\nPlease check out the summary for the {@link Ext.chart.AbstractChart} as well,\nfor helpful tips and important details.\n"
 },
 {
  "name": "Ext.chart.SpaceFillingChart",
  "xtype": "spacefilling",
  "text": "\nCreates a chart that fills the entire area of the chart.\ne.g. Gauge Charts\n"
 },
 {
  "name": "Ext.Chip",
  "xtype": "chip",
  "text": "This class is used to display instances of a data item in an input area. For example,\nemail addresses.\n\nTo represent {@link Ext.data.Store} of {@link Ext.data.Model} using Chips,\nsee the {@link Ext.dataview.ChipView} class.\n"
 },
 {
  "name": "Ext.Component",
  "xtype": "component",
  "text": "Most of the visual classes you interact with are Components. Every Component is a\nsubclass of Ext.Component, which means they can all:\n\n* Render themselves onto the page using a template\n* Show and hide themselves at any time\n* Center themselves within their parent container\n* Enable and disable themselves\n\nThey can also do a few more advanced things:\n\n* Float above other components (windows, message boxes and overlays)\n* Change size and position on the screen with animation\n* Dock other Components inside themselves (useful for toolbars)\n* Align to other components\n* Allow themselves to be dragged around\n* Make their content scrollable & more\n\n## Available Components\n\nThere are many components.  They are separated into 4 main groups:\n\n### Navigation components\n* {@link Ext.Toolbar}\n* {@link Ext.Button}\n* {@link Ext.TitleBar}\n* {@link Ext.SegmentedButton}\n* {@link Ext.Title}\n* {@link Ext.Spacer}\n\n### Store-bound components\n* {@link Ext.dataview.DataView}\n* {@link Ext.carousel.Carousel Ext.Carousel}\n* {@link Ext.dataview.List Ext.List}\n* {@link Ext.dataview.NestedList Ext.NestedList}\n\n### Form components\n* {@link Ext.form.Panel}\n* {@link Ext.form.FieldSet}\n* {@link Ext.field.Checkbox}\n* {@link Ext.field.Hidden}\n* {@link Ext.field.Slider}\n* {@link Ext.field.Text}\n* {@link Ext.picker.Picker}\n* {@link Ext.picker.Date}\n\n### General components\n* {@link Ext.Panel}\n* {@link Ext.tab.Panel}\n* {@link Ext.Viewport}\n* {@link Ext.Img}\n* {@link Ext.Audio}\n* {@link Ext.Video}\n* {@link Ext.Sheet}\n* {@link Ext.ActionSheet}\n* {@link Ext.MessageBox}\n\n\n## Instantiating Components\n\nComponents are created the same way as all other classes - using Ext.create. Here's how we can\ncreate a Text field:\n\n    var panel = Ext.create('Ext.Panel', {\n        html: 'This is my panel'\n    });\n\nThis will create a {@link Ext.Panel} instance, configured with some basic HTML content. A\nPanel is just a simple Component that can render HTML and also contain other items. In this case\nwe've created a Panel instance but it won't show up on the screen yet because items are not\nrendered immediately after being instantiated. This allows us to create some components and move\nthem around before rendering and laying them out, which is a good deal faster than moving them\nafter rendering.\n\nTo show this panel on the screen now we can simply add it to the global Viewport:\n\n    Ext.Viewport.add(panel);\n\nPanels are also Containers, which means they can contain other Components, arranged by a layout.\nLet's revisit the above example now, this time creating a panel with two child Components and a\nhbox layout:\n\n```javascript\n@example({ framework: 'extjs' })\nvar panel = Ext.create('Ext.Panel', {\n    layout: 'hbox',\n\n    items: [\n        {\n            xtype: 'panel',\n            flex: 1,\n            html: 'Left Panel, 1/3rd of total size',\n             style: 'background-color: #5E99CC;'\n        },\n        {\n            xtype: 'panel',\n            flex: 2,\n            html: 'Right Panel, 2/3rds of total size',\n            style: 'background-color: #759E60;'\n        }\n    ]\n});\n\nExt.Viewport.add(panel);\n```\n\nThis time we created 3 Panels - the first one is created just as before but the inner two are\ndeclared inline using an xtype. Xtype is a convenient way of creating Components without having\nto go through the process of using Ext.create and specifying the full class name, instead you\ncan just provide the xtype for the class inside an object and the framework will create the\ncomponents for you.\n\nWe also specified a layout for the top level panel - in this case hbox, which splits the\nhorizontal width of the parent panel based on the 'flex' of each child. For example, if the\nparent Panel above is 300px wide then the first child will be flexed to 100px wide and the\nsecond to 200px because the first one was given `flex: 1` and the second `flex: 2`.\n\n## Using xtype\n\nxtype is an easy way to create Components without using the full class name. This is especially\nuseful when creating a {@link Ext.Container} that contains child Components. An xtype\nis simply a shorthand way of specifying a Component - for example you can use `xtype: 'panel'`\ninstead of typing out Ext.Panel.\n\nSample usage:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Container', {\n    fullscreen: true,\n    layout: 'fit',\n\n    items: [\n        {\n            xtype: 'panel',\n            html: 'This panel is created by xtype'\n        },\n        {\n            xtype: 'toolbar',\n            title: 'So is the toolbar',\n            docked: 'top'\n        }\n    ]\n});\n```\n\n\n### Common xtypes\n\n<pre>\nxtype                   Class\n-----------------       ---------------------\nactionsheet             Ext.ActionSheet\naudio                   Ext.Audio\nbutton                  Ext.Button\nimage                   Ext.Img\nlabel                   Ext.Label\nloadmask                Ext.LoadMask\npanel                   Ext.Panel\nsegmentedbutton         Ext.SegmentedButton\nsheet                   Ext.Sheet\nspacer                  Ext.Spacer\ntitlebar                Ext.TitleBar\ntoolbar                 Ext.Toolbar\nvideo                   Ext.Video\ncarousel                Ext.carousel.Carousel\nnavigationview          Ext.navigation.View\ndatepicker              Ext.picker.Date\npicker                  Ext.picker.Picker\nslider                  Ext.slider.Slider\nthumb                   Ext.slider.Thumb\ntabpanel                Ext.tab.Panel\nviewport                Ext.viewport.Default\n\nDataView Components\n---------------------------------------------\ndataview                Ext.dataview.DataView\nlist                    Ext.dataview.List\nnestedlist              Ext.dataview.NestedList\n\nForm Components\n---------------------------------------------\ncheckboxfield           Ext.field.Checkbox\ndatepickerfield         Ext.field.DatePicker\nemailfield              Ext.field.Email\nhiddenfield             Ext.field.Hidden\nnumberfield             Ext.field.Number\npasswordfield           Ext.field.Password\nradiofield              Ext.field.Radio\nsearchfield             Ext.field.Search\nselectfield             Ext.field.Select\nsliderfield             Ext.field.Slider\nspinnerfield            Ext.field.Spinner\ntextfield               Ext.field.Text\ntextareafield           Ext.field.TextArea\ntogglefield             Ext.field.Toggle\nurlfield                Ext.field.Url\nfieldset                Ext.form.FieldSet\nformpanel               Ext.form.Panel\n</pre>\n\n## Configuring Components\n\nWhenever you create a new Component you can pass in configuration options. All of the\nconfigurations for a given Component are listed in the \"Config options\" section of its class\ndocs page. You can pass in any number of configuration options when you instantiate the\nComponent, and modify any of them at any point later. For example, we can easily modify the\n{@link Ext.Panel#cfg!html html content} of a Panel after creating it:\n\n```javascript\n@example({ framework: 'extjs' })\n // we can configure the HTML when we instantiate the Component\n var panel = Ext.create('Ext.Panel', {\n     fullscreen: true,\n     html: 'This is a Panel'\n });\n\n // we can update the HTML later using the setHtml method:\n panel.setHtml('Some new HTML');\n\n // we can retrieve the current HTML using the getHtml method:\n Ext.Msg.alert(panel.getHtml()); // displays \"Some new HTML\"\n```\n\nEvery config has a getter method and a setter method - these are automatically generated and\nalways follow the same pattern. For example, a config called `{@link #cfg!html html}` will receive `getHtml` and\n`setHtml` methods, a config called `defaultType` will receive `getDefaultType` and\n`setDefaultType` methods, and so on.\n"
 },
 {
  "name": "Ext.Component",
  "xtype": "component",
  "text": "Most of the visual classes you interact with are Components. Every Component is a\nsubclass of Ext.Component, which means they can all:\n\n* Render themselves onto the page using a template\n* Show and hide themselves at any time\n* Center themselves within their parent container\n* Enable and disable themselves\n\nThey can also do a few more advanced things:\n\n* Float above other components (windows, message boxes and overlays)\n* Change size and position on the screen with animation\n* Dock other Components inside themselves (useful for toolbars)\n* Align to other components\n* Allow themselves to be dragged around\n* Make their content scrollable & more\n\n## Available Components\n\nThere are many components.  They are separated into 4 main groups:\n\n### Navigation components\n* {@link Ext.Toolbar}\n* {@link Ext.Button}\n* {@link Ext.TitleBar}\n* {@link Ext.SegmentedButton}\n* {@link Ext.Title}\n* {@link Ext.Spacer}\n\n### Store-bound components\n* {@link Ext.dataview.DataView}\n* {@link Ext.carousel.Carousel Ext.Carousel}\n* {@link Ext.dataview.List Ext.List}\n* {@link Ext.dataview.NestedList Ext.NestedList}\n\n### Form components\n* {@link Ext.form.Panel}\n* {@link Ext.form.FieldSet}\n* {@link Ext.field.Checkbox}\n* {@link Ext.field.Hidden}\n* {@link Ext.field.Slider}\n* {@link Ext.field.Text}\n* {@link Ext.picker.Picker}\n* {@link Ext.picker.Date}\n\n### General components\n* {@link Ext.Panel}\n* {@link Ext.tab.Panel}\n* {@link Ext.Viewport}\n* {@link Ext.Img}\n* {@link Ext.Audio}\n* {@link Ext.Video}\n* {@link Ext.Sheet}\n* {@link Ext.ActionSheet}\n* {@link Ext.MessageBox}\n\n\n## Instantiating Components\n\nComponents are created the same way as all other classes - using Ext.create. Here's how we can\ncreate a Text field:\n\n    var panel = Ext.create('Ext.Panel', {\n        html: 'This is my panel'\n    });\n\nThis will create a {@link Ext.Panel} instance, configured with some basic HTML content. A\nPanel is just a simple Component that can render HTML and also contain other items. In this case\nwe've created a Panel instance but it won't show up on the screen yet because items are not\nrendered immediately after being instantiated. This allows us to create some components and move\nthem around before rendering and laying them out, which is a good deal faster than moving them\nafter rendering.\n\nTo show this panel on the screen now we can simply add it to the global Viewport:\n\n    Ext.Viewport.add(panel);\n\nPanels are also Containers, which means they can contain other Components, arranged by a layout.\nLet's revisit the above example now, this time creating a panel with two child Components and a\nhbox layout:\n\n```javascript\n@example({ framework: 'extjs' })\nvar panel = Ext.create('Ext.Panel', {\n    layout: 'hbox',\n\n    items: [\n        {\n            xtype: 'panel',\n            flex: 1,\n            html: 'Left Panel, 1/3rd of total size',\n             style: 'background-color: #5E99CC;'\n        },\n        {\n            xtype: 'panel',\n            flex: 2,\n            html: 'Right Panel, 2/3rds of total size',\n            style: 'background-color: #759E60;'\n        }\n    ]\n});\n\nExt.Viewport.add(panel);\n```\n\nThis time we created 3 Panels - the first one is created just as before but the inner two are\ndeclared inline using an xtype. Xtype is a convenient way of creating Components without having\nto go through the process of using Ext.create and specifying the full class name, instead you\ncan just provide the xtype for the class inside an object and the framework will create the\ncomponents for you.\n\nWe also specified a layout for the top level panel - in this case hbox, which splits the\nhorizontal width of the parent panel based on the 'flex' of each child. For example, if the\nparent Panel above is 300px wide then the first child will be flexed to 100px wide and the\nsecond to 200px because the first one was given `flex: 1` and the second `flex: 2`.\n\n## Using xtype\n\nxtype is an easy way to create Components without using the full class name. This is especially\nuseful when creating a {@link Ext.Container} that contains child Components. An xtype\nis simply a shorthand way of specifying a Component - for example you can use `xtype: 'panel'`\ninstead of typing out Ext.Panel.\n\nSample usage:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Container', {\n    fullscreen: true,\n    layout: 'fit',\n\n    items: [\n        {\n            xtype: 'panel',\n            html: 'This panel is created by xtype'\n        },\n        {\n            xtype: 'toolbar',\n            title: 'So is the toolbar',\n            docked: 'top'\n        }\n    ]\n});\n```\n\n\n### Common xtypes\n\n<pre>\nxtype                   Class\n-----------------       ---------------------\nactionsheet             Ext.ActionSheet\naudio                   Ext.Audio\nbutton                  Ext.Button\nimage                   Ext.Img\nlabel                   Ext.Label\nloadmask                Ext.LoadMask\npanel                   Ext.Panel\nsegmentedbutton         Ext.SegmentedButton\nsheet                   Ext.Sheet\nspacer                  Ext.Spacer\ntitlebar                Ext.TitleBar\ntoolbar                 Ext.Toolbar\nvideo                   Ext.Video\ncarousel                Ext.carousel.Carousel\nnavigationview          Ext.navigation.View\ndatepicker              Ext.picker.Date\npicker                  Ext.picker.Picker\nslider                  Ext.slider.Slider\nthumb                   Ext.slider.Thumb\ntabpanel                Ext.tab.Panel\nviewport                Ext.viewport.Default\n\nDataView Components\n---------------------------------------------\ndataview                Ext.dataview.DataView\nlist                    Ext.dataview.List\nnestedlist              Ext.dataview.NestedList\n\nForm Components\n---------------------------------------------\ncheckboxfield           Ext.field.Checkbox\ndatepickerfield         Ext.field.DatePicker\nemailfield              Ext.field.Email\nhiddenfield             Ext.field.Hidden\nnumberfield             Ext.field.Number\npasswordfield           Ext.field.Password\nradiofield              Ext.field.Radio\nsearchfield             Ext.field.Search\nselectfield             Ext.field.Select\nsliderfield             Ext.field.Slider\nspinnerfield            Ext.field.Spinner\ntextfield               Ext.field.Text\ntextareafield           Ext.field.TextArea\ntogglefield             Ext.field.Toggle\nurlfield                Ext.field.Url\nfieldset                Ext.form.FieldSet\nformpanel               Ext.form.Panel\n</pre>\n\n## Configuring Components\n\nWhenever you create a new Component you can pass in configuration options. All of the\nconfigurations for a given Component are listed in the \"Config options\" section of its class\ndocs page. You can pass in any number of configuration options when you instantiate the\nComponent, and modify any of them at any point later. For example, we can easily modify the\n{@link Ext.Panel#cfg!html html content} of a Panel after creating it:\n\n```javascript\n@example({ framework: 'extjs' })\n // we can configure the HTML when we instantiate the Component\n var panel = Ext.create('Ext.Panel', {\n     fullscreen: true,\n     html: 'This is a Panel'\n });\n\n // we can update the HTML later using the setHtml method:\n panel.setHtml('Some new HTML');\n\n // we can retrieve the current HTML using the getHtml method:\n Ext.Msg.alert(panel.getHtml()); // displays \"Some new HTML\"\n```\n\nEvery config has a getter method and a setter method - these are automatically generated and\nalways follow the same pattern. For example, a config called `{@link #cfg!html html}` will receive `getHtml` and\n`setHtml` methods, a config called `defaultType` will receive `getDefaultType` and\n`setDefaultType` methods, and so on.\n"
 },
 {
  "name": "Ext.Component",
  "xtype": "component",
  "text": "Most of the visual classes you interact with are Components. Every Component is a\nsubclass of Ext.Component, which means they can all:\n\n* Render themselves onto the page using a template\n* Show and hide themselves at any time\n* Center themselves within their parent container\n* Enable and disable themselves\n\nThey can also do a few more advanced things:\n\n* Float above other components (windows, message boxes and overlays)\n* Change size and position on the screen with animation\n* Dock other Components inside themselves (useful for toolbars)\n* Align to other components\n* Allow themselves to be dragged around\n* Make their content scrollable & more\n\n## Available Components\n\nThere are many components.  They are separated into 4 main groups:\n\n### Navigation components\n* {@link Ext.Toolbar}\n* {@link Ext.Button}\n* {@link Ext.TitleBar}\n* {@link Ext.SegmentedButton}\n* {@link Ext.Title}\n* {@link Ext.Spacer}\n\n### Store-bound components\n* {@link Ext.dataview.DataView}\n* {@link Ext.carousel.Carousel Ext.Carousel}\n* {@link Ext.dataview.List Ext.List}\n* {@link Ext.dataview.NestedList Ext.NestedList}\n\n### Form components\n* {@link Ext.form.Panel}\n* {@link Ext.form.FieldSet}\n* {@link Ext.field.Checkbox}\n* {@link Ext.field.Hidden}\n* {@link Ext.field.Slider}\n* {@link Ext.field.Text}\n* {@link Ext.picker.Picker}\n* {@link Ext.picker.Date}\n\n### General components\n* {@link Ext.Panel}\n* {@link Ext.tab.Panel}\n* {@link Ext.Viewport}\n* {@link Ext.Img}\n* {@link Ext.Audio}\n* {@link Ext.Video}\n* {@link Ext.Sheet}\n* {@link Ext.ActionSheet}\n* {@link Ext.MessageBox}\n\n\n## Instantiating Components\n\nComponents are created the same way as all other classes - using Ext.create. Here's how we can\ncreate a Text field:\n\n    var panel = Ext.create('Ext.Panel', {\n        html: 'This is my panel'\n    });\n\nThis will create a {@link Ext.Panel} instance, configured with some basic HTML content. A\nPanel is just a simple Component that can render HTML and also contain other items. In this case\nwe've created a Panel instance but it won't show up on the screen yet because items are not\nrendered immediately after being instantiated. This allows us to create some components and move\nthem around before rendering and laying them out, which is a good deal faster than moving them\nafter rendering.\n\nTo show this panel on the screen now we can simply add it to the global Viewport:\n\n    Ext.Viewport.add(panel);\n\nPanels are also Containers, which means they can contain other Components, arranged by a layout.\nLet's revisit the above example now, this time creating a panel with two child Components and a\nhbox layout:\n\n```javascript\n@example({ framework: 'extjs' })\nvar panel = Ext.create('Ext.Panel', {\n    layout: 'hbox',\n\n    items: [\n        {\n            xtype: 'panel',\n            flex: 1,\n            html: 'Left Panel, 1/3rd of total size',\n             style: 'background-color: #5E99CC;'\n        },\n        {\n            xtype: 'panel',\n            flex: 2,\n            html: 'Right Panel, 2/3rds of total size',\n            style: 'background-color: #759E60;'\n        }\n    ]\n});\n\nExt.Viewport.add(panel);\n```\n\nThis time we created 3 Panels - the first one is created just as before but the inner two are\ndeclared inline using an xtype. Xtype is a convenient way of creating Components without having\nto go through the process of using Ext.create and specifying the full class name, instead you\ncan just provide the xtype for the class inside an object and the framework will create the\ncomponents for you.\n\nWe also specified a layout for the top level panel - in this case hbox, which splits the\nhorizontal width of the parent panel based on the 'flex' of each child. For example, if the\nparent Panel above is 300px wide then the first child will be flexed to 100px wide and the\nsecond to 200px because the first one was given `flex: 1` and the second `flex: 2`.\n\n## Using xtype\n\nxtype is an easy way to create Components without using the full class name. This is especially\nuseful when creating a {@link Ext.Container} that contains child Components. An xtype\nis simply a shorthand way of specifying a Component - for example you can use `xtype: 'panel'`\ninstead of typing out Ext.Panel.\n\nSample usage:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Container', {\n    fullscreen: true,\n    layout: 'fit',\n\n    items: [\n        {\n            xtype: 'panel',\n            html: 'This panel is created by xtype'\n        },\n        {\n            xtype: 'toolbar',\n            title: 'So is the toolbar',\n            docked: 'top'\n        }\n    ]\n});\n```\n\n\n### Common xtypes\n\n<pre>\nxtype                   Class\n-----------------       ---------------------\nactionsheet             Ext.ActionSheet\naudio                   Ext.Audio\nbutton                  Ext.Button\nimage                   Ext.Img\nlabel                   Ext.Label\nloadmask                Ext.LoadMask\npanel                   Ext.Panel\nsegmentedbutton         Ext.SegmentedButton\nsheet                   Ext.Sheet\nspacer                  Ext.Spacer\ntitlebar                Ext.TitleBar\ntoolbar                 Ext.Toolbar\nvideo                   Ext.Video\ncarousel                Ext.carousel.Carousel\nnavigationview          Ext.navigation.View\ndatepicker              Ext.picker.Date\npicker                  Ext.picker.Picker\nslider                  Ext.slider.Slider\nthumb                   Ext.slider.Thumb\ntabpanel                Ext.tab.Panel\nviewport                Ext.viewport.Default\n\nDataView Components\n---------------------------------------------\ndataview                Ext.dataview.DataView\nlist                    Ext.dataview.List\nnestedlist              Ext.dataview.NestedList\n\nForm Components\n---------------------------------------------\ncheckboxfield           Ext.field.Checkbox\ndatepickerfield         Ext.field.DatePicker\nemailfield              Ext.field.Email\nhiddenfield             Ext.field.Hidden\nnumberfield             Ext.field.Number\npasswordfield           Ext.field.Password\nradiofield              Ext.field.Radio\nsearchfield             Ext.field.Search\nselectfield             Ext.field.Select\nsliderfield             Ext.field.Slider\nspinnerfield            Ext.field.Spinner\ntextfield               Ext.field.Text\ntextareafield           Ext.field.TextArea\ntogglefield             Ext.field.Toggle\nurlfield                Ext.field.Url\nfieldset                Ext.form.FieldSet\nformpanel               Ext.form.Panel\n</pre>\n\n## Configuring Components\n\nWhenever you create a new Component you can pass in configuration options. All of the\nconfigurations for a given Component are listed in the \"Config options\" section of its class\ndocs page. You can pass in any number of configuration options when you instantiate the\nComponent, and modify any of them at any point later. For example, we can easily modify the\n{@link Ext.Panel#cfg!html html content} of a Panel after creating it:\n\n```javascript\n@example({ framework: 'extjs' })\n // we can configure the HTML when we instantiate the Component\n var panel = Ext.create('Ext.Panel', {\n     fullscreen: true,\n     html: 'This is a Panel'\n });\n\n // we can update the HTML later using the setHtml method:\n panel.setHtml('Some new HTML');\n\n // we can retrieve the current HTML using the getHtml method:\n Ext.Msg.alert(panel.getHtml()); // displays \"Some new HTML\"\n```\n\nEvery config has a getter method and a setter method - these are automatically generated and\nalways follow the same pattern. For example, a config called `{@link #cfg!html html}` will receive `getHtml` and\n`setHtml` methods, a config called `defaultType` will receive `getDefaultType` and\n`setDefaultType` methods, and so on.\n"
 },
 {
  "name": "Ext.Container",
  "xtype": "container",
  "text": "A Container has all of the abilities of {@link Ext.Component}, but lets you nest other\nComponents inside it. Applications are made up of lots of components, usually nested inside one\nanother. Containers allow you to render and arrange child Components inside them. Most apps have\na single top-level Container called a Viewport, which takes up the entire screen. Inside of this\nare child components, for example in a mail app the Viewport Container's two children might be a\nmessage List and an email preview pane.\n\nContainers give the following extra functionality:\n\n- Adding child Components at instantiation and run time\n- Removing child Components\n- Specifying a Layout\n\nLayouts determine how the child Components should be laid out on the screen. In our mail app\nexample we'd use an HBox layout so that we can pin the email list to the left hand edge of the\nscreen and allow the preview pane to occupy the rest. There are several layouts, each of which\nhelp you achieve your desired application structure.\n\n## Adding Components to Containers\n\nAs we mentioned above, Containers are special Components that can have child Components arranged\nby a Layout. One of the code samples above showed how to create a Panel with 2 child Panels\nalready defined inside it but it's easy to do this at run time too:\n\n    @example\n    var mainPanel = Ext.create({\n        xtype: 'panel',\n        fullscreen: true,\n        layout: 'hbox',\n        defaults: {\n            flex: 1\n        },\n        items: [{\n            html: 'First Panel',\n            style: 'background-color: #5E99CC'\n        }]\n    });\n\n    mainPanel.add({\n        xtype: 'panel',\n        html: 'About this App'\n    });\n\nHere we created three Panels in total. First we create mainPanel, which\nalready contains another Panel in its {@link Ext.Container#cfg!items items}\nconfiguration, with some dummy text (\"First Panel\"). Finally, we add the third\npanel to the second by calling the {@link Ext.Container#method!add add} method on `mainPanel`.\n\nIn this case we gave our mainPanel another hbox layout, but we also introduced some\n{@link Ext.Container#cfg!defaults defaults}. These are applied to every item in the Panel, so in\nthis case every child inside `mainPanel` will be given a `flex: 1` configuration. The effect of\nthis is that when we first render the screen only a single child is present inside `mainPanel`,\nso that child takes up the full width available to it. Once the `mainPanel.add` line is called\nthough, the `aboutPanel` is rendered inside of it and also given a `{@link #cfg!flex flex}` of 1, which will\ncause it and the first panel to both receive half the full width of the `mainPanel`.\n\nLikewise, it's easy to remove items from a Container:\n\n    mainPanel.remove(aboutPanel);\n\nAfter this line is run everything is back to how it was, with the first child panel once again\ntaking up the full width inside `mainPanel`.\n"
 },
 {
  "name": "Ext.Container",
  "xtype": "container",
  "text": "A Container has all of the abilities of {@link Ext.Component}, but lets you nest other\nComponents inside it. Applications are made up of lots of components, usually nested inside one\nanother. Containers allow you to render and arrange child Components inside them. Most apps have\na single top-level Container called a Viewport, which takes up the entire screen. Inside of this\nare child components, for example in a mail app the Viewport Container's two children might be a\nmessage List and an email preview pane.\n\nContainers give the following extra functionality:\n\n- Adding child Components at instantiation and run time\n- Removing child Components\n- Specifying a Layout\n\nLayouts determine how the child Components should be laid out on the screen. In our mail app\nexample we'd use an HBox layout so that we can pin the email list to the left hand edge of the\nscreen and allow the preview pane to occupy the rest. There are several layouts, each of which\nhelp you achieve your desired application structure.\n\n## Adding Components to Containers\n\nAs we mentioned above, Containers are special Components that can have child Components arranged\nby a Layout. One of the code samples above showed how to create a Panel with 2 child Panels\nalready defined inside it but it's easy to do this at run time too:\n\n    @example\n    var mainPanel = Ext.create({\n        xtype: 'panel',\n        fullscreen: true,\n        layout: 'hbox',\n        defaults: {\n            flex: 1\n        },\n        items: [{\n            html: 'First Panel',\n            style: 'background-color: #5E99CC'\n        }]\n    });\n\n    mainPanel.add({\n        xtype: 'panel',\n        html: 'About this App'\n    });\n\nHere we created three Panels in total. First we create mainPanel, which\nalready contains another Panel in its {@link Ext.Container#cfg!items items}\nconfiguration, with some dummy text (\"First Panel\"). Finally, we add the third\npanel to the second by calling the {@link Ext.Container#method!add add} method on `mainPanel`.\n\nIn this case we gave our mainPanel another hbox layout, but we also introduced some\n{@link Ext.Container#cfg!defaults defaults}. These are applied to every item in the Panel, so in\nthis case every child inside `mainPanel` will be given a `flex: 1` configuration. The effect of\nthis is that when we first render the screen only a single child is present inside `mainPanel`,\nso that child takes up the full width available to it. Once the `mainPanel.add` line is called\nthough, the `aboutPanel` is rendered inside of it and also given a `{@link #cfg!flex flex}` of 1, which will\ncause it and the first panel to both receive half the full width of the `mainPanel`.\n\nLikewise, it's easy to remove items from a Container:\n\n    mainPanel.remove(aboutPanel);\n\nAfter this line is run everything is back to how it was, with the first child panel once again\ntaking up the full width inside `mainPanel`.\n"
 },
 {
  "name": "Ext.Container",
  "xtype": "container",
  "text": "A Container has all of the abilities of {@link Ext.Component}, but lets you nest other\nComponents inside it. Applications are made up of lots of components, usually nested inside one\nanother. Containers allow you to render and arrange child Components inside them. Most apps have\na single top-level Container called a Viewport, which takes up the entire screen. Inside of this\nare child components, for example in a mail app the Viewport Container's two children might be a\nmessage List and an email preview pane.\n\nContainers give the following extra functionality:\n\n- Adding child Components at instantiation and run time\n- Removing child Components\n- Specifying a Layout\n\nLayouts determine how the child Components should be laid out on the screen. In our mail app\nexample we'd use an HBox layout so that we can pin the email list to the left hand edge of the\nscreen and allow the preview pane to occupy the rest. There are several layouts, each of which\nhelp you achieve your desired application structure.\n\n## Adding Components to Containers\n\nAs we mentioned above, Containers are special Components that can have child Components arranged\nby a Layout. One of the code samples above showed how to create a Panel with 2 child Panels\nalready defined inside it but it's easy to do this at run time too:\n\n    @example\n    var mainPanel = Ext.create({\n        xtype: 'panel',\n        fullscreen: true,\n        layout: 'hbox',\n        defaults: {\n            flex: 1\n        },\n        items: [{\n            html: 'First Panel',\n            style: 'background-color: #5E99CC'\n        }]\n    });\n\n    mainPanel.add({\n        xtype: 'panel',\n        html: 'About this App'\n    });\n\nHere we created three Panels in total. First we create mainPanel, which\nalready contains another Panel in its {@link Ext.Container#cfg!items items}\nconfiguration, with some dummy text (\"First Panel\"). Finally, we add the third\npanel to the second by calling the {@link Ext.Container#method!add add} method on `mainPanel`.\n\nIn this case we gave our mainPanel another hbox layout, but we also introduced some\n{@link Ext.Container#cfg!defaults defaults}. These are applied to every item in the Panel, so in\nthis case every child inside `mainPanel` will be given a `flex: 1` configuration. The effect of\nthis is that when we first render the screen only a single child is present inside `mainPanel`,\nso that child takes up the full width available to it. Once the `mainPanel.add` line is called\nthough, the `aboutPanel` is rendered inside of it and also given a `{@link #cfg!flex flex}` of 1, which will\ncause it and the first panel to both receive half the full width of the `mainPanel`.\n\nLikewise, it's easy to remove items from a Container:\n\n    mainPanel.remove(aboutPanel);\n\nAfter this line is run everything is back to how it was, with the first child panel once again\ntaking up the full width inside `mainPanel`.\n"
 },
 {
  "name": "Ext.d3.canvas.Canvas",
  "xtype": "d3-canvas",
  "text": "The base class of every Canvas D3 Component that can also be used standalone.\nFor example:\n\n    @example\n    Ext.create({\n        renderTo: document.body,\n\n        width: 300,\n        height: 300,\n\n        xtype: 'd3-canvas',\n\n        listeners: {\n            sceneresize: function (component, canvas, size) {\n                var barCount = 10,\n                    barWidth = size.width / barCount,\n                    barHeight = size.height,\n                    context = canvas.getContext('2d'),\n                    colors = d3.scaleOrdinal(d3.schemeCategory20),\n                    i = 0;\n\n                for (; i < barCount; i++) {\n                    context.fillStyle = colors(i);\n                    context.fillRect(i * barWidth, 0, barWidth, barHeight);\n                }\n            }\n        }\n    });\n"
 },
 {
  "name": "Ext.d3.HeatMap",
  "xtype": "d3-heatmap",
  "text": "The 'd3-heatmap' component is used for visualizing matrices\nwhere the individual values are represented as colors.\nThe component makes use of two {@link Ext.d3.axis.Data} axes (one for each\ndimension of the matrix) and a single {@link Ext.d3.axis.Color} axis\nto encode the values.\n\n    @example\n    Ext.create('Ext.panel.Panel', {\n        renderTo: Ext.getBody(),\n        title: 'Heatmap Chart',\n        height: 750,\n        width: 750,\n        layout: 'fit',\n        items: [\n            {\n                xtype: 'd3-heatmap',\n                padding: {\n                    top: 20,\n                    right: 30,\n                    bottom: 20,\n                    left: 80\n                },\n\n                xAxis: {\n                    axis: {\n                        ticks: 'd3.timeDay',\n                        tickFormat: \"d3.timeFormat('%b %d')\",\n                        orient: 'bottom'\n                    },\n                    scale: {\n                        type: 'time'\n                    },\n                    title: {\n                        text: 'Date'\n                    },\n                    field: 'date',\n                    step: 24 * 60 * 60 * 1000\n                },\n\n                yAxis: {\n                    axis: {\n                        orient: 'left',\n                        tickFormat: \"d3.format('$d')\"\n                    },\n                    scale: {\n                        type: 'linear'\n                    },\n                    title: {\n                        text: 'Total'\n                    },\n                    field: 'bucket',\n                    step: 100\n                },\n\n                colorAxis: {\n                    scale: {\n                        type: 'linear',\n                        range: ['white', 'orange']\n                    },\n                    field: 'count',\n                    minimum: 0\n                },\n\n                tiles: {\n                    attr: {\n                        'stroke': 'black',\n                        'stroke-width': 1\n                    }\n                },\n\n                store: {\n                    fields: [\n                        {name: 'date', type: 'date', dateFormat: 'Y-m-d'},\n                        'bucket',\n                        'count'\n                    ],\n                    data: [\n                        { date: '2012-07-20', bucket: 800,  count: 119 },\n                        { date: '2012-07-20', bucket: 900,  count: 123 },\n                        { date: '2012-07-20', bucket: 1000, count: 173 },\n                        { date: '2012-07-20', bucket: 1100, count: 226 },\n                        { date: '2012-07-20', bucket: 1200, count: 284 },\n                        { date: '2012-07-21', bucket: 800,  count: 123 },\n                        { date: '2012-07-21', bucket: 900,  count: 165 },\n                        { date: '2012-07-21', bucket: 1000, count: 237 },\n                        { date: '2012-07-21', bucket: 1100, count: 278 },\n                        { date: '2012-07-21', bucket: 1200, count: 338 },\n                        { date: '2012-07-22', bucket: 900,  count: 154 },\n                        { date: '2012-07-22', bucket: 1000, count: 241 },\n                        { date: '2012-07-22', bucket: 1100, count: 246 },\n                        { date: '2012-07-22', bucket: 1200, count: 300 },\n                        { date: '2012-07-22', bucket: 1300, count: 305 },\n                        { date: '2012-07-23', bucket: 800,  count: 120 },\n                        { date: '2012-07-23', bucket: 900,  count: 156 },\n                        { date: '2012-07-23', bucket: 1000, count: 209 },\n                        { date: '2012-07-23', bucket: 1100, count: 267 },\n                        { date: '2012-07-23', bucket: 1200, count: 299 },\n                        { date: '2012-07-23', bucket: 1300, count: 316 },\n                        { date: '2012-07-24', bucket: 800,  count: 105 },\n                        { date: '2012-07-24', bucket: 900,  count: 156 },\n                        { date: '2012-07-24', bucket: 1000, count: 220 },\n                        { date: '2012-07-24', bucket: 1100, count: 255 },\n                        { date: '2012-07-24', bucket: 1200, count: 308 },\n                        { date: '2012-07-25', bucket: 800,  count: 104 },\n                        { date: '2012-07-25', bucket: 900,  count: 191 },\n                        { date: '2012-07-25', bucket: 1000, count: 201 },\n                        { date: '2012-07-25', bucket: 1100, count: 238 },\n                        { date: '2012-07-25', bucket: 1200, count: 223 },\n                        { date: '2012-07-26', bucket: 1300, count: 132 },\n                        { date: '2012-07-26', bucket: 1400, count: 117 },\n                        { date: '2012-07-26', bucket: 1500, count: 124 },\n                        { date: '2012-07-26', bucket: 1600, count: 154 },\n                        { date: '2012-07-26', bucket: 1700, count: 167 }\n                    ]\n                }\n            }\n        ]\n    });\n"
 },
 {
  "name": "Ext.d3.hierarchy.Pack",
  "xtype": "d3-pack",
  "text": "The 'd3-pack' component uses D3's\n[Pack Layout](https://github.com/d3/d3-hierarchy/#pack)\nto visualize hierarchical data as a enclosure diagram.\nThe size of each leaf node’s circle reveals a quantitative dimension\nof each data point. The enclosing circles show the approximate cumulative size\nof each subtree.\n\nThe pack additionally layout populates the following attributes on each node:\n- `r` - the computed node radius.\n\n    @example\n    Ext.create('Ext.panel.Panel', {\n        renderTo: Ext.getBody(),\n        title: 'Pack Chart',\n        height: 750,\n        width: 750,\n        layout: 'fit',\n        items: [\n            {\n                xtype: 'd3-pack',\n                tooltip: {\n                    renderer: function(component, tooltip, node) {\n                        var record = node.data;\n                        tooltip.setHtml(record.get('text'));\n                    }\n                },\n                store: {\n                    type: 'tree',\n                    data: [\n                        {\n                            \"text\": \"DC\",\n                            \"children\": [\n                                {\n                                    \"text\": \"Flash\",\n                                    \"children\": [\n                                        { \"text\": \"Flashpoint\" }\n                                    ]\n                                },\n                                {\n                                    \"text\": \"Green Lantern\",\n                                    \"children\": [\n                                        { \"text\": \"Rebirth\" },\n                                        { \"text\": \"Sinestro Corps War\" }\n                                    ]\n                                },\n                                {\n                                    \"text\": \"Batman\",\n                                    \"children\": [\n                                        { \"text\": \"Hush\" },\n                                        { \"text\": \"The Long Halloween\" },\n                                        { \"text\": \"Batman and Robin\" },\n                                        { \"text\": \"The Killing Joke\" }\n                                    ]\n                                }\n                            ]\n                        },\n                        {\n                            \"text\": \"Marvel\",\n                            \"children\": [\n                                {\n                                    \"text\": \"All\",\n                                    \"children\": [\n                                        { \"text\": \"Infinity War\" },\n                                        { \"text\": \"Infinity Gauntlet\" },\n                                        { \"text\": \"Avengers Disassembled\" }\n                                    ]\n                                },\n                                {\n                                    \"text\": \"Spiderman\",\n                                    \"children\": [\n                                        { \"text\": \"Ultimate Spiderman\" }\n                                    ]\n                                },\n                                {\n                                    \"text\": \"Vision\",\n                                    \"children\": [\n                                        { \"text\": \"The Vision\" }\n                                    ]\n                                },\n                                {\n                                    \"text\": \"X-Men\",\n                                    \"children\": [\n                                        { \"text\": \"Gifted\" },\n                                        { \"text\": \"Dark Phoenix Saga\" },\n                                        { \"text\": \"Unstoppable\" }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n"
 },
 {
  "name": "Ext.d3.hierarchy.partition.Partition",
  "xtype": "d3-partition",
  "text": "Abstract class for D3 components\nwith the [Partition layout](https://github.com/mbostock/d3/wiki/Partition-Layout).\n"
 },
 {
  "name": "Ext.d3.hierarchy.partition.Sunburst",
  "xtype": "d3-sunburst",
  "text": "The 'd3-sunburst' component visualizes tree nodes as donut sectors,\nwith the root circle in the center. The angle and area of each sector corresponds\nto its {@link Ext.d3.hierarchy.Hierarchy#cfg!nodeValue value}. By default\nthe same value is returned for each node, meaning that siblings will span equal\nangles and occupy equal area.\n\n    @example\n    Ext.create('Ext.panel.Panel', {\n        renderTo: Ext.getBody(),\n        title: 'Sunburst Chart',\n        height: 750,\n        width: 750,\n        layout: 'fit',\n        items: [\n            {\n                xtype: 'd3-sunburst',\n                padding: 20,\n                tooltip: {\n                    renderer: function(component, tooltip, node) {\n                        tooltip.setHtml(node.data.get('text'));\n                    }\n                },\n                store: {\n                    type: 'tree',\n                    data: [\n                        {\n                            text: \"Oscorp\",\n                            children: [\n                                {text: 'Norman Osborn'},\n                                {text: 'Harry Osborn'},\n                                {text: 'Arthur Stacy'}\n                            ]\n                        },\n                        {\n                            text: \"SHIELD\",\n                            children: [\n                                {text: 'Nick Fury'},\n                                {text: 'Maria Hill'},\n                                {text: 'Tony Stark'}\n                            ]\n                        },\n                        {\n                            text: \"Illuminati\",\n                            children: [\n                                {text: 'Namor'},\n                                {text: 'Tony Stark'},\n                                {text: 'Reed Richards'},\n                                {text: 'Black Bolt'},\n                                {text: 'Stephen Strange'},\n                                {text: 'Charles Xavier'}\n                            ]\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n"
 },
 {
  "name": "Ext.d3.hierarchy.tree.HorizontalTree",
  "xtype": "d3-tree",
  "text": "The 'd3-horizontal-tree' component is a perfect way to visualize hierarchical\ndata as an actual tree in case where the relative size of nodes is of little\ninterest, and the focus is on the relative position of each node in the hierarchy.\nA horizontal tree makes for a more consistent look and more efficient use of space\nwhen text labels are shown next to each node.\n\n    @example\n    Ext.create('Ext.panel.Panel', {\n        renderTo: Ext.getBody(),\n        title: 'Tree Chart',\n        layout: 'fit',\n        height: 500,\n        width: 700,\n        items: [\n            {\n                xtype: 'd3-tree',\n\n                store: {\n                    type: 'tree',\n                    root: {\n                        text: 'Sencha',\n                        expanded: true,\n                        children: [\n                            {\n                                text: 'IT',\n                                expanded: false,\n                                children: [\n                                    {leaf: true, text: 'Norrin Radd'},\n                                    {leaf: true, text: 'Adam Warlock'}\n                                ]\n                            },\n                            {\n                                text: 'Engineering',\n                                expanded: false,\n                                children: [\n                                    {leaf: true, text: 'Mathew Murdoch'},\n                                    {leaf: true, text: 'Lucas Cage'}\n                                ]\n                            },\n                            {\n                                text: 'Support',\n                                expanded: false,\n                                children: [\n                                    {leaf: true, text: 'Peter Quill'}\n                                ]\n                            }\n                        ]\n                    }\n                },\n\n                interactions: {\n                    type: 'panzoom',\n                    zoom: {\n                        extent: [0.3, 3],\n                        doubleTap: false\n                    }\n                },\n\n                nodeSize: [200, 30]\n            }\n        ]\n    });\n"
 },
 {
  "name": "Ext.d3.hierarchy.tree.HorizontalTree",
  "xtype": "d3-horizontal-tree",
  "text": "The 'd3-horizontal-tree' component is a perfect way to visualize hierarchical\ndata as an actual tree in case where the relative size of nodes is of little\ninterest, and the focus is on the relative position of each node in the hierarchy.\nA horizontal tree makes for a more consistent look and more efficient use of space\nwhen text labels are shown next to each node.\n\n    @example\n    Ext.create('Ext.panel.Panel', {\n        renderTo: Ext.getBody(),\n        title: 'Tree Chart',\n        layout: 'fit',\n        height: 500,\n        width: 700,\n        items: [\n            {\n                xtype: 'd3-tree',\n\n                store: {\n                    type: 'tree',\n                    root: {\n                        text: 'Sencha',\n                        expanded: true,\n                        children: [\n                            {\n                                text: 'IT',\n                                expanded: false,\n                                children: [\n                                    {leaf: true, text: 'Norrin Radd'},\n                                    {leaf: true, text: 'Adam Warlock'}\n                                ]\n                            },\n                            {\n                                text: 'Engineering',\n                                expanded: false,\n                                children: [\n                                    {leaf: true, text: 'Mathew Murdoch'},\n                                    {leaf: true, text: 'Lucas Cage'}\n                                ]\n                            },\n                            {\n                                text: 'Support',\n                                expanded: false,\n                                children: [\n                                    {leaf: true, text: 'Peter Quill'}\n                                ]\n                            }\n                        ]\n                    }\n                },\n\n                interactions: {\n                    type: 'panzoom',\n                    zoom: {\n                        extent: [0.3, 3],\n                        doubleTap: false\n                    }\n                },\n\n                nodeSize: [200, 30]\n            }\n        ]\n    });\n"
 },
 {
  "name": "Ext.d3.hierarchy.TreeMap",
  "xtype": "d3-treemap",
  "text": "The 'd3-treemap' component uses D3's\n[TreeMap Layout](https://github.com/d3/d3-hierarchy/#treemap)\nto recursively subdivide area into rectangles, where the area of any node in the tree\ncorresponds to its value.\n\n    @example\n    Ext.create('Ext.panel.Panel', {\n        renderTo: Ext.getBody(),\n        title: 'TreeMap Chart',\n        height: 750,\n        width: 750,\n        layout: 'fit',\n        items: [\n            {\n                xtype: 'd3-treemap',\n                tooltip: {\n                    renderer: function (component, tooltip, node) {\n                        tooltip.setHtml(node.data.get('text'));\n                    }\n                },\n                nodeValue: function (record) {\n                    // The value in your data to derive the size of the tile from.\n                    return record.get('value');\n                },\n                store: {\n                    type: 'tree',\n                    data: [\n                        {  text: 'Hulk',\n                           value : 5,\n                           children: [\n                                { text: 'The Leader', value: 3 },\n                                { text: 'Abomination', value: 2 },\n                                { text: 'Sandman', value: 1 }\n                            ]\n                        },\n                        {   text: 'Vision',\n                            value : 4,\n                            children: [\n                                { text: 'Kang', value: 4 },\n                                { text: 'Magneto', value: 3 },\n                                { text: 'Norman Osborn', value: 2 },\n                                { text: 'Anti-Vision', value: 1 }\n                            ]\n                        },\n                        {   text: 'Ghost Rider',\n                            value : 3,\n                            children: [\n                                { text: 'Mephisto', value: 1 }\n                            ]\n                        },\n                        {   text: 'Loki',\n                            value : 2,\n                            children: [\n                                { text: 'Captain America', value: 3 },\n                                { text: 'Deadpool', value: 4 },\n                                { text: 'Odin', value: 5 },\n                                { text: 'Scarlet Witch', value: 2 },\n                                { text: 'Silver Surfer', value: 1 }\n                            ]\n                        },\n                        {   text: 'Daredevil',\n                            value : 1,\n                            children: [\n                                { text: 'Purple Man', value: 4 },\n                                { text: 'Kingpin', value: 3 },\n                                { text: 'Namor', value: 2 },\n                                { text: 'Sabretooth', value: 1 }\n                            ]\n                        }\n                    ]\n                }\n            }\n        ]\n    });\n"
 },
 {
  "name": "Ext.d3.svg.Svg",
  "xtype": "d3-svg",
  "text": "The base class of every SVG D3 Component that can also be used standalone.\nFor example:\n\n    @example\n    Ext.create({\n        renderTo: document.body,\n\n        width: 300,\n        height: 300,\n\n        xtype: 'd3',\n\n        listeners: {\n            scenesetup: function(component, scene) {\n                var data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n                    colors = d3.scaleOrdinal(d3.schemeCategory20c),\n                    twoPi = 2 * Math.PI,\n                    gap = twoPi / data.length,\n                    r = 100;\n\n                scene.append('g')\n                    .attr('transform', 'translate(150,150)')\n                    .selectAll('circle')\n                    .data(data)\n                    .enter()\n                    .append('circle')\n                    .attr('fill', function(d) {\n                        return colors(d);\n                    })\n                    .attr('stroke', 'black')\n                    .attr('stroke-width', 3)\n                    .attr('r', function(d) {\n                        return d * 3;\n                    })\n                    .attr('cx', function(d, i) {\n                        return r * Math.cos(gap * i);\n                    })\n                    .attr('cy', function(d, i) {\n                        return r * Math.sin(gap * i);\n                    });\n            }\n        }\n    });\n"
 },
 {
  "name": "Ext.d3.svg.Svg",
  "xtype": "d3",
  "text": "The base class of every SVG D3 Component that can also be used standalone.\nFor example:\n\n    @example\n    Ext.create({\n        renderTo: document.body,\n\n        width: 300,\n        height: 300,\n\n        xtype: 'd3',\n\n        listeners: {\n            scenesetup: function(component, scene) {\n                var data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n                    colors = d3.scaleOrdinal(d3.schemeCategory20c),\n                    twoPi = 2 * Math.PI,\n                    gap = twoPi / data.length,\n                    r = 100;\n\n                scene.append('g')\n                    .attr('transform', 'translate(150,150)')\n                    .selectAll('circle')\n                    .data(data)\n                    .enter()\n                    .append('circle')\n                    .attr('fill', function(d) {\n                        return colors(d);\n                    })\n                    .attr('stroke', 'black')\n                    .attr('stroke-width', 3)\n                    .attr('r', function(d) {\n                        return d * 3;\n                    })\n                    .attr('cx', function(d, i) {\n                        return r * Math.cos(gap * i);\n                    })\n                    .attr('cy', function(d, i) {\n                        return r * Math.sin(gap * i);\n                    });\n            }\n        }\n    });\n"
 },
 {
  "name": "Ext.dataview.BoundList",
  "xtype": "boundlist",
  "text": "Class used to display popup selection lists bound to fields.\n\nA BoundList is not focusable, has no `{@link #property!focusEl focusEl}`, and has no `{@link #cfg!tabIndex tabIndex}` stamped into it.\n\nIts keyboard events are provided by its owning field, referenced by its `ownerCmp`, and\nthe `BoundListNavigationModel` uses the field as the key event source.\n"
 },
 {
  "name": "Ext.dataview.ChipView",
  "xtype": "chipview",
  "text": "A specialized `{@link Ext.dataview.DataView}` to display items based upon the structure of\nthe `{@link Ext.Chip}` component with the configurations of the \"chips\" drawn from named\nfields in the DataView's records.\n\nThis handles selection and deletion of chips.\n```javascript\n@example({ framework: 'extjs' })\nExt.define('Contact', {\n    extend: 'Ext.data.Model',\n    fields: [{\n        name: 'emailAddress'\n    }, {\n        name: 'picture'\n    }, {\n        name: 'role',\n        type: 'int'\n    }, {\n        name: 'closable',\n        calculate: function(data) {\n            return data.role > 2 ? false: true;\n        }\n    }, {\n        name: 'iconCls',\n        calculate: function(data) {\n            return data.role > 2 ? 'x-manager-icon' : 'x-employee-icon';\n        }\n    }]\n});\n\nvar store = new Ext.data.Store({\n   model: 'Contact',\n    data: [{\n        emailAddress: 'frederick.bloggs@sentcha.com',\n        picture: 'https://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n        role: 1\n    }, {\n        emailAddress: 'joe.poe@sentcha.com',\n        picture: 'https://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n        role: 2\n    }, {\n        emailAddress: 'mike.jones@sentcha.com',\n        picture: 'https://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n        role: 3\n    }]\n});\n\nExt.create({\n    xtype: 'panel',\n    title: 'Chip DataView',\n    width: 400,\n    height: 200,\n    renderTo: document.body,\n    border: true,\n    bodyPadding: 5,\n    items: {\n        xtype: 'chipview',\n        store: store,\n        displayField: 'emailAddress',\n        iconField: 'picture',\n        closeHandler: function(chipview, location) {\n            store.remove(location.record);\n\n            // Stop the event, otherwise the NavigationModel\n            // will try to click on the nonexistent Chip\n            return false;\n        }\n    }\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nExt.define('Contact', {\n    extend: 'Ext.data.Model',\n    fields: [{\n        name: 'emailAddress'\n    }, {\n        name: 'picture'\n    }, {\n        name: 'role',\n        type: 'int'\n    }, {\n        name: 'closable',\n        calculate: function(data) {\n            return data.role > 2 ? false: true;\n        }\n    }, {\n        name: 'iconCls',\n        calculate: function(data) {\n            return data.role > 2 ? 'x-manager-icon' : 'x-employee-icon';\n        }\n    }]\n});\n\nvar store = new Ext.data.Store({\n   model: 'Contact',\n    data: [{\n        emailAddress: 'frederick.bloggs@sentcha.com',\n        picture: 'https://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n        role: 1\n    }, {\n        emailAddress: 'joe.poe@sentcha.com',\n        picture: 'https://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n        role: 2\n    }, {\n        emailAddress: 'mike.jones@sentcha.com',\n        picture: 'https://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n        role: 3\n    }]\n});\n\n<ExtChipView\n    store={store}\n    displayField={'emailAddress'}\n    iconField='picture'\n    closeHandler={(chipview, location) => {\n        store.remove(location.record);\n\n        // Stop the event, otherwise the NavigationModel\n        // will try to click on the nonexistent Chip\n        return false;\n    }}\n/>\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [`\n             `],\n     template: `\n         <ExtChipView\n             [store]=\"store\"\n             [displayField]=\"'emailAddress'\"\n             iconField='picture'\n             [closeHandler]=\"closeHandler\"\n         ></ExtChipView>\n     `\n })\n export class AppComponent {\n     model = Ext.define(\n         'Contact', {\n             extend: 'Ext.data.Model',\n             fields: [{\n                 name: 'emailAddress'\n             }, {\n                 name: 'picture'\n             }, {\n                 name: 'role',\n                 type: 'int'\n             }, {\n                 name: 'closable',\n                 calculate: function(data) {\n                     return data.role > 2 ? false: true;\n                 }\n             }, {\n                 name: 'iconCls',\n                 calculate: function(data) {\n                     return data.role > 2 ? 'x-manager-icon' : 'x-employee-icon';\n                 }\n             }]\n         }\n     );\n\n     store = new Ext.data.Store({\n         model: 'Contact',\n         data: [{\n             emailAddress: 'frederick.bloggs@sentcha.com',\n             picture: 'https://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n             role: 1\n         }, {\n             emailAddress: 'joe.poe@sentcha.com',\n             picture: 'https://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n             role: 2\n         }, {\n             emailAddress: 'mike.jones@sentcha.com',\n             picture: 'https://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n             role: 3\n         }]\n     });\n\n    closeHandler = (param, location) => {\n        this.store.remove(location.record);\n        return false;\n    }\n\n}\n```\n"
 },
 {
  "name": "Ext.dataview.Component",
  "xtype": "componentdataview",
  "text": "This class is similar to `{@link Ext.dataview.DataView}` except it renders components for each\nrecord instead of simple chunks of HTML. The `{@link #cfg!itemTpl itemTpl}` can still be used for components\nbut it is more typical to use the component's config properties\n\nThe type of component can be controlled using the `{@link #cfg!itemConfig itemConfig}` and record's fields can\nbe mapped to config properties using `{@link #cfg!itemDataMap itemDataMap}`.\n\n     Ext.create({\n         xtype: 'componentdataview',\n\n         store: [\n             { name: 'Peter',  age: 26 },\n             { name: 'Ray',   age: 21 },\n             { name: 'Egon', age: 24 },\n             { name: 'Winston', age: 24 }\n         ],\n\n         itemConfig: {\n             xtype: 'button',\n             cls: 'x-item-no-tap' // Prevent childtap events\n         },\n\n         itemDataMap: {\n             '#': {\n                 text: 'name'\n             }\n         }\n     });\n\nThe `{@link #cfg!itemDataMap itemDataMap}` is a simple and efficient means for mapping fields to configs, but\ncan only apply fields stored in the records' data to configs on the target component.\nWhile this can be dynamic by using {@link Ext.data.field.Field#cfg!calculate}\nfields, more complex mappings should use {@link Ext.data.ViewModel ViewModels} and\n{@link Ext.Component#cfg!bind}.\n\nFor example:\n\n     Ext.create({\n         xtype: 'componentdataview',\n\n         store: [\n             { name: 'Peter',  age: 26 },\n             { name: 'Ray',   age: 21 },\n             { name: 'Egon', age: 24 },\n             { name: 'Winston', age: 24 }\n         ],\n\n         itemConfig: {\n             xtype: 'button',\n\n             viewModel: true, // enable per-record binding\n\n             bind: 'Go {record.name}!'\n         }\n     });\n\n### Historical Note\n\nIn previous releases, the `useComponents` config allowed any `{@link Ext.dataview.DataView}` to\nswitch to using components instead of pure HTML for items. This feature was replaced by\nthis class in version 6.5 as part of the numerous {@link Ext.dataview.List} and\n{@link Ext.grid.Grid} additions.\n"
 },
 {
  "name": "Ext.dataview.DataItem",
  "xtype": "dataitem",
  "text": "This is the default type for items in a {@link Ext.dataview.Component}.\nIt ties together {@link Ext.data.Model} to its contained Components.\n\nConsider the following example:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'componentdataview',\n\n    store: [\n        { name: 'Peter', age: 26 },\n        { name: 'Ray', age: 28 },\n        { name: 'Egon', age: 24 },\n        { name: 'Winston', age: 29 }\n    ],\n\n    itemConfig: {\n        layout: 'hbox',\n        padding: 10,\n\n        items: [{\n            xtype: 'component',\n            reference: 'textCmp'\n        }, {\n            xtype: 'button',\n            margin: '0 0 0 5',\n            reference: 'checkBtn',\n            text: 'Check'\n        }]\n    },\n\n     itemDataMap: {\n         textCmp: {\n             html: 'name'\n         }\n     }\n});\n```\n\nIf the mapping of records to components is more complex, you can extend this class and\nprovide a custom `{@link #method!updateRecord updateRecord}` method or use {@link Ext.app.ViewModel}.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'componentdataview',\n\n    store: [\n        { name: 'Peter', age: 26 },\n        { name: 'Ray', age: 28 },\n        { name: 'Egon', age: 24 },\n        { name: 'Winston', age: 29 }\n    ],\n\n    itemConfig: {\n        layout: 'hbox',\n        padding: 10,\n        viewModel: true, // enable per-item record binding\n\n        items: [{\n            xtype: 'component',\n            bind: 'Greetings {record.name}!'\n        }, {\n            xtype: 'button',\n            margin: '0 0 0 5',\n            text: 'Check'\n        }]\n     }\n});\n```\n"
 },
 {
  "name": "Ext.dataview.DataItem",
  "xtype": "dataitem",
  "text": "This is the default type for items in a {@link Ext.dataview.Component}.\nIt ties together {@link Ext.data.Model} to its contained Components.\n\nConsider the following example:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'componentdataview',\n\n    store: [\n        { name: 'Peter', age: 26 },\n        { name: 'Ray', age: 28 },\n        { name: 'Egon', age: 24 },\n        { name: 'Winston', age: 29 }\n    ],\n\n    itemConfig: {\n        layout: 'hbox',\n        padding: 10,\n\n        items: [{\n            xtype: 'component',\n            reference: 'textCmp'\n        }, {\n            xtype: 'button',\n            margin: '0 0 0 5',\n            reference: 'checkBtn',\n            text: 'Check'\n        }]\n    },\n\n     itemDataMap: {\n         textCmp: {\n             html: 'name'\n         }\n     }\n});\n```\n\nIf the mapping of records to components is more complex, you can extend this class and\nprovide a custom `{@link #method!updateRecord updateRecord}` method or use {@link Ext.app.ViewModel}.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'componentdataview',\n\n    store: [\n        { name: 'Peter', age: 26 },\n        { name: 'Ray', age: 28 },\n        { name: 'Egon', age: 24 },\n        { name: 'Winston', age: 29 }\n    ],\n\n    itemConfig: {\n        layout: 'hbox',\n        padding: 10,\n        viewModel: true, // enable per-item record binding\n\n        items: [{\n            xtype: 'component',\n            bind: 'Greetings {record.name}!'\n        }, {\n            xtype: 'button',\n            margin: '0 0 0 5',\n            text: 'Check'\n        }]\n     }\n});\n```\n"
 },
 {
  "name": "Ext.dataview.DataView",
  "xtype": "dataview",
  "text": "DataView makes it easy to render one or more data items, typically from a server backend\nor any other data source. The DataView is what powers more powerful components like\n{@link Ext.dataview.List} and {@link Ext.grid.Grd Grid}.\n\nUse DataView whenever you want to repeat the same element structure for multiple records\nof data.\n\n# Creating a Simple DataView\n\nAt its simplest, a DataView is just a Store full of data and a simple template that\nrenders each item:\n\n```javascript\n@example({ framework: 'extjs' })\nvar team = Ext.create({\n    xtype: 'dataview',\n    fullscreen: true,\n\n    store: [\n        { name: 'Peter',  age: 26 },\n        { name: 'Ray',   age: 21 },\n        { name: 'Egon', age: 24 },\n        { name: 'Winston', age: 24 }\n    ],\n\n    itemTpl: '<div>{name} is {age} years old</div>'\n});\n```\n\nHere we just defined everything inline so it's all local with nothing being loaded from\na server. For each of the data items, the DataView will render HTML using the `{@link #cfg!itemTpl itemTpl}`\nFor details see {@link Ext.XTemplate}.\n\nBecause DataView actually uses an underlying {@link Ext.data.Store}, any changes\nto the data are immediately reflected on the screen. For example, if we add a new record\nto the Store it will be rendered into our DataView.\n\nThe same happens if we modify one of the existing records in the Store:\n\n```javascript\n@example({ framework: 'extjs' })\nvar team = Ext.create({\n    xtype: 'dataview',\n    fullscreen: true,\n\n    store: {\n       fields: ['name', 'age'],\n       data: [\n           {name: 'Peter',  age: 26},\n           {name: 'Ray',   age: 21},\n           {name: 'Egon', age: 24},\n           {name: 'Winston', age: 24}\n       ]\n    },\n\n    itemTpl: '<div>{name} is {age} years old</div>'\n});\n\nteam.getStore().add({\n    name: 'Gozer',\n    age: 21\n});\n\nteam.getStore().getAt(0).set('age', 42);\n```\n\nThis last step will get the first record in the Store (Peter), change the age to 42 and\nautomatically update what's on the screen.\n\n# Loading data from a server\n\nTo load data from a server, we need to give the `{@link #cfg!store store}` some information about the\nserver. This is done with the `proxy` config:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'dataview',\n    fullscreen: true,\n\n    store: {\n        autoLoad: true,\n        proxy: {\n            type: 'jsonp',\n            url: 'https://itunes.apple.com/search?term=Pink+Floyd&entity=album',\n\n            reader: {\n                type: 'json',\n                rootProperty: 'results'\n            }\n        }\n    },\n\n    itemTpl: '<h2>{collectionName}</h2><p><img src=\"{artworkUrl100}\" /></p>'\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container width=\"100%\" height=\"100%\">\n    <ext-dataview\n        itemTpl=\"{name} is {age} years old\"\n        onready=\"dataview.onDataViewready\"\n    >\n    </ext-dataview>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-dataview.component';\n\nexport default class DataViewComponent {\n  onDataViewready(event) {\n    this.dataViewCmp = event.detail.cmp;\n    this.dataViewCmp.setStore(new Ext.data.Store({\n       data: [\n            {name: 'Peter', age: 26},\n            {name: 'Ray', age: 21},\n            {name: 'Egon', age: 29},\n            {name: 'Winston', age: 24},\n       ]\n     }));\n  }\n}\n\nwindow.dataview = new DataViewComponent();\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container width=\"100%\" height=\"100%\">\n    <ext-dataview\n        itemTpl=\"<h2>{collectionName}</h2><p><img src={artworkUrl100}></img></p>\"\n        onready=\"dataviewMain.onDataViewready\"\n    >\n    </ext-dataview>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-dataview.component';\n\nexport default class DataViewMainComponent {\n  onDataViewready(event) {\n    this.dataViewCmp = event.detail.cmp;\n    this.dataViewCmp.setStore(new Ext.data.Store({\n        autoLoad: true,\n        proxy: {\n            type: 'jsonp',\n            url: 'https://itunes.apple.com/search?term=Pink+Floyd&entity=album',\n            reader: {\n                type: 'json',\n                rootProperty: 'results'\n           }\n        }\n   }));\n }\n}\n\nwindow.dataviewMain = new DataViewMainComponent();\n```\n\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtDataView } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = new Ext.data.Store({\n        data: [\n             {name: 'Peter', age: 26},\n             {name: 'Ray', age: 21},\n             {name: 'Egon', age: 29},\n             {name: 'Winston', age: 24},\n        ]\n    });\n\n    render() {\n        return (\n            <ExtDataView\n                itemTpl=\"{name} is {age} years old\"\n                store={this.store}\n            />\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtDataView } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = new Ext.data.Store({\n         autoLoad: true,\n         proxy: {\n             type: 'jsonp',\n             url: 'https://itunes.apple.com/search?term=Pink+Floyd&entity=album',\n             reader: {\n                 type: 'json',\n                 rootProperty: 'results'\n            }\n         }\n    });\n\n    render() {\n        return (\n            <ExtDataView\n                itemTpl=\"<h2>{collectionName}</h2><p><img src='{artworkUrl100}' /></p>\"\n                store={this.store}\n            />\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [`\n            `],\n    template: `\n             <ExtDataView\n                [itemTpl]=\"this.itemTpl\"\n                [store]=\"this.store\"\n            ></ExtDataView>\n            `\n})\nexport class AppComponent {\n    store = new Ext.data.Store({\n        data: [\n             {name: 'Peter', age: 26},\n             {name: 'Ray', age: 21},\n             {name: 'Egon', age: 29},\n             {name: 'Winston', age: 24},\n        ]\n    });\n\n    itemTpl = `{name} is {age} years old`;\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [`\n            `],\n    template: `\n             <ExtDataView\n                [itemTpl]=\"this.itemTpl\"\n                [store]=\"this.store\"\n            ></ExtDataView>\n            `\n})\nexport class AppComponent {\n    store = new Ext.data.Store({\n        autoLoad: true,\n        proxy: {\n            type: 'jsonp',\n            url: 'https://itunes.apple.com/search?term=Pink+Floyd&entity=album',\n            reader: {\n                type: 'json',\n                rootProperty: 'results'\n            }\n        }\n    });\n\n   itemTpl = \"<h2>{collectionName}</h2><p><img src='{artworkUrl100}' /></p>\"\n}\n```\n\nThe Store now loads using a {@link Ext.data.proxy.Proxy}, which fetches the data\nfor us. In this case we used a JSON-P proxy so that we can load from Twitter's JSON-P\nsearch API. We also specified the fields present for each tweet, and used store's\n{@link Ext.data.Store#cfg!autoLoad autoLoad} configuration to load automatically. Finally,\nwe configured a `reader` to decode the response from Twitter, telling it to expect\nJSON and that the tweets can be found in the 'results' part of the JSON response.\n\nThe last piece is an update to the `{@link #cfg!itemTpl itemTpl}` to render the image, Twitter username and\nmessage. All we need to do now is add a little CSS to style the list the way we want\nit and we end up with a very basic Twitter viewer. Click the preview button on the\nexample above to see it in action.\n\n# Components As Items\n\nTo use an `{@link Ext.Component}` to render and manage data items, see `{@link Ext.dataview.Component}`.\nPrior to version 6.5 the `useComponents` config was used but this config has been replaced\nby a dedicated class.\n"
 },
 {
  "name": "Ext.dataview.DataView",
  "xtype": "dataview",
  "text": "DataView makes it easy to render one or more data items, typically from a server backend\nor any other data source. The DataView is what powers more powerful components like\n{@link Ext.dataview.List} and {@link Ext.grid.Grd Grid}.\n\nUse DataView whenever you want to repeat the same element structure for multiple records\nof data.\n\n# Creating a Simple DataView\n\nAt its simplest, a DataView is just a Store full of data and a simple template that\nrenders each item:\n\n```javascript\n@example({ framework: 'extjs' })\nvar team = Ext.create({\n    xtype: 'dataview',\n    fullscreen: true,\n\n    store: [\n        { name: 'Peter',  age: 26 },\n        { name: 'Ray',   age: 21 },\n        { name: 'Egon', age: 24 },\n        { name: 'Winston', age: 24 }\n    ],\n\n    itemTpl: '<div>{name} is {age} years old</div>'\n});\n```\n\nHere we just defined everything inline so it's all local with nothing being loaded from\na server. For each of the data items, the DataView will render HTML using the `{@link #cfg!itemTpl itemTpl}`\nFor details see {@link Ext.XTemplate}.\n\nBecause DataView actually uses an underlying {@link Ext.data.Store}, any changes\nto the data are immediately reflected on the screen. For example, if we add a new record\nto the Store it will be rendered into our DataView.\n\nThe same happens if we modify one of the existing records in the Store:\n\n```javascript\n@example({ framework: 'extjs' })\nvar team = Ext.create({\n    xtype: 'dataview',\n    fullscreen: true,\n\n    store: {\n       fields: ['name', 'age'],\n       data: [\n           {name: 'Peter',  age: 26},\n           {name: 'Ray',   age: 21},\n           {name: 'Egon', age: 24},\n           {name: 'Winston', age: 24}\n       ]\n    },\n\n    itemTpl: '<div>{name} is {age} years old</div>'\n});\n\nteam.getStore().add({\n    name: 'Gozer',\n    age: 21\n});\n\nteam.getStore().getAt(0).set('age', 42);\n```\n\nThis last step will get the first record in the Store (Peter), change the age to 42 and\nautomatically update what's on the screen.\n\n# Loading data from a server\n\nTo load data from a server, we need to give the `{@link #cfg!store store}` some information about the\nserver. This is done with the `proxy` config:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'dataview',\n    fullscreen: true,\n\n    store: {\n        autoLoad: true,\n        proxy: {\n            type: 'jsonp',\n            url: 'https://itunes.apple.com/search?term=Pink+Floyd&entity=album',\n\n            reader: {\n                type: 'json',\n                rootProperty: 'results'\n            }\n        }\n    },\n\n    itemTpl: '<h2>{collectionName}</h2><p><img src=\"{artworkUrl100}\" /></p>'\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container width=\"100%\" height=\"100%\">\n    <ext-dataview\n        itemTpl=\"{name} is {age} years old\"\n        onready=\"dataview.onDataViewready\"\n    >\n    </ext-dataview>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-dataview.component';\n\nexport default class DataViewComponent {\n  onDataViewready(event) {\n    this.dataViewCmp = event.detail.cmp;\n    this.dataViewCmp.setStore(new Ext.data.Store({\n       data: [\n            {name: 'Peter', age: 26},\n            {name: 'Ray', age: 21},\n            {name: 'Egon', age: 29},\n            {name: 'Winston', age: 24},\n       ]\n     }));\n  }\n}\n\nwindow.dataview = new DataViewComponent();\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container width=\"100%\" height=\"100%\">\n    <ext-dataview\n        itemTpl=\"<h2>{collectionName}</h2><p><img src={artworkUrl100}></img></p>\"\n        onready=\"dataviewMain.onDataViewready\"\n    >\n    </ext-dataview>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-dataview.component';\n\nexport default class DataViewMainComponent {\n  onDataViewready(event) {\n    this.dataViewCmp = event.detail.cmp;\n    this.dataViewCmp.setStore(new Ext.data.Store({\n        autoLoad: true,\n        proxy: {\n            type: 'jsonp',\n            url: 'https://itunes.apple.com/search?term=Pink+Floyd&entity=album',\n            reader: {\n                type: 'json',\n                rootProperty: 'results'\n           }\n        }\n   }));\n }\n}\n\nwindow.dataviewMain = new DataViewMainComponent();\n```\n\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtDataView } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = new Ext.data.Store({\n        data: [\n             {name: 'Peter', age: 26},\n             {name: 'Ray', age: 21},\n             {name: 'Egon', age: 29},\n             {name: 'Winston', age: 24},\n        ]\n    });\n\n    render() {\n        return (\n            <ExtDataView\n                itemTpl=\"{name} is {age} years old\"\n                store={this.store}\n            />\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtDataView } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = new Ext.data.Store({\n         autoLoad: true,\n         proxy: {\n             type: 'jsonp',\n             url: 'https://itunes.apple.com/search?term=Pink+Floyd&entity=album',\n             reader: {\n                 type: 'json',\n                 rootProperty: 'results'\n            }\n         }\n    });\n\n    render() {\n        return (\n            <ExtDataView\n                itemTpl=\"<h2>{collectionName}</h2><p><img src='{artworkUrl100}' /></p>\"\n                store={this.store}\n            />\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [`\n            `],\n    template: `\n             <ExtDataView\n                [itemTpl]=\"this.itemTpl\"\n                [store]=\"this.store\"\n            ></ExtDataView>\n            `\n})\nexport class AppComponent {\n    store = new Ext.data.Store({\n        data: [\n             {name: 'Peter', age: 26},\n             {name: 'Ray', age: 21},\n             {name: 'Egon', age: 29},\n             {name: 'Winston', age: 24},\n        ]\n    });\n\n    itemTpl = `{name} is {age} years old`;\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [`\n            `],\n    template: `\n             <ExtDataView\n                [itemTpl]=\"this.itemTpl\"\n                [store]=\"this.store\"\n            ></ExtDataView>\n            `\n})\nexport class AppComponent {\n    store = new Ext.data.Store({\n        autoLoad: true,\n        proxy: {\n            type: 'jsonp',\n            url: 'https://itunes.apple.com/search?term=Pink+Floyd&entity=album',\n            reader: {\n                type: 'json',\n                rootProperty: 'results'\n            }\n        }\n    });\n\n   itemTpl = \"<h2>{collectionName}</h2><p><img src='{artworkUrl100}' /></p>\"\n}\n```\n\nThe Store now loads using a {@link Ext.data.proxy.Proxy}, which fetches the data\nfor us. In this case we used a JSON-P proxy so that we can load from Twitter's JSON-P\nsearch API. We also specified the fields present for each tweet, and used store's\n{@link Ext.data.Store#cfg!autoLoad autoLoad} configuration to load automatically. Finally,\nwe configured a `reader` to decode the response from Twitter, telling it to expect\nJSON and that the tweets can be found in the 'results' part of the JSON response.\n\nThe last piece is an update to the `{@link #cfg!itemTpl itemTpl}` to render the image, Twitter username and\nmessage. All we need to do now is add a little CSS to style the list the way we want\nit and we end up with a very basic Twitter viewer. Click the preview button on the\nexample above to see it in action.\n\n# Components As Items\n\nTo use an `{@link Ext.Component}` to render and manage data items, see `{@link Ext.dataview.Component}`.\nPrior to version 6.5 the `useComponents` config was used but this config has been replaced\nby a dedicated class.\n"
 },
 {
  "name": "Ext.dataview.EmptyText",
  "xtype": "emptytext",
  "text": "A Component used by {@link Ext.dataview.Abstract},\n{@link Ext.dataview.List} and {@link Ext.grid.Grid} for displaying\n{@link Ext.dataview.Abstract#cfg!emptyText empty text} when the store contains no records.\n\nInstances of this class should not be created directly as they are created automatically\nas needed by their owning Data View\n"
 },
 {
  "name": "Ext.dataview.IndexBar",
  "xtype": "indexbar",
  "text": "IndexBar is a component used to display a list of data (primarily an alphabet) which\ncan then be used to quickly navigate through a list (see {@link Ext.dataview.List Ext.List}) of data.\n\nWhen a user taps on an item in the {@link Ext.dataview.IndexBar Ext.IndexBar}, it will fire the {@link #event!index #index}\nevent.\n\nHere is an example of the usage in a {@link Ext.dataview.List}:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.define('Contact', {\n    extend: 'Ext.data.Model',\n    config: {\n        fields: ['firstName', 'lastName']\n    }\n});\n\nvar store = new Ext.data.JsonStore({\n   model: 'Contact',\n   sorters: 'lastName',\n\n   grouper: {\n       groupFn: function(record) {\n           return record.get('lastName')[0];\n       }\n   },\n\n   data: [\n       {firstName: 'Screech', lastName: 'Powers'},\n       {firstName: 'Kelly',   lastName: 'Kapowski'},\n       {firstName: 'Zach',    lastName: 'Morris'},\n       {firstName: 'Jessie',  lastName: 'Spano'},\n       {firstName: 'Lisa',    lastName: 'Turtle'},\n       {firstName: 'A.C.',    lastName: 'Slater'},\n       {firstName: 'Richard', lastName: 'Belding'}\n   ]\n});\n\nvar list = new Ext.List({\n   fullscreen: true,\n   itemTpl: '<div class=\"contact\">{firstName} <strong>{lastName}</strong></div>',\n\n   grouped: true,\n   indexBar: true,\n   store: store,\n   hideOnMaskTap: false\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-list\n    onready=\"indexbar.readyIndexBarView\"\n    indexBar=\"true\"\n>\n</ext-list>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-spinnerfield.component';\n\nexport default class IndexBarComponent {\n    constructor() {\n        this.store = new Ext.data.Store({\n            data: [{\n                firstName: 'Screech',\n                lastName: 'Powers'\n            },\n            {\n                firstName: 'Kelly',\n                lastName: 'Kapowski'\n            },\n            {\n                firstName: 'Zach',\n                lastName: 'Morris'\n            },\n            {\n                firstName: 'Jessie',\n                lastName: 'Spano'\n            },\n            {\n                firstName: 'Lisa',\n                lastName: 'Turtle'\n            },\n            {\n                firstName: 'A.C.',\n                lastName: 'Slater'\n            },\n            {\n                firstName: 'Richard',\n                lastName: 'Belding'\n            }]\n        })\n    }\n\n    readyIndexBarView(event) {\n        this.indexBarView = event.detail.cmp;\n        this.indexBarView.setStore(this.store);\n        this.indexBarView.setItemTpl(`<divclass='contact'>{firstName} <strong>{lastName}</strong>\n        </div>`);\n    }\n}\n\n window.indexbar = new IndexBarComponent();\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtList } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = new Ext.data.Store({\n        data: [{\n            firstName: 'Screech',\n            lastName: 'Powers'\n        },\n        {\n            firstName: 'Kelly',\n            lastName: 'Kapowski'\n        },\n        {\n            firstName: 'Zach',\n            lastName: 'Morris'\n        },\n        {\n            firstName: 'Jessie',\n            lastName: 'Spano'\n        },\n        {\n            firstName: 'Lisa',\n            lastName: 'Turtle'\n        },\n        {\n            firstName: 'A.C.',\n            lastName: 'Slater'\n        },\n        {\n            firstName: 'Richard',\n            lastName: 'Belding'\n        }]\n    });\n\n    render() {\n        return (\n            <ExtList\n                itemTpl=\"<div class='contact'>{firstName} <strong>{lastName}</strong></div>\"\n                store={this.store}\n                indexBar\n            />\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [`\n            `],\n    template: `\n             <ExtList\n                [itemTpl]=\"this.itemTpl\"\n                [store]=\"this.store\"\n                [indexBar]=\"true\"\n            ></ExtList>\n            `\n})\nexport class AppComponent {\n    store = new Ext.data.Store({\n        data: [{\n            firstName: 'Screech',\n            lastName: 'Powers'\n        },\n        {\n            firstName: 'Kelly',\n            lastName: 'Kapowski'\n        },\n        {\n            firstName: 'Zach',\n            lastName: 'Morris'\n        },\n        {\n            firstName: 'Jessie',\n            lastName: 'Spano'\n        },\n        {\n            firstName: 'Lisa',\n            lastName: 'Turtle'\n        },\n        {\n            firstName: 'A.C.',\n            lastName: 'Slater'\n        },\n        {\n            firstName: 'Richard',\n            lastName: 'Belding'\n        }]\n    });\n\n    itemTpl = \"<div class='contact'>{firstName} <strong>{lastName}</strong></div>\"\n}\n```\n"
 },
 {
  "name": "Ext.dataview.IndexBar",
  "xtype": "indexbar",
  "text": "IndexBar is a component used to display a list of data (primarily an alphabet) which\ncan then be used to quickly navigate through a list (see {@link Ext.dataview.List Ext.List}) of data.\n\nWhen a user taps on an item in the {@link Ext.dataview.IndexBar Ext.IndexBar}, it will fire the {@link #event!index #index}\nevent.\n\nHere is an example of the usage in a {@link Ext.dataview.List}:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.define('Contact', {\n    extend: 'Ext.data.Model',\n    config: {\n        fields: ['firstName', 'lastName']\n    }\n});\n\nvar store = new Ext.data.JsonStore({\n   model: 'Contact',\n   sorters: 'lastName',\n\n   grouper: {\n       groupFn: function(record) {\n           return record.get('lastName')[0];\n       }\n   },\n\n   data: [\n       {firstName: 'Screech', lastName: 'Powers'},\n       {firstName: 'Kelly',   lastName: 'Kapowski'},\n       {firstName: 'Zach',    lastName: 'Morris'},\n       {firstName: 'Jessie',  lastName: 'Spano'},\n       {firstName: 'Lisa',    lastName: 'Turtle'},\n       {firstName: 'A.C.',    lastName: 'Slater'},\n       {firstName: 'Richard', lastName: 'Belding'}\n   ]\n});\n\nvar list = new Ext.List({\n   fullscreen: true,\n   itemTpl: '<div class=\"contact\">{firstName} <strong>{lastName}</strong></div>',\n\n   grouped: true,\n   indexBar: true,\n   store: store,\n   hideOnMaskTap: false\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-list\n    onready=\"indexbar.readyIndexBarView\"\n    indexBar=\"true\"\n>\n</ext-list>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-spinnerfield.component';\n\nexport default class IndexBarComponent {\n    constructor() {\n        this.store = new Ext.data.Store({\n            data: [{\n                firstName: 'Screech',\n                lastName: 'Powers'\n            },\n            {\n                firstName: 'Kelly',\n                lastName: 'Kapowski'\n            },\n            {\n                firstName: 'Zach',\n                lastName: 'Morris'\n            },\n            {\n                firstName: 'Jessie',\n                lastName: 'Spano'\n            },\n            {\n                firstName: 'Lisa',\n                lastName: 'Turtle'\n            },\n            {\n                firstName: 'A.C.',\n                lastName: 'Slater'\n            },\n            {\n                firstName: 'Richard',\n                lastName: 'Belding'\n            }]\n        })\n    }\n\n    readyIndexBarView(event) {\n        this.indexBarView = event.detail.cmp;\n        this.indexBarView.setStore(this.store);\n        this.indexBarView.setItemTpl(`<divclass='contact'>{firstName} <strong>{lastName}</strong>\n        </div>`);\n    }\n}\n\n window.indexbar = new IndexBarComponent();\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtList } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = new Ext.data.Store({\n        data: [{\n            firstName: 'Screech',\n            lastName: 'Powers'\n        },\n        {\n            firstName: 'Kelly',\n            lastName: 'Kapowski'\n        },\n        {\n            firstName: 'Zach',\n            lastName: 'Morris'\n        },\n        {\n            firstName: 'Jessie',\n            lastName: 'Spano'\n        },\n        {\n            firstName: 'Lisa',\n            lastName: 'Turtle'\n        },\n        {\n            firstName: 'A.C.',\n            lastName: 'Slater'\n        },\n        {\n            firstName: 'Richard',\n            lastName: 'Belding'\n        }]\n    });\n\n    render() {\n        return (\n            <ExtList\n                itemTpl=\"<div class='contact'>{firstName} <strong>{lastName}</strong></div>\"\n                store={this.store}\n                indexBar\n            />\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [`\n            `],\n    template: `\n             <ExtList\n                [itemTpl]=\"this.itemTpl\"\n                [store]=\"this.store\"\n                [indexBar]=\"true\"\n            ></ExtList>\n            `\n})\nexport class AppComponent {\n    store = new Ext.data.Store({\n        data: [{\n            firstName: 'Screech',\n            lastName: 'Powers'\n        },\n        {\n            firstName: 'Kelly',\n            lastName: 'Kapowski'\n        },\n        {\n            firstName: 'Zach',\n            lastName: 'Morris'\n        },\n        {\n            firstName: 'Jessie',\n            lastName: 'Spano'\n        },\n        {\n            firstName: 'Lisa',\n            lastName: 'Turtle'\n        },\n        {\n            firstName: 'A.C.',\n            lastName: 'Slater'\n        },\n        {\n            firstName: 'Richard',\n            lastName: 'Belding'\n        }]\n    });\n\n    itemTpl = \"<div class='contact'>{firstName} <strong>{lastName}</strong></div>\"\n}\n```\n"
 },
 {
  "name": "Ext.dataview.ItemHeader",
  "xtype": "itemheader",
  "text": "A simple header component for grouped lists.  List headers are created automatically\nby {@link Ext.dataview.List} and should not be directly instantiated.\n"
 },
 {
  "name": "Ext.dataview.List",
  "xtype": "list",
  "text": "List is a vertical `DataView` which additionally supports {@link #cfg!grouped grouping},\n{@link #cfg!indexBar indexing} and {@link #cfg!onItemDisclosure disclosures}.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'list',\n    fullscreen: true,\n    itemTpl: '{title}',\n    data: [\n        { title: 'Item 1' },\n        { title: 'Item 2' },\n        { title: 'Item 3' },\n        { title: 'Item 4' }\n    ]\n});\n```\n\nA more advanced example showing a list of people grouped by last name:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'list',\n    fullscreen: true,\n    itemTpl: '<div class=\"contact\">{firstName} <b>{lastName}</b></div>',\n\n    store: {\n        grouper: {\n            property: 'lastName',\n            groupFn: function(record) {\n                return record.get('lastName')[0];\n            }\n        },\n\n        data: [\n            { firstName: 'Peter',   lastName: 'Venkman'  },\n            { firstName: 'Raymond', lastName: 'Stantz'   },\n            { firstName: 'Egon',    lastName: 'Spengler' },\n            { firstName: 'Winston', lastName: 'Zeddemore'}\n        ]\n    }\n});\n```\n\n## Components\n\nTo use {@link Ext.Component} to render records instead of `{@link #cfg!itemTpl itemTpl}`, use\n`{@link #cfg!itemConfig itemConfig}` and `{@link #cfg!itemDataMap itemDataMap}` (or `{@link #cfg!bind bind}`).\n\nSee the documentation for the {@link Ext.dataview.Component} for more\ndetails.\n\n## Scroll Docking\n\nIf you want to dock items to the bottom or top of a List, you can use the `{@link #cfg!scrollDock scrollDock}`\nconfiguration on child items in this List. The following example adds a button to the\nbottom of the List.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'list',\n    fullscreen: true,\n\n    store: [\n        { firstName: 'Peter',   lastName: 'Venkman'  },\n        { firstName: 'Raymond', lastName: 'Stantz'   },\n        { firstName: 'Egon',    lastName: 'Spengler' },\n        { firstName: 'Winston', lastName: 'Zeddemore'}\n    ],\n\n    itemTpl: '<div class=\"contact\">{firstName} <b>{lastName}</b></div>',\n\n    items: [{\n        xtype: 'button',\n        scrollDock: 'end',\n        text: 'Load More...'\n    }]\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n <ext-list\n     onready=\"basiclist.readylistView\"\n >\n </ext-list>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-list.component';\n\nexport default class BasicListComponent {\n    constructor() {\n        this.store = new Ext.data.Store({\n           data: [\n               {title: 'Item 1'},\n               {title: 'Item 2'},\n               {title: 'Item 3'},\n               {title: 'Item 4'}\n           ]\n       });\n    }\n    readylistView(event) {\n        this.listView = event.detail.cmp;\n        this.listView.setStore(this.store);\n        this.listView.setItemTpl(`{title}`);\n    }\n}\n\nwindow.basiclist = new BasicListComponent();\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-list\n    grouped=\"true\"\n    onready=\"groupedlist.readyGroupedListView\"\n>\n</ext-list>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-list.component';\n\nexport default class GroupedListComponent {\n    constructor() {\n        this.store = new Ext.data.Store({\n            data: [{\n               firstName: 'Peter',\n               lastName: 'Venkman'\n            }, {\n               firstName: 'Raymond',\n                lastName: 'Stantz'\n            }, {\n               firstName: 'Egon',\n               lastName: 'Spengler'\n            }, {\n               firstName: 'Winston',\n               lastName: 'Zeddemore'\n           }],\n\n           sorters: 'lastName',\n\n           grouper: {\n               groupFn: function(record) {\n                   return record.get('lastName')[0];\n               }\n           }\n       });\n   }\n\n   readyGroupedListView(event) {\n       this.groupedlistView = event.detail.cmp;\n       this.groupedlistView.setStore(this.store);\n       this.groupedlistView.setItemTpl(`{firstName} {lastName}`);\n   }\n}\n\nwindow.groupedlist = new GroupedListComponent();\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-list\n    onready=\"positionlistitem.readyPositionedListView\"\n>\n    <ext-button\n       scrollDock=\"bottom\"\n       docked=\"bottom\"\n       text=\"load more...\"\n    >\n    </ext-button>\n</ext-list>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-list.component';\nimport '@sencha/ext-web-components/dist/ext-button.component';\n\nexport default class PositionedListItemComponent {\n\n    constructor() {\n        this.store = new Ext.data.store({\n            data: [{\n                firstName: 'Peter',\n                lastName: 'Venkman'\n             },\n             {\n                firstName: 'Raymond',\n                lastName: 'Stantz'\n             },\n             {\n                firstName: 'Egon',\n                lastName: 'Spengler'\n             },\n             {\n                firstName: 'Winston',\n                lastName: 'Zeddemore'\n           }]\n       })\n\n   }\n\n   readyPositionedListView(event) {\n        this.positionedListView = event.detail.cmp;\n        this.positionedListView.setStore(this.store);\n        this.positionedListView.setItemTpl(`{firstName} {lastName}`);\n   }\n}\n\nwindow.positionlistitem = new PositionedListItemComponent();\n\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtList } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = new Ext.data.Store({\n        data: [\n            {title: 'Item 1'},\n            {title: 'Item 2'},\n            {title: 'Item 3'},\n            {title: 'Item 4'}\n        ]\n    });\n\n    render() {\n        return (\n            <ExtList\n                itemTpl=\"{title}\"\n                store={this.store}\n            />\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtList, ExtButton } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = new Ext.data.Store({\n        data: [{\n            firstName: 'Peter',\n            lastName: 'Venkman'\n        }, {\n            firstName: 'Raymond',\n            lastName: 'Stantz'\n        }, {\n            firstName: 'Egon',\n            lastName: 'Spengler'\n        }, {\n            firstName: 'Winston',\n            lastName: 'Zeddemore'\n        }],\n\n       sorters: 'lastName',\n\n       grouper: {\n           groupFn: function(record) {\n               return record.get('lastName')[0];\n           }\n        }\n    });\n\n    render() {\n        return (\n            <ExtList\n                itemTpl=\"{firstName} {lastName}\"\n                store={this.store}\n                grouped\n            />\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtList, ExtButton } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = new Ext.data.Store({\n        data: [{\n            firstName: 'Peter',\n            lastName: 'Venkman'\n        },\n        {\n            firstName: 'Raymond',\n            lastName: 'Stantz'\n        },\n        {\n            firstName: 'Egon',\n            lastName: 'Spengler'\n        },\n        {\n            firstName: 'Winston',\n            lastName: 'Zeddemore'\n        }]\n    });\n\n    render() {\n        return (\n            <ExtList\n                itemTpl=\"{firstName} {lastName}\"\n                store={this.store}\n             >\n                 <ExtButton\n                     scrollDock=\"bottom\"\n                     docked=\"bottom\"\n                     text=\"load more...\"\n                 />\n            </ExtList>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [`\n            `],\n    template: `\n             <ExtList\n                [store]=\"this.store\"\n                [itemTpl]=\"this.itemTpl\"\n            ></ExtList>\n            `\n})\nexport class AppComponent {\n    store = new Ext.data.Store({\n        data: [\n            {title: 'Item 1'},\n            {title: 'Item 2'},\n            {title: 'Item 3'},\n            {title: 'Item 4'}\n        ]\n    });\n\n    itemTpl = \"{title}\";\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [`\n             `],\n     template: `\n              <ExtList\n                 [store]=\"this.store\"\n                 [itemTpl]=\"this.itemTpl\"\n                 grouped=\"true\"\n             ></ExtList>\n             `\n })\n export class AppComponent {\n     store = new Ext.data.Store({\n         data: [{\n             firstName: 'Peter',\n             lastName: 'Venkman'\n         }, {\n             firstName: 'Raymond',\n             lastName: 'Stantz'\n         }, {\n             firstName: 'Egon',\n             lastName: 'Spengler'\n         }, {\n             firstName: 'Winston',\n             lastName: 'Zeddemore'\n         }],\n\n         sorters: 'lastName',\n\n         grouper: {\n             groupFn: function(record) {\n                 return record.get('lastName')[0];\n             }\n         }\n    });\n\n    itemTpl = \"{firstName} {lastName}\";\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [`\n             `],\n     template: `\n             <ExtList\n                 [store]=\"this.store\"\n                 [itemTpl]=\"this.itemTpl\"\n             >\n             <ExtButton\n                   scrollDock=\"bottom\"\n                   docked=\"bottom\"\n                   text=\"load more...\"\n               ></ExtButton>\n             </ExtList>\n             `\n })\n export class AppComponent {\n     store = new Ext.data.Store({\n         data: [{\n             firstName: 'Peter',\n             lastName: 'Venkman'\n         },\n         {\n             firstName: 'Raymond',\n             lastName: 'Stantz'\n         },\n         {\n             firstName: 'Egon',\n             lastName: 'Spengler'\n         },\n         {\n             firstName: 'Winston',\n             lastName: 'Zeddemore'\n         }]\n     });\n\n     itemTpl = \"{firstName} {lastName}\";\n}\n```\n"
 },
 {
  "name": "Ext.dataview.List",
  "xtype": "list",
  "text": "List is a vertical `DataView` which additionally supports {@link #cfg!grouped grouping},\n{@link #cfg!indexBar indexing} and {@link #cfg!onItemDisclosure disclosures}.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'list',\n    fullscreen: true,\n    itemTpl: '{title}',\n    data: [\n        { title: 'Item 1' },\n        { title: 'Item 2' },\n        { title: 'Item 3' },\n        { title: 'Item 4' }\n    ]\n});\n```\n\nA more advanced example showing a list of people grouped by last name:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'list',\n    fullscreen: true,\n    itemTpl: '<div class=\"contact\">{firstName} <b>{lastName}</b></div>',\n\n    store: {\n        grouper: {\n            property: 'lastName',\n            groupFn: function(record) {\n                return record.get('lastName')[0];\n            }\n        },\n\n        data: [\n            { firstName: 'Peter',   lastName: 'Venkman'  },\n            { firstName: 'Raymond', lastName: 'Stantz'   },\n            { firstName: 'Egon',    lastName: 'Spengler' },\n            { firstName: 'Winston', lastName: 'Zeddemore'}\n        ]\n    }\n});\n```\n\n## Components\n\nTo use {@link Ext.Component} to render records instead of `{@link #cfg!itemTpl itemTpl}`, use\n`{@link #cfg!itemConfig itemConfig}` and `{@link #cfg!itemDataMap itemDataMap}` (or `{@link #cfg!bind bind}`).\n\nSee the documentation for the {@link Ext.dataview.Component} for more\ndetails.\n\n## Scroll Docking\n\nIf you want to dock items to the bottom or top of a List, you can use the `{@link #cfg!scrollDock scrollDock}`\nconfiguration on child items in this List. The following example adds a button to the\nbottom of the List.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'list',\n    fullscreen: true,\n\n    store: [\n        { firstName: 'Peter',   lastName: 'Venkman'  },\n        { firstName: 'Raymond', lastName: 'Stantz'   },\n        { firstName: 'Egon',    lastName: 'Spengler' },\n        { firstName: 'Winston', lastName: 'Zeddemore'}\n    ],\n\n    itemTpl: '<div class=\"contact\">{firstName} <b>{lastName}</b></div>',\n\n    items: [{\n        xtype: 'button',\n        scrollDock: 'end',\n        text: 'Load More...'\n    }]\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n <ext-list\n     onready=\"basiclist.readylistView\"\n >\n </ext-list>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-list.component';\n\nexport default class BasicListComponent {\n    constructor() {\n        this.store = new Ext.data.Store({\n           data: [\n               {title: 'Item 1'},\n               {title: 'Item 2'},\n               {title: 'Item 3'},\n               {title: 'Item 4'}\n           ]\n       });\n    }\n    readylistView(event) {\n        this.listView = event.detail.cmp;\n        this.listView.setStore(this.store);\n        this.listView.setItemTpl(`{title}`);\n    }\n}\n\nwindow.basiclist = new BasicListComponent();\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-list\n    grouped=\"true\"\n    onready=\"groupedlist.readyGroupedListView\"\n>\n</ext-list>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-list.component';\n\nexport default class GroupedListComponent {\n    constructor() {\n        this.store = new Ext.data.Store({\n            data: [{\n               firstName: 'Peter',\n               lastName: 'Venkman'\n            }, {\n               firstName: 'Raymond',\n                lastName: 'Stantz'\n            }, {\n               firstName: 'Egon',\n               lastName: 'Spengler'\n            }, {\n               firstName: 'Winston',\n               lastName: 'Zeddemore'\n           }],\n\n           sorters: 'lastName',\n\n           grouper: {\n               groupFn: function(record) {\n                   return record.get('lastName')[0];\n               }\n           }\n       });\n   }\n\n   readyGroupedListView(event) {\n       this.groupedlistView = event.detail.cmp;\n       this.groupedlistView.setStore(this.store);\n       this.groupedlistView.setItemTpl(`{firstName} {lastName}`);\n   }\n}\n\nwindow.groupedlist = new GroupedListComponent();\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-list\n    onready=\"positionlistitem.readyPositionedListView\"\n>\n    <ext-button\n       scrollDock=\"bottom\"\n       docked=\"bottom\"\n       text=\"load more...\"\n    >\n    </ext-button>\n</ext-list>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-list.component';\nimport '@sencha/ext-web-components/dist/ext-button.component';\n\nexport default class PositionedListItemComponent {\n\n    constructor() {\n        this.store = new Ext.data.store({\n            data: [{\n                firstName: 'Peter',\n                lastName: 'Venkman'\n             },\n             {\n                firstName: 'Raymond',\n                lastName: 'Stantz'\n             },\n             {\n                firstName: 'Egon',\n                lastName: 'Spengler'\n             },\n             {\n                firstName: 'Winston',\n                lastName: 'Zeddemore'\n           }]\n       })\n\n   }\n\n   readyPositionedListView(event) {\n        this.positionedListView = event.detail.cmp;\n        this.positionedListView.setStore(this.store);\n        this.positionedListView.setItemTpl(`{firstName} {lastName}`);\n   }\n}\n\nwindow.positionlistitem = new PositionedListItemComponent();\n\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtList } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = new Ext.data.Store({\n        data: [\n            {title: 'Item 1'},\n            {title: 'Item 2'},\n            {title: 'Item 3'},\n            {title: 'Item 4'}\n        ]\n    });\n\n    render() {\n        return (\n            <ExtList\n                itemTpl=\"{title}\"\n                store={this.store}\n            />\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtList, ExtButton } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = new Ext.data.Store({\n        data: [{\n            firstName: 'Peter',\n            lastName: 'Venkman'\n        }, {\n            firstName: 'Raymond',\n            lastName: 'Stantz'\n        }, {\n            firstName: 'Egon',\n            lastName: 'Spengler'\n        }, {\n            firstName: 'Winston',\n            lastName: 'Zeddemore'\n        }],\n\n       sorters: 'lastName',\n\n       grouper: {\n           groupFn: function(record) {\n               return record.get('lastName')[0];\n           }\n        }\n    });\n\n    render() {\n        return (\n            <ExtList\n                itemTpl=\"{firstName} {lastName}\"\n                store={this.store}\n                grouped\n            />\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtList, ExtButton } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = new Ext.data.Store({\n        data: [{\n            firstName: 'Peter',\n            lastName: 'Venkman'\n        },\n        {\n            firstName: 'Raymond',\n            lastName: 'Stantz'\n        },\n        {\n            firstName: 'Egon',\n            lastName: 'Spengler'\n        },\n        {\n            firstName: 'Winston',\n            lastName: 'Zeddemore'\n        }]\n    });\n\n    render() {\n        return (\n            <ExtList\n                itemTpl=\"{firstName} {lastName}\"\n                store={this.store}\n             >\n                 <ExtButton\n                     scrollDock=\"bottom\"\n                     docked=\"bottom\"\n                     text=\"load more...\"\n                 />\n            </ExtList>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [`\n            `],\n    template: `\n             <ExtList\n                [store]=\"this.store\"\n                [itemTpl]=\"this.itemTpl\"\n            ></ExtList>\n            `\n})\nexport class AppComponent {\n    store = new Ext.data.Store({\n        data: [\n            {title: 'Item 1'},\n            {title: 'Item 2'},\n            {title: 'Item 3'},\n            {title: 'Item 4'}\n        ]\n    });\n\n    itemTpl = \"{title}\";\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [`\n             `],\n     template: `\n              <ExtList\n                 [store]=\"this.store\"\n                 [itemTpl]=\"this.itemTpl\"\n                 grouped=\"true\"\n             ></ExtList>\n             `\n })\n export class AppComponent {\n     store = new Ext.data.Store({\n         data: [{\n             firstName: 'Peter',\n             lastName: 'Venkman'\n         }, {\n             firstName: 'Raymond',\n             lastName: 'Stantz'\n         }, {\n             firstName: 'Egon',\n             lastName: 'Spengler'\n         }, {\n             firstName: 'Winston',\n             lastName: 'Zeddemore'\n         }],\n\n         sorters: 'lastName',\n\n         grouper: {\n             groupFn: function(record) {\n                 return record.get('lastName')[0];\n             }\n         }\n    });\n\n    itemTpl = \"{firstName} {lastName}\";\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [`\n             `],\n     template: `\n             <ExtList\n                 [store]=\"this.store\"\n                 [itemTpl]=\"this.itemTpl\"\n             >\n             <ExtButton\n                   scrollDock=\"bottom\"\n                   docked=\"bottom\"\n                   text=\"load more...\"\n               ></ExtButton>\n             </ExtList>\n             `\n })\n export class AppComponent {\n     store = new Ext.data.Store({\n         data: [{\n             firstName: 'Peter',\n             lastName: 'Venkman'\n         },\n         {\n             firstName: 'Raymond',\n             lastName: 'Stantz'\n         },\n         {\n             firstName: 'Egon',\n             lastName: 'Spengler'\n         },\n         {\n             firstName: 'Winston',\n             lastName: 'Zeddemore'\n         }]\n     });\n\n     itemTpl = \"{firstName} {lastName}\";\n}\n```\n"
 },
 {
  "name": "Ext.dataview.ListItem",
  "xtype": "listitem",
  "text": "A ListItem is a container for {@link Ext.dataview.List}.\n\nListItem configures and updates the {@link Ext.data.Model} for\nthe sub-component items in a list.\n\n*Note*: Use of ListItem increases overhead since it generates more markup than\nusing the `SimpleListItem`. This overhead is more noticeable in Internet Explorer. If\npossible, use the default {@link Ext.dataview.SimpleListItem}. To use the additional\nfeatures of this class, use the {@link Ext.dataview.List#cfg!itemConfig itemConfig} config:\n\n     {\n         xtype: 'list',\n         itemConfig: {\n             xtype: 'listitem'\n         }\n     }\n\nThe following example shows how to configure and update sub-component items\nin a list:\n\n     Ext.define('App.view.twitter.TweetListItem', {\n         extend: 'Ext.dataview.ListItem',\n         xtype : 'tweetlistitem',\n\n         requires: [\n             'Ext.Img'\n         ],\n\n         layout: 'vbox',\n\n         items: [{\n             xtype: 'component',\n             cls: 'username',\n             reference: 'userName'\n         }, {\n             xtype: 'component',\n             cls: 'text',\n             reference: 'textCmp'\n         }, {\n             xtype : 'image',\n             reference: 'avatarImg',\n             docked: 'left',\n             cls: 'avatar',\n             width: 48,\n             height: 48\n         }],\n\n         dataMap: {\n             // Set \"html\" config of component w/reference \"userName\"\n             // to the \"username\" field from the associated record.\n             //\n             userName: {\n                 html: 'username'\n             },\n\n             textCmp: {\n                 html: 'text'\n             },\n\n             avatarImg: {\n                 src: 'avatar_url'\n             }\n         }\n     });\n"
 },
 {
  "name": "Ext.dataview.ListItem",
  "xtype": "listitem",
  "text": "A ListItem is a container for {@link Ext.dataview.List}.\n\nListItem configures and updates the {@link Ext.data.Model} for\nthe sub-component items in a list.\n\n*Note*: Use of ListItem increases overhead since it generates more markup than\nusing the `SimpleListItem`. This overhead is more noticeable in Internet Explorer. If\npossible, use the default {@link Ext.dataview.SimpleListItem}. To use the additional\nfeatures of this class, use the {@link Ext.dataview.List#cfg!itemConfig itemConfig} config:\n\n     {\n         xtype: 'list',\n         itemConfig: {\n             xtype: 'listitem'\n         }\n     }\n\nThe following example shows how to configure and update sub-component items\nin a list:\n\n     Ext.define('App.view.twitter.TweetListItem', {\n         extend: 'Ext.dataview.ListItem',\n         xtype : 'tweetlistitem',\n\n         requires: [\n             'Ext.Img'\n         ],\n\n         layout: 'vbox',\n\n         items: [{\n             xtype: 'component',\n             cls: 'username',\n             reference: 'userName'\n         }, {\n             xtype: 'component',\n             cls: 'text',\n             reference: 'textCmp'\n         }, {\n             xtype : 'image',\n             reference: 'avatarImg',\n             docked: 'left',\n             cls: 'avatar',\n             width: 48,\n             height: 48\n         }],\n\n         dataMap: {\n             // Set \"html\" config of component w/reference \"userName\"\n             // to the \"username\" field from the associated record.\n             //\n             userName: {\n                 html: 'username'\n             },\n\n             textCmp: {\n                 html: 'text'\n             },\n\n             avatarImg: {\n                 src: 'avatar_url'\n             }\n         }\n     });\n"
 },
 {
  "name": "Ext.dataview.ListItemPlaceholder",
  "xtype": "listitemplaceholder",
  "text": "This component is used for a collapsed group in a `list` component.\n"
 },
 {
  "name": "Ext.dataview.listswiper.Item",
  "xtype": "listswiperitem"
 },
 {
  "name": "Ext.dataview.listswiper.Stepper",
  "xtype": "listswiperstepper",
  "text": "This class is a container used by the {@link Ext.dataview.plugin.ListSwiper listswiper}\nplugin to display information and controls when an item is swiped.\n"
 },
 {
  "name": "Ext.dataview.NestedList",
  "xtype": "nestedlist",
  "text": "NestedList provides a miller column interface to navigate between nested sets\nand provide a clean interface with limited screen real-estate.\n\n```javascript\n@example({ framework: 'extjs' })\n var data = {\n     text: 'Groceries',\n     items: [{\n         text: 'Drinks',\n         items: [{\n             text: 'Water',\n             items: [{\n                 text: 'Sparkling',\n                 leaf: true\n             }, {\n                 text: 'Still',\n                 leaf: true\n             }]\n         }, {\n             text: 'Coffee',\n             leaf: true\n         }, {\n             text: 'Espresso',\n             leaf: true\n         }, {\n             text: 'Redbull',\n             leaf: true\n         }, {\n             text: 'Coke',\n             leaf: true\n         }, {\n             text: 'Diet Coke',\n             leaf: true\n         }]\n     }, {\n         text: 'Fruit',\n         items: [{\n             text: 'Bananas',\n             leaf: true\n         }, {\n             text: 'Lemon',\n             leaf: true\n         }]\n     }, {\n         text: 'Snacks',\n         items: [{\n             text: 'Nuts',\n             leaf: true\n         }, {\n             text: 'Pretzels',\n             leaf: true\n         }, {\n             text: 'Wasabi Peas',\n             leaf: true\n         }]\n     }]\n};\n\nExt.define('ListItem', {\n    extend: 'Ext.data.Model',\n    config: {\n        fields: [{\n            name: 'text',\n            type: 'string'\n        }]\n    }\n});\n\nvar store = Ext.create('Ext.data.TreeStore', {\n    model: 'ListItem',\n    defaultRootProperty: 'items',\n    root: data\n});\n\nvar nestedList = Ext.create('Ext.NestedList', {\n    fullscreen: true,\n    title: 'Groceries',\n    displayField: 'text',\n    store: store\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"fit\">\n    <ext-nestedlist\n        displayField=\"text\"\n        height=\"600px\"\n        title=\"Groceries\"\n        onready=\"nestedlist.readyNestedList\"\n    >\n    </ext-nestedlist>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-nestedlist.component';\n\nexport default class NestedListComponent {\n    constructor() {\n        this.store = Ext.create('Ext.data.TreeStore', {\n            defaultRootProperty: 'items',\n            root: {\n                text: 'Groceries',\n                items: [{\n                    text: 'Drinks',\n                    items: [{\n                        text: 'Water',\n                        items: [{\n                            text: 'Sparkling',\n                            leaf: true\n                        }, {\n                            text: 'Still',\n                            leaf: true\n                        }]\n                    }]\n                },{\n                text: 'Snacks',\n                items: [{\n                    text: 'Nuts',\n                    leaf: true\n                 }, {\n                    text: 'Pretzels',\n                    leaf: true\n                 }, {\n                    text: 'Wasabi Peas',\n                    leaf: true\n                 }]\n               }]\n           }\n        });\n   }\n   readyNestedList(event) {\n       this.nestedListView = event.detail.cmp;\n       this.nestedListView.setStore(this.store);\n   }\n}\n\nwindow.nestedlist = new NestedListComponent();\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtNestedList } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = Ext.create('Ext.data.TreeStore', {\n        defaultRootProperty: 'items',\n        root: {\n            text: 'Groceries',\n            items: [{\n                text: 'Drinks',\n                items: [{\n                    text: 'Water',\n                    items: [{\n                        text: 'Sparkling',\n                        leaf: true\n                    }, {\n                        text: 'Still',\n                        leaf: true\n                    }]\n                }]\n            },{\n                text: 'Snacks',\n                items: [{\n                    text: 'Nuts',\n                    leaf: true\n                }, {\n                    text: 'Pretzels',\n                    leaf: true\n                }, {\n                    text: 'Wasabi Peas',\n                    leaf: true\n                }]\n            }]\n        }\n    });\n\n    render() {\n        return (\n            <ExtNestedList\n                displayField=\"text\"\n                store={this.store}\n                title=\"Groceries\"\n            />\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [`\n            `],\n    template: `\n             <ExtNestedList\n                [displayField]=\"'text'\"\n                [height]=\"'600px'\"\n                [store]=\"this.store\"\n                title=\"Groceries\"\n            ></ExtNestedList>\n            `\n})\nexport class AppComponent {\n    store = Ext.create('Ext.data.TreeStore', {\n        defaultRootProperty: 'items',\n        root: {\n            text: 'Groceries',\n            items: [{\n                text: 'Drinks',\n                items: [{\n                    text: 'Water',\n                    items: [{\n                        text: 'Sparkling',\n                        leaf: true\n                    }, {\n                        text: 'Still',\n                        leaf: true\n                    }]\n                }]\n            },{\n                text: 'Snacks',\n                items: [{\n                    text: 'Nuts',\n                    leaf: true\n                }, {\n                    text: 'Pretzels',\n                    leaf: true\n                }, {\n                    text: 'Wasabi Peas',\n                    leaf: true\n                }]\n            }]\n        }\n    });\n\n}\n```\n"
 },
 {
  "name": "Ext.dataview.NestedList",
  "xtype": "nestedlist",
  "text": "NestedList provides a miller column interface to navigate between nested sets\nand provide a clean interface with limited screen real-estate.\n\n```javascript\n@example({ framework: 'extjs' })\n var data = {\n     text: 'Groceries',\n     items: [{\n         text: 'Drinks',\n         items: [{\n             text: 'Water',\n             items: [{\n                 text: 'Sparkling',\n                 leaf: true\n             }, {\n                 text: 'Still',\n                 leaf: true\n             }]\n         }, {\n             text: 'Coffee',\n             leaf: true\n         }, {\n             text: 'Espresso',\n             leaf: true\n         }, {\n             text: 'Redbull',\n             leaf: true\n         }, {\n             text: 'Coke',\n             leaf: true\n         }, {\n             text: 'Diet Coke',\n             leaf: true\n         }]\n     }, {\n         text: 'Fruit',\n         items: [{\n             text: 'Bananas',\n             leaf: true\n         }, {\n             text: 'Lemon',\n             leaf: true\n         }]\n     }, {\n         text: 'Snacks',\n         items: [{\n             text: 'Nuts',\n             leaf: true\n         }, {\n             text: 'Pretzels',\n             leaf: true\n         }, {\n             text: 'Wasabi Peas',\n             leaf: true\n         }]\n     }]\n};\n\nExt.define('ListItem', {\n    extend: 'Ext.data.Model',\n    config: {\n        fields: [{\n            name: 'text',\n            type: 'string'\n        }]\n    }\n});\n\nvar store = Ext.create('Ext.data.TreeStore', {\n    model: 'ListItem',\n    defaultRootProperty: 'items',\n    root: data\n});\n\nvar nestedList = Ext.create('Ext.NestedList', {\n    fullscreen: true,\n    title: 'Groceries',\n    displayField: 'text',\n    store: store\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"fit\">\n    <ext-nestedlist\n        displayField=\"text\"\n        height=\"600px\"\n        title=\"Groceries\"\n        onready=\"nestedlist.readyNestedList\"\n    >\n    </ext-nestedlist>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-nestedlist.component';\n\nexport default class NestedListComponent {\n    constructor() {\n        this.store = Ext.create('Ext.data.TreeStore', {\n            defaultRootProperty: 'items',\n            root: {\n                text: 'Groceries',\n                items: [{\n                    text: 'Drinks',\n                    items: [{\n                        text: 'Water',\n                        items: [{\n                            text: 'Sparkling',\n                            leaf: true\n                        }, {\n                            text: 'Still',\n                            leaf: true\n                        }]\n                    }]\n                },{\n                text: 'Snacks',\n                items: [{\n                    text: 'Nuts',\n                    leaf: true\n                 }, {\n                    text: 'Pretzels',\n                    leaf: true\n                 }, {\n                    text: 'Wasabi Peas',\n                    leaf: true\n                 }]\n               }]\n           }\n        });\n   }\n   readyNestedList(event) {\n       this.nestedListView = event.detail.cmp;\n       this.nestedListView.setStore(this.store);\n   }\n}\n\nwindow.nestedlist = new NestedListComponent();\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtNestedList } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = Ext.create('Ext.data.TreeStore', {\n        defaultRootProperty: 'items',\n        root: {\n            text: 'Groceries',\n            items: [{\n                text: 'Drinks',\n                items: [{\n                    text: 'Water',\n                    items: [{\n                        text: 'Sparkling',\n                        leaf: true\n                    }, {\n                        text: 'Still',\n                        leaf: true\n                    }]\n                }]\n            },{\n                text: 'Snacks',\n                items: [{\n                    text: 'Nuts',\n                    leaf: true\n                }, {\n                    text: 'Pretzels',\n                    leaf: true\n                }, {\n                    text: 'Wasabi Peas',\n                    leaf: true\n                }]\n            }]\n        }\n    });\n\n    render() {\n        return (\n            <ExtNestedList\n                displayField=\"text\"\n                store={this.store}\n                title=\"Groceries\"\n            />\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [`\n            `],\n    template: `\n             <ExtNestedList\n                [displayField]=\"'text'\"\n                [height]=\"'600px'\"\n                [store]=\"this.store\"\n                title=\"Groceries\"\n            ></ExtNestedList>\n            `\n})\nexport class AppComponent {\n    store = Ext.create('Ext.data.TreeStore', {\n        defaultRootProperty: 'items',\n        root: {\n            text: 'Groceries',\n            items: [{\n                text: 'Drinks',\n                items: [{\n                    text: 'Water',\n                    items: [{\n                        text: 'Sparkling',\n                        leaf: true\n                    }, {\n                        text: 'Still',\n                        leaf: true\n                    }]\n                }]\n            },{\n                text: 'Snacks',\n                items: [{\n                    text: 'Nuts',\n                    leaf: true\n                }, {\n                    text: 'Pretzels',\n                    leaf: true\n                }, {\n                    text: 'Wasabi Peas',\n                    leaf: true\n                }]\n            }]\n        }\n    });\n\n}\n```\n"
 },
 {
  "name": "Ext.dataview.pullrefresh.Bar",
  "xtype": "pullrefreshbar"
 },
 {
  "name": "Ext.dataview.pullrefresh.Spinner",
  "xtype": "pullrefreshspinner"
 },
 {
  "name": "Ext.dataview.SimpleListItem",
  "xtype": "simplelistitem",
  "text": "This component is the default data item used by {@link Ext.dataview.List}.\n\nThis component supports disclosure icons and generates the slimmest markup possible for\na list data item. It doesn't support container functionality like adding or docking\nitems. To enable those features, use {@link Ext.dataview.ListItem} instead:\n\n     {\n         xtype: 'list',\n         itemConfig: {\n             xtype: 'listitem'\n         }\n     }\n"
 },
 {
  "name": "Ext.dataview.SimpleListItem",
  "xtype": "simplelistitem",
  "text": "This component is the default data item used by {@link Ext.dataview.List}.\n\nThis component supports disclosure icons and generates the slimmest markup possible for\na list data item. It doesn't support container functionality like adding or docking\nitems. To enable those features, use {@link Ext.dataview.ListItem} instead:\n\n     {\n         xtype: 'list',\n         itemConfig: {\n             xtype: 'listitem'\n         }\n     }\n"
 },
 {
  "name": "Ext.Dialog",
  "xtype": "dialog",
  "text": "This class provides a convenient way to display a \"popup\" component to interact with\nthe user that is resizable, draggable and closable (similar to a browser popup window,\nbut contained in the normal Ext JS component tree). This means dialogs are not subject\nto the restrictions of browser popup windows, but provide similar modal experiences.\n\n     var dialog = Ext.create({\n         xtype: 'dialog',\n         title: 'Dialog',\n\n         maximizable: true,\n         html: 'Content<br>goes<br>here',\n\n         buttons: {\n             ok: function () {  // standard button (see below)\n                 dialog.destroy();\n             }\n         }\n     });\n\n     dialog.show();\n\nThe above use of `{@link #cfg!buttons buttons}` is a {@link Ext.Container#cfg!weighted} container.\nThis form allows the Ext JS config system to merge properties by aligning on `{@link #cfg!itemId itemId}`\nas the object keys (`'ok'` in this case). This merging capability enables the use of\n`{@link #cfg!standardButtons standardButtons}` but is also a powerful technique for leveraging class inheritance\nin your views.\n\n## Standard Buttons\n\nThe main advantage of using the `{@link #cfg!buttons buttons}` config is the availability of\n{@link Ext.Panel#cfg!standardButtons}. The `{@link #cfg!standardButtons standardButtons}` config\ndescribes many common buttons (such as `ok` above) and provides their `text` as well\nas the proper, platform-specific ordering.\n\nCustom buttons can be mixed with standard buttons or can fully replace them:\n\n     buttons: {\n         ok: 'onOK',\n\n         verify: {\n             text: 'Verify',\n             handler: 'onVerify',\n             weight: 200\n         }\n     }\n\nWhen combined, custom buttons are presented first. In the above, the `{@link #cfg!weight weight}` config\nis used to order the Verify button after the OK button. The weights assigned to the\n{@link Ext.Panel#cfg!standardButtons} vary by platform but `200` is\nbeyond their range.\n\n## Handling ESC and Close\n\nMany dialogs have a `Cancel` button (or equivalent) that closes the dialog without\ntaking action. In some cases this action is first confirmed to avoid data loss.\n\nA common problem when implementing dialogs is the presence of these other two means to\ndismiss the dialog since they often bypass the button handler that is expected to be\nused to achieve an orderly shutdown.\n\nWith `{@link Ext.Dialog}`, both the ESC key and `{@link #method!close close}` tool handler call the `{@link #method!close close}` method\nto dismiss the dialog. The `{@link #method!close close}` method (and its `{@link #cfg!closeAction closeAction}` config) are enhanced\nversions of the implementation in `{@link Ext.Panel}`.\n\nThe default dismiss sequence uses the `{@link #cfg!dismissAction dismissAction}` config to identify the candidate\n`{@link #cfg!buttons buttons}`.  The most common match here is the `Cancel` button. If there is a matching\nbutton then that button's `handler` is called just as if the user had clicked on it\ninstead.\n\nThe end result is that when using `{@link #cfg!standardButtons standardButtons}` such as `cancel` or `{@link #method!close close}`, you\nseldom need to worry about ESC or `{@link #method!close close}` tool inconsistency. The handler for your\nbutton will be called in all cases.\n\n### Custom Buttons and Options\n\nIf the dialog has custom buttons, the `{@link #cfg!dismissHandler dismissHandler}` config can be used to direct\n`{@link #method!close close}` to a suitable method. Ideally this would be the same method connected to the\ncorresponding button.\n\n     buttons: {\n         goAway: {\n             text: 'Go Away!',\n             handler: 'onGoAway'\n         }\n     },\n\n     dismissHandler: 'onGoAway'\n\nTo simply allow the `{@link #cfg!closeAction closeAction}` config to call `hide` or `destroy` methods for ESC\nand `{@link #method!close close}`, do the following:\n\n     dismissHandler: true\n\nThe {@link #method!close} will fire the {@link #event!beforeclose beforeclose}\nand {@link #event!close close} events in any case. Using the `{@link #cfg!closeAction closeAction}` approach\nexposes dialogs to this alternate shutdown sequence but can be enabled as above for\nsimple use cases.\n\n## Maximize / Restore\n\nThe ability to `maximize` (fill the viewport) with the dialog can be quite useful for\ncomplex popups. This can take two forms:\n\n - The `{@link #cfg!maximizable maximizable}` config to provide a {@link Ext.Tool} to `maximize` and also\n  to `restore` the dialog.\n - The `{@link #cfg!maximized maximized}` config to control the current state.\n\nThe `{@link #cfg!maximized maximized}` config can be used directly if the `{@link #cfg!maximizeTool maximizeTool}` is not desired. In\nother words, the ability to control the `{@link #cfg!maximized maximized}` config is not dependent on whether\n`{@link #cfg!maximizable maximizable}` is set or not.\n\n### Note\nThis class is analogous to the Ext JS Classic Toolkit's 'Ext.window.Window' class. This\nclass has those names (`{@link Ext.Window}` and `{@link Ext.window.Window}`) as alternate class names\nand the `window` xtype for compatibility sake.\n"
 },
 {
  "name": "Ext.Dialog",
  "xtype": "window",
  "text": "This class provides a convenient way to display a \"popup\" component to interact with\nthe user that is resizable, draggable and closable (similar to a browser popup window,\nbut contained in the normal Ext JS component tree). This means dialogs are not subject\nto the restrictions of browser popup windows, but provide similar modal experiences.\n\n     var dialog = Ext.create({\n         xtype: 'dialog',\n         title: 'Dialog',\n\n         maximizable: true,\n         html: 'Content<br>goes<br>here',\n\n         buttons: {\n             ok: function () {  // standard button (see below)\n                 dialog.destroy();\n             }\n         }\n     });\n\n     dialog.show();\n\nThe above use of `{@link #cfg!buttons buttons}` is a {@link Ext.Container#cfg!weighted} container.\nThis form allows the Ext JS config system to merge properties by aligning on `{@link #cfg!itemId itemId}`\nas the object keys (`'ok'` in this case). This merging capability enables the use of\n`{@link #cfg!standardButtons standardButtons}` but is also a powerful technique for leveraging class inheritance\nin your views.\n\n## Standard Buttons\n\nThe main advantage of using the `{@link #cfg!buttons buttons}` config is the availability of\n{@link Ext.Panel#cfg!standardButtons}. The `{@link #cfg!standardButtons standardButtons}` config\ndescribes many common buttons (such as `ok` above) and provides their `text` as well\nas the proper, platform-specific ordering.\n\nCustom buttons can be mixed with standard buttons or can fully replace them:\n\n     buttons: {\n         ok: 'onOK',\n\n         verify: {\n             text: 'Verify',\n             handler: 'onVerify',\n             weight: 200\n         }\n     }\n\nWhen combined, custom buttons are presented first. In the above, the `{@link #cfg!weight weight}` config\nis used to order the Verify button after the OK button. The weights assigned to the\n{@link Ext.Panel#cfg!standardButtons} vary by platform but `200` is\nbeyond their range.\n\n## Handling ESC and Close\n\nMany dialogs have a `Cancel` button (or equivalent) that closes the dialog without\ntaking action. In some cases this action is first confirmed to avoid data loss.\n\nA common problem when implementing dialogs is the presence of these other two means to\ndismiss the dialog since they often bypass the button handler that is expected to be\nused to achieve an orderly shutdown.\n\nWith `{@link Ext.Dialog}`, both the ESC key and `{@link #method!close close}` tool handler call the `{@link #method!close close}` method\nto dismiss the dialog. The `{@link #method!close close}` method (and its `{@link #cfg!closeAction closeAction}` config) are enhanced\nversions of the implementation in `{@link Ext.Panel}`.\n\nThe default dismiss sequence uses the `{@link #cfg!dismissAction dismissAction}` config to identify the candidate\n`{@link #cfg!buttons buttons}`.  The most common match here is the `Cancel` button. If there is a matching\nbutton then that button's `handler` is called just as if the user had clicked on it\ninstead.\n\nThe end result is that when using `{@link #cfg!standardButtons standardButtons}` such as `cancel` or `{@link #method!close close}`, you\nseldom need to worry about ESC or `{@link #method!close close}` tool inconsistency. The handler for your\nbutton will be called in all cases.\n\n### Custom Buttons and Options\n\nIf the dialog has custom buttons, the `{@link #cfg!dismissHandler dismissHandler}` config can be used to direct\n`{@link #method!close close}` to a suitable method. Ideally this would be the same method connected to the\ncorresponding button.\n\n     buttons: {\n         goAway: {\n             text: 'Go Away!',\n             handler: 'onGoAway'\n         }\n     },\n\n     dismissHandler: 'onGoAway'\n\nTo simply allow the `{@link #cfg!closeAction closeAction}` config to call `hide` or `destroy` methods for ESC\nand `{@link #method!close close}`, do the following:\n\n     dismissHandler: true\n\nThe {@link #method!close} will fire the {@link #event!beforeclose beforeclose}\nand {@link #event!close close} events in any case. Using the `{@link #cfg!closeAction closeAction}` approach\nexposes dialogs to this alternate shutdown sequence but can be enabled as above for\nsimple use cases.\n\n## Maximize / Restore\n\nThe ability to `maximize` (fill the viewport) with the dialog can be quite useful for\ncomplex popups. This can take two forms:\n\n - The `{@link #cfg!maximizable maximizable}` config to provide a {@link Ext.Tool} to `maximize` and also\n  to `restore` the dialog.\n - The `{@link #cfg!maximized maximized}` config to control the current state.\n\nThe `{@link #cfg!maximized maximized}` config can be used directly if the `{@link #cfg!maximizeTool maximizeTool}` is not desired. In\nother words, the ability to control the `{@link #cfg!maximized maximized}` config is not dependent on whether\n`{@link #cfg!maximizable maximizable}` is set or not.\n\n### Note\nThis class is analogous to the Ext JS Classic Toolkit's 'Ext.window.Window' class. This\nclass has those names (`{@link Ext.Window}` and `{@link Ext.window.Window}`) as alternate class names\nand the `window` xtype for compatibility sake.\n"
 },
 {
  "name": "Ext.Dialog",
  "xtype": "dialog",
  "text": "This class provides a convenient way to display a \"popup\" component to interact with\nthe user that is resizable, draggable and closable (similar to a browser popup window,\nbut contained in the normal Ext JS component tree). This means dialogs are not subject\nto the restrictions of browser popup windows, but provide similar modal experiences.\n\n     var dialog = Ext.create({\n         xtype: 'dialog',\n         title: 'Dialog',\n\n         maximizable: true,\n         html: 'Content<br>goes<br>here',\n\n         buttons: {\n             ok: function () {  // standard button (see below)\n                 dialog.destroy();\n             }\n         }\n     });\n\n     dialog.show();\n\nThe above use of `{@link #cfg!buttons buttons}` is a {@link Ext.Container#cfg!weighted} container.\nThis form allows the Ext JS config system to merge properties by aligning on `{@link #cfg!itemId itemId}`\nas the object keys (`'ok'` in this case). This merging capability enables the use of\n`{@link #cfg!standardButtons standardButtons}` but is also a powerful technique for leveraging class inheritance\nin your views.\n\n## Standard Buttons\n\nThe main advantage of using the `{@link #cfg!buttons buttons}` config is the availability of\n{@link Ext.Panel#cfg!standardButtons}. The `{@link #cfg!standardButtons standardButtons}` config\ndescribes many common buttons (such as `ok` above) and provides their `text` as well\nas the proper, platform-specific ordering.\n\nCustom buttons can be mixed with standard buttons or can fully replace them:\n\n     buttons: {\n         ok: 'onOK',\n\n         verify: {\n             text: 'Verify',\n             handler: 'onVerify',\n             weight: 200\n         }\n     }\n\nWhen combined, custom buttons are presented first. In the above, the `{@link #cfg!weight weight}` config\nis used to order the Verify button after the OK button. The weights assigned to the\n{@link Ext.Panel#cfg!standardButtons} vary by platform but `200` is\nbeyond their range.\n\n## Handling ESC and Close\n\nMany dialogs have a `Cancel` button (or equivalent) that closes the dialog without\ntaking action. In some cases this action is first confirmed to avoid data loss.\n\nA common problem when implementing dialogs is the presence of these other two means to\ndismiss the dialog since they often bypass the button handler that is expected to be\nused to achieve an orderly shutdown.\n\nWith `{@link Ext.Dialog}`, both the ESC key and `{@link #method!close close}` tool handler call the `{@link #method!close close}` method\nto dismiss the dialog. The `{@link #method!close close}` method (and its `{@link #cfg!closeAction closeAction}` config) are enhanced\nversions of the implementation in `{@link Ext.Panel}`.\n\nThe default dismiss sequence uses the `{@link #cfg!dismissAction dismissAction}` config to identify the candidate\n`{@link #cfg!buttons buttons}`.  The most common match here is the `Cancel` button. If there is a matching\nbutton then that button's `handler` is called just as if the user had clicked on it\ninstead.\n\nThe end result is that when using `{@link #cfg!standardButtons standardButtons}` such as `cancel` or `{@link #method!close close}`, you\nseldom need to worry about ESC or `{@link #method!close close}` tool inconsistency. The handler for your\nbutton will be called in all cases.\n\n### Custom Buttons and Options\n\nIf the dialog has custom buttons, the `{@link #cfg!dismissHandler dismissHandler}` config can be used to direct\n`{@link #method!close close}` to a suitable method. Ideally this would be the same method connected to the\ncorresponding button.\n\n     buttons: {\n         goAway: {\n             text: 'Go Away!',\n             handler: 'onGoAway'\n         }\n     },\n\n     dismissHandler: 'onGoAway'\n\nTo simply allow the `{@link #cfg!closeAction closeAction}` config to call `hide` or `destroy` methods for ESC\nand `{@link #method!close close}`, do the following:\n\n     dismissHandler: true\n\nThe {@link #method!close} will fire the {@link #event!beforeclose beforeclose}\nand {@link #event!close close} events in any case. Using the `{@link #cfg!closeAction closeAction}` approach\nexposes dialogs to this alternate shutdown sequence but can be enabled as above for\nsimple use cases.\n\n## Maximize / Restore\n\nThe ability to `maximize` (fill the viewport) with the dialog can be quite useful for\ncomplex popups. This can take two forms:\n\n - The `{@link #cfg!maximizable maximizable}` config to provide a {@link Ext.Tool} to `maximize` and also\n  to `restore` the dialog.\n - The `{@link #cfg!maximized maximized}` config to control the current state.\n\nThe `{@link #cfg!maximized maximized}` config can be used directly if the `{@link #cfg!maximizeTool maximizeTool}` is not desired. In\nother words, the ability to control the `{@link #cfg!maximized maximized}` config is not dependent on whether\n`{@link #cfg!maximizable maximizable}` is set or not.\n\n### Note\nThis class is analogous to the Ext JS Classic Toolkit's 'Ext.window.Window' class. This\nclass has those names (`{@link Ext.Window}` and `{@link Ext.window.Window}`) as alternate class names\nand the `window` xtype for compatibility sake.\n"
 },
 {
  "name": "Ext.Dialog",
  "xtype": "window",
  "text": "This class provides a convenient way to display a \"popup\" component to interact with\nthe user that is resizable, draggable and closable (similar to a browser popup window,\nbut contained in the normal Ext JS component tree). This means dialogs are not subject\nto the restrictions of browser popup windows, but provide similar modal experiences.\n\n     var dialog = Ext.create({\n         xtype: 'dialog',\n         title: 'Dialog',\n\n         maximizable: true,\n         html: 'Content<br>goes<br>here',\n\n         buttons: {\n             ok: function () {  // standard button (see below)\n                 dialog.destroy();\n             }\n         }\n     });\n\n     dialog.show();\n\nThe above use of `{@link #cfg!buttons buttons}` is a {@link Ext.Container#cfg!weighted} container.\nThis form allows the Ext JS config system to merge properties by aligning on `{@link #cfg!itemId itemId}`\nas the object keys (`'ok'` in this case). This merging capability enables the use of\n`{@link #cfg!standardButtons standardButtons}` but is also a powerful technique for leveraging class inheritance\nin your views.\n\n## Standard Buttons\n\nThe main advantage of using the `{@link #cfg!buttons buttons}` config is the availability of\n{@link Ext.Panel#cfg!standardButtons}. The `{@link #cfg!standardButtons standardButtons}` config\ndescribes many common buttons (such as `ok` above) and provides their `text` as well\nas the proper, platform-specific ordering.\n\nCustom buttons can be mixed with standard buttons or can fully replace them:\n\n     buttons: {\n         ok: 'onOK',\n\n         verify: {\n             text: 'Verify',\n             handler: 'onVerify',\n             weight: 200\n         }\n     }\n\nWhen combined, custom buttons are presented first. In the above, the `{@link #cfg!weight weight}` config\nis used to order the Verify button after the OK button. The weights assigned to the\n{@link Ext.Panel#cfg!standardButtons} vary by platform but `200` is\nbeyond their range.\n\n## Handling ESC and Close\n\nMany dialogs have a `Cancel` button (or equivalent) that closes the dialog without\ntaking action. In some cases this action is first confirmed to avoid data loss.\n\nA common problem when implementing dialogs is the presence of these other two means to\ndismiss the dialog since they often bypass the button handler that is expected to be\nused to achieve an orderly shutdown.\n\nWith `{@link Ext.Dialog}`, both the ESC key and `{@link #method!close close}` tool handler call the `{@link #method!close close}` method\nto dismiss the dialog. The `{@link #method!close close}` method (and its `{@link #cfg!closeAction closeAction}` config) are enhanced\nversions of the implementation in `{@link Ext.Panel}`.\n\nThe default dismiss sequence uses the `{@link #cfg!dismissAction dismissAction}` config to identify the candidate\n`{@link #cfg!buttons buttons}`.  The most common match here is the `Cancel` button. If there is a matching\nbutton then that button's `handler` is called just as if the user had clicked on it\ninstead.\n\nThe end result is that when using `{@link #cfg!standardButtons standardButtons}` such as `cancel` or `{@link #method!close close}`, you\nseldom need to worry about ESC or `{@link #method!close close}` tool inconsistency. The handler for your\nbutton will be called in all cases.\n\n### Custom Buttons and Options\n\nIf the dialog has custom buttons, the `{@link #cfg!dismissHandler dismissHandler}` config can be used to direct\n`{@link #method!close close}` to a suitable method. Ideally this would be the same method connected to the\ncorresponding button.\n\n     buttons: {\n         goAway: {\n             text: 'Go Away!',\n             handler: 'onGoAway'\n         }\n     },\n\n     dismissHandler: 'onGoAway'\n\nTo simply allow the `{@link #cfg!closeAction closeAction}` config to call `hide` or `destroy` methods for ESC\nand `{@link #method!close close}`, do the following:\n\n     dismissHandler: true\n\nThe {@link #method!close} will fire the {@link #event!beforeclose beforeclose}\nand {@link #event!close close} events in any case. Using the `{@link #cfg!closeAction closeAction}` approach\nexposes dialogs to this alternate shutdown sequence but can be enabled as above for\nsimple use cases.\n\n## Maximize / Restore\n\nThe ability to `maximize` (fill the viewport) with the dialog can be quite useful for\ncomplex popups. This can take two forms:\n\n - The `{@link #cfg!maximizable maximizable}` config to provide a {@link Ext.Tool} to `maximize` and also\n  to `restore` the dialog.\n - The `{@link #cfg!maximized maximized}` config to control the current state.\n\nThe `{@link #cfg!maximized maximized}` config can be used directly if the `{@link #cfg!maximizeTool maximizeTool}` is not desired. In\nother words, the ability to control the `{@link #cfg!maximized maximized}` config is not dependent on whether\n`{@link #cfg!maximizable maximizable}` is set or not.\n\n### Note\nThis class is analogous to the Ext JS Classic Toolkit's 'Ext.window.Window' class. This\nclass has those names (`{@link Ext.Window}` and `{@link Ext.window.Window}`) as alternate class names\nand the `window` xtype for compatibility sake.\n"
 },
 {
  "name": "Ext.Dialog",
  "xtype": "dialog",
  "text": "This class provides a convenient way to display a \"popup\" component to interact with\nthe user that is resizable, draggable and closable (similar to a browser popup window,\nbut contained in the normal Ext JS component tree). This means dialogs are not subject\nto the restrictions of browser popup windows, but provide similar modal experiences.\n\n     var dialog = Ext.create({\n         xtype: 'dialog',\n         title: 'Dialog',\n\n         maximizable: true,\n         html: 'Content<br>goes<br>here',\n\n         buttons: {\n             ok: function () {  // standard button (see below)\n                 dialog.destroy();\n             }\n         }\n     });\n\n     dialog.show();\n\nThe above use of `{@link #cfg!buttons buttons}` is a {@link Ext.Container#cfg!weighted} container.\nThis form allows the Ext JS config system to merge properties by aligning on `{@link #cfg!itemId itemId}`\nas the object keys (`'ok'` in this case). This merging capability enables the use of\n`{@link #cfg!standardButtons standardButtons}` but is also a powerful technique for leveraging class inheritance\nin your views.\n\n## Standard Buttons\n\nThe main advantage of using the `{@link #cfg!buttons buttons}` config is the availability of\n{@link Ext.Panel#cfg!standardButtons}. The `{@link #cfg!standardButtons standardButtons}` config\ndescribes many common buttons (such as `ok` above) and provides their `text` as well\nas the proper, platform-specific ordering.\n\nCustom buttons can be mixed with standard buttons or can fully replace them:\n\n     buttons: {\n         ok: 'onOK',\n\n         verify: {\n             text: 'Verify',\n             handler: 'onVerify',\n             weight: 200\n         }\n     }\n\nWhen combined, custom buttons are presented first. In the above, the `{@link #cfg!weight weight}` config\nis used to order the Verify button after the OK button. The weights assigned to the\n{@link Ext.Panel#cfg!standardButtons} vary by platform but `200` is\nbeyond their range.\n\n## Handling ESC and Close\n\nMany dialogs have a `Cancel` button (or equivalent) that closes the dialog without\ntaking action. In some cases this action is first confirmed to avoid data loss.\n\nA common problem when implementing dialogs is the presence of these other two means to\ndismiss the dialog since they often bypass the button handler that is expected to be\nused to achieve an orderly shutdown.\n\nWith `{@link Ext.Dialog}`, both the ESC key and `{@link #method!close close}` tool handler call the `{@link #method!close close}` method\nto dismiss the dialog. The `{@link #method!close close}` method (and its `{@link #cfg!closeAction closeAction}` config) are enhanced\nversions of the implementation in `{@link Ext.Panel}`.\n\nThe default dismiss sequence uses the `{@link #cfg!dismissAction dismissAction}` config to identify the candidate\n`{@link #cfg!buttons buttons}`.  The most common match here is the `Cancel` button. If there is a matching\nbutton then that button's `handler` is called just as if the user had clicked on it\ninstead.\n\nThe end result is that when using `{@link #cfg!standardButtons standardButtons}` such as `cancel` or `{@link #method!close close}`, you\nseldom need to worry about ESC or `{@link #method!close close}` tool inconsistency. The handler for your\nbutton will be called in all cases.\n\n### Custom Buttons and Options\n\nIf the dialog has custom buttons, the `{@link #cfg!dismissHandler dismissHandler}` config can be used to direct\n`{@link #method!close close}` to a suitable method. Ideally this would be the same method connected to the\ncorresponding button.\n\n     buttons: {\n         goAway: {\n             text: 'Go Away!',\n             handler: 'onGoAway'\n         }\n     },\n\n     dismissHandler: 'onGoAway'\n\nTo simply allow the `{@link #cfg!closeAction closeAction}` config to call `hide` or `destroy` methods for ESC\nand `{@link #method!close close}`, do the following:\n\n     dismissHandler: true\n\nThe {@link #method!close} will fire the {@link #event!beforeclose beforeclose}\nand {@link #event!close close} events in any case. Using the `{@link #cfg!closeAction closeAction}` approach\nexposes dialogs to this alternate shutdown sequence but can be enabled as above for\nsimple use cases.\n\n## Maximize / Restore\n\nThe ability to `maximize` (fill the viewport) with the dialog can be quite useful for\ncomplex popups. This can take two forms:\n\n - The `{@link #cfg!maximizable maximizable}` config to provide a {@link Ext.Tool} to `maximize` and also\n  to `restore` the dialog.\n - The `{@link #cfg!maximized maximized}` config to control the current state.\n\nThe `{@link #cfg!maximized maximized}` config can be used directly if the `{@link #cfg!maximizeTool maximizeTool}` is not desired. In\nother words, the ability to control the `{@link #cfg!maximized maximized}` config is not dependent on whether\n`{@link #cfg!maximizable maximizable}` is set or not.\n\n### Note\nThis class is analogous to the Ext JS Classic Toolkit's 'Ext.window.Window' class. This\nclass has those names (`{@link Ext.Window}` and `{@link Ext.window.Window}`) as alternate class names\nand the `window` xtype for compatibility sake.\n"
 },
 {
  "name": "Ext.Dialog",
  "xtype": "window",
  "text": "This class provides a convenient way to display a \"popup\" component to interact with\nthe user that is resizable, draggable and closable (similar to a browser popup window,\nbut contained in the normal Ext JS component tree). This means dialogs are not subject\nto the restrictions of browser popup windows, but provide similar modal experiences.\n\n     var dialog = Ext.create({\n         xtype: 'dialog',\n         title: 'Dialog',\n\n         maximizable: true,\n         html: 'Content<br>goes<br>here',\n\n         buttons: {\n             ok: function () {  // standard button (see below)\n                 dialog.destroy();\n             }\n         }\n     });\n\n     dialog.show();\n\nThe above use of `{@link #cfg!buttons buttons}` is a {@link Ext.Container#cfg!weighted} container.\nThis form allows the Ext JS config system to merge properties by aligning on `{@link #cfg!itemId itemId}`\nas the object keys (`'ok'` in this case). This merging capability enables the use of\n`{@link #cfg!standardButtons standardButtons}` but is also a powerful technique for leveraging class inheritance\nin your views.\n\n## Standard Buttons\n\nThe main advantage of using the `{@link #cfg!buttons buttons}` config is the availability of\n{@link Ext.Panel#cfg!standardButtons}. The `{@link #cfg!standardButtons standardButtons}` config\ndescribes many common buttons (such as `ok` above) and provides their `text` as well\nas the proper, platform-specific ordering.\n\nCustom buttons can be mixed with standard buttons or can fully replace them:\n\n     buttons: {\n         ok: 'onOK',\n\n         verify: {\n             text: 'Verify',\n             handler: 'onVerify',\n             weight: 200\n         }\n     }\n\nWhen combined, custom buttons are presented first. In the above, the `{@link #cfg!weight weight}` config\nis used to order the Verify button after the OK button. The weights assigned to the\n{@link Ext.Panel#cfg!standardButtons} vary by platform but `200` is\nbeyond their range.\n\n## Handling ESC and Close\n\nMany dialogs have a `Cancel` button (or equivalent) that closes the dialog without\ntaking action. In some cases this action is first confirmed to avoid data loss.\n\nA common problem when implementing dialogs is the presence of these other two means to\ndismiss the dialog since they often bypass the button handler that is expected to be\nused to achieve an orderly shutdown.\n\nWith `{@link Ext.Dialog}`, both the ESC key and `{@link #method!close close}` tool handler call the `{@link #method!close close}` method\nto dismiss the dialog. The `{@link #method!close close}` method (and its `{@link #cfg!closeAction closeAction}` config) are enhanced\nversions of the implementation in `{@link Ext.Panel}`.\n\nThe default dismiss sequence uses the `{@link #cfg!dismissAction dismissAction}` config to identify the candidate\n`{@link #cfg!buttons buttons}`.  The most common match here is the `Cancel` button. If there is a matching\nbutton then that button's `handler` is called just as if the user had clicked on it\ninstead.\n\nThe end result is that when using `{@link #cfg!standardButtons standardButtons}` such as `cancel` or `{@link #method!close close}`, you\nseldom need to worry about ESC or `{@link #method!close close}` tool inconsistency. The handler for your\nbutton will be called in all cases.\n\n### Custom Buttons and Options\n\nIf the dialog has custom buttons, the `{@link #cfg!dismissHandler dismissHandler}` config can be used to direct\n`{@link #method!close close}` to a suitable method. Ideally this would be the same method connected to the\ncorresponding button.\n\n     buttons: {\n         goAway: {\n             text: 'Go Away!',\n             handler: 'onGoAway'\n         }\n     },\n\n     dismissHandler: 'onGoAway'\n\nTo simply allow the `{@link #cfg!closeAction closeAction}` config to call `hide` or `destroy` methods for ESC\nand `{@link #method!close close}`, do the following:\n\n     dismissHandler: true\n\nThe {@link #method!close} will fire the {@link #event!beforeclose beforeclose}\nand {@link #event!close close} events in any case. Using the `{@link #cfg!closeAction closeAction}` approach\nexposes dialogs to this alternate shutdown sequence but can be enabled as above for\nsimple use cases.\n\n## Maximize / Restore\n\nThe ability to `maximize` (fill the viewport) with the dialog can be quite useful for\ncomplex popups. This can take two forms:\n\n - The `{@link #cfg!maximizable maximizable}` config to provide a {@link Ext.Tool} to `maximize` and also\n  to `restore` the dialog.\n - The `{@link #cfg!maximized maximized}` config to control the current state.\n\nThe `{@link #cfg!maximized maximized}` config can be used directly if the `{@link #cfg!maximizeTool maximizeTool}` is not desired. In\nother words, the ability to control the `{@link #cfg!maximized maximized}` config is not dependent on whether\n`{@link #cfg!maximizable maximizable}` is set or not.\n\n### Note\nThis class is analogous to the Ext JS Classic Toolkit's 'Ext.window.Window' class. This\nclass has those names (`{@link Ext.Window}` and `{@link Ext.window.Window}`) as alternate class names\nand the `window` xtype for compatibility sake.\n"
 },
 {
  "name": "Ext.draw.Container",
  "xtype": "draw",
  "text": "The container that holds and manages instances of the {@link Ext.draw.Surface}\nin which {@link Ext.draw.sprite.Sprite} are rendered.  Draw containers are\nused as the foundation for all of the chart classes but may also be created directly\nin order to create custom drawings.\n\n    @example\n    var drawContainer = Ext.create('Ext.draw.Container', {\n        renderTo: Ext.getBody(),\n        width:200,\n        height:200,\n        sprites: [{\n            type: 'circle',\n            fillStyle: '#79BB3F',\n            r: 100,\n            x: 100,\n            y: 100\n         }]\n    });\n\n    // Uncomment to trigger a download of the painted circle.\n    // drawContainer.download({\n    //     filename: 'Circle',\n    //     url: 'http://svg.sencha.io' // Default server the image data is sent to.\n    // });\n\nIn the previous example we created a draw container and configured it with a single\nsprite.  The *type* of the sprite is {@link Ext.draw.sprite.Circle}, so if you\nrun this code you'll see a green circle.\n\nYou can attach sprite event listeners to the draw container with the help of the\n{@link Ext.draw.plugin.SpriteEvents} plugin.\n\nFor more information on sprites, the core elements added to a draw container's\nsurface, refer to the Ext.draw.sprite.Sprite documentation.\n\nFor more information on surfaces, the interface owned by the draw container used to\nmanage all sprites, see the Ext.draw.Surface documentation.\n"
 },
 {
  "name": "Ext.draw.Container",
  "xtype": "draw",
  "text": "The container that holds and manages instances of the {@link Ext.draw.Surface}\nin which {@link Ext.draw.sprite.Sprite} are rendered.  Draw containers are\nused as the foundation for all of the chart classes but may also be created directly\nin order to create custom drawings.\n\n    @example\n    var drawContainer = Ext.create('Ext.draw.Container', {\n        renderTo: Ext.getBody(),\n        width:200,\n        height:200,\n        sprites: [{\n            type: 'circle',\n            fillStyle: '#79BB3F',\n            r: 100,\n            x: 100,\n            y: 100\n         }]\n    });\n\n    // Uncomment to trigger a download of the painted circle.\n    // drawContainer.download({\n    //     filename: 'Circle',\n    //     url: 'http://svg.sencha.io' // Default server the image data is sent to.\n    // });\n\nIn the previous example we created a draw container and configured it with a single\nsprite.  The *type* of the sprite is {@link Ext.draw.sprite.Circle}, so if you\nrun this code you'll see a green circle.\n\nYou can attach sprite event listeners to the draw container with the help of the\n{@link Ext.draw.plugin.SpriteEvents} plugin.\n\nFor more information on sprites, the core elements added to a draw container's\nsurface, refer to the Ext.draw.sprite.Sprite documentation.\n\nFor more information on surfaces, the interface owned by the draw container used to\nmanage all sprites, see the Ext.draw.Surface documentation.\n"
 },
 {
  "name": "Ext.draw.Surface",
  "xtype": "surface",
  "text": "A surface is an interface to render {@link Ext.draw.sprite.Sprite} inside a\n{@link Ext.draw.Container}.  The surface API has methods to render\nsprites, get sprite bounding boxes (dimensions), add sprites to the underlying DOM,\nand more.\n\nA surface is automatically created when a draw container is created.  By default,\nthis will be a surface with an `{@link #cfg!id id}` of \"main\" and will manage all sprites in the draw\ncontainer (unless the sprite configs specify a unique surface \"id\").\n\n    @example\n    Ext.create({\n        xtype: 'draw',\n        renderTo: document.body,\n        width: 400,\n        height: 400,\n        sprites: [{\n            type: 'rect',\n            surface: 'anim',  // a surface with id \"anim\" will be created automatically\n            x: 50,\n            y: 50,\n            width: 100,\n            height: 100,\n            fillStyle: '#1F6D91'\n        }]\n    });\n\nThe ability to have multiple surfaces is useful for performance (and battery life)\nreasons. Because changes to sprite attributes cause the whole surface (and all\nsprites in it) to re-render, it makes sense to group sprites by surface, so changes\nto one group of sprites will only trigger the surface they are in to re-render.\n\nOne of the more useful methods is the {@link #method!add #add} method used to add sprites to the\nsurface:\n\n    @example\n    var drawCt = Ext.create({\n        xtype: 'draw',\n        renderTo: document.body,\n        width: 400,\n        height: 400\n    });\n\n    // If the surface name is not specified then 'main' will be used\n    var surface = drawCt.getSurface();\n\n    surface.add({\n        type: 'rect',\n        x: 50,\n        y: 50,\n        width: 100,\n        height: 100,\n        fillStyle: '#1F6D91'\n    });\n\n    surface.renderFrame();\n\n**Note:** Changes to the sprites on a surface will be not be reflected in the DOM\nuntil you call the surface's {@link Ext.draw.Surface#method!renderFrame renderFrame}\nmethod.  This must be done after adding, removing, or modifying sprites in order to\nsee the changes on-screen.\n"
 },
 {
  "name": "Ext.Editor",
  "xtype": "editor",
  "text": "The Editor class is used to provide inline editing for elements on the page. The editor\nis backed by a {@link Ext.field.Field} that will be displayed to edit the underlying content.\nThe editor is a floating Component, when the editor is shown it is automatically aligned to\ndisplay over the top of the bound element it is editing. The Editor contains several options\nfor how to handle key presses:\n\n- {@link #cfg!completeOnEnter #completeOnEnter}\n- {@link #cfg!cancelOnEsc #cancelOnEsc}\n- {@link #cfg!swallowKeys #swallowKeys}\n\nIt also has options for how to use the value once the editor has been activated:\n\n- {@link #cfg!revertInvalid #revertInvalid}\n- {@link #cfg!ignoreNoChange #ignoreNoChange}\n- {@link #cfg!updateEl #updateEl}\n\nSample usage:\n\n```javascript\n@example({ framework: 'extjs' })\nvar form = Ext.create('Ext.form.Panel', {\n    renderTo: Ext.getBody(),\n    width: 380,\n    height: 400,\n    title: 'User Details',\n    bodyPadding: 10,\n    items: [{\n        html: 'Double-Click on the header title, this, or the field label to edit',\n        height:30\n    },{\n        label: 'First Name',\n        name: 'firstname',\n        xtype: 'textfield'\n    }]\n});\n\nvar editor = new Ext.Editor({\n    // update the innerHTML of the bound element\n    // when editing completes\n    updateEl: true,\n    alignment: 'l-l',\n    autoSize: {\n        width: 'boundEl'\n    },\n    field: {\n        xtype: 'textfield'\n    }\n});\n\nform.header.getTitle().textEl.on('dblclick', function(e, t) {\n    editor.startEdit(t);\n});\n\nform.getTargetEl().on('dblclick', function(e, t) {\n    editor.startEdit(t);\n    // Manually focus, since clicking on the label will focus the text field\n    editor.getField().focus(50, true);\n});\n\n```\n{@img Ext.Editor/Ext.Editor.png Ext.Editor component}\n"
 },
 {
  "name": "Ext.field.Checkbox",
  "xtype": "checkbox",
  "text": " The checkbox field is an enhanced version of the native browser checkbox and is\n great for enabling your user to choose one or more items from a set (for example\n choosing toppings for a pizza order). It works like any other\n {@link Ext.field.Field} and is usually found in the context of a form:\n\n ## Example\n\n ```javascript\n @example({ framework: 'extjs' })\n var form = Ext.create('Ext.form.Panel', {\n     fullscreen: true,\n     items: [\n         {\n             xtype: 'checkboxfield',\n             name : 'tomato',\n             label: 'Tomato',\n             value: 'tomato',\n             checked: true\n         },\n         {\n             xtype: 'checkboxfield',\n             name : 'salami',\n             label: 'Salami'\n         },\n         {\n             xtype: 'toolbar',\n             docked: 'bottom',\n             items: [\n                 { xtype: 'spacer' },\n                 {\n                     text: 'getValues',\n                     handler: function() {\n                         var form = Ext.ComponentQuery.query('formpanel')[0],\n                             values = form.getValues();\n\n                         Ext.Msg.alert(null,\n                             \"Tomato: \" + ((values.tomato) ? \"yes\" : \"no\") +\n                             \"<br />Salami: \" + ((values.salami) ? \"yes\" : \"no\")\n                         );\n                     }\n                 },\n                 { xtype: 'spacer' }\n             ]\n         }\n     ]\n });\n\n\n The form above contains two check boxes - one for Tomato, one for Salami. We configured the\n Tomato checkbox to be checked immediately on load, and the Salami checkbox to be unchecked.\n We also specified an optional text {@link #cfg!value #value} that will be sent when we submit the form.\n We can get this value using the Form's {@link Ext.form.Panel#method!getValues getValues} function,\n or have it sent as part of the data that is sent when the form is submitted:\n\n     form.getValues(); //contains a key called 'tomato' if the Tomato field is still checked\n     form.submit(); //will send 'tomato' in the form submission data\n\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtFormPanel, ExtContainer, ExtCheckBoxField } from '@sencha/ext-react';\n export default class MyExample extends Component {\n     render() {\n         return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow layout={{type: 'vbox', align: 'left'}}>\n                    <ExtCheckBoxField boxLabel=\"Unchecked\"/>\n                    <ExtCheckBoxField boxLabel=\"Checked\" checked/>\n                    <ExtCheckBoxField boxLabel=\"Disabled\" disabled/>\n                    <ExtCheckBoxField boxLabel=\"Disabled (checked)\" disabled checked/>\n                </ExtFormPanel>\n            </ExtContainer>\n         )\n     }\n }\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n @Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n            <ExtContainer [shadow]=\"true\" [layout]='\"center\"'>\n                <ExtFormPanel [shadow] [layout]=\"{type: 'vbox', align: 'left'}\">\n                    <ExtCheckBoxField [boxLabel]='\"Unchecked\"'>\n                    </ExtCheckBoxField>\n                    <ExtCheckBoxField [boxLabel]='\"Checked\"' [checked]=\"true\">\n                    </ExtCheckBoxField>\n                    <ExtCheckBoxField [boxLabel]='\"Disabled\"' [disabled]=\"true\">\n                    </ExtCheckBoxField>\n                    <ExtCheckBoxField [boxLabel]='\"Disabled (checked)\"'\n                       [disabled]=\"true\" [checked]=\"true\">\n                    </ExtCheckBoxField>\n                </ExtFormPanel>\n            </ExtContainer>\n    `\n })\n export class AppComponent {}\n ```\n ```html\n  @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n  <ext-container layout=\"center\">\n    <ext-formpanel\n        shadow=\"true\"\n        layout='{\"type\": \"vbox\", \"align\": \"left\"}'\n     >\n        <ext-checkboxfield boxLabel=\"Unchecked\"></ext-checkboxfield>\n        <ext-checkboxfield boxLabel=\"Checked\" checked></ext-checkboxfield>\n        <ext-checkboxfield boxLabel=\"Disabled\" disabled></ext-checkboxfield>\n        <ext-checkboxfield boxLabel=\"Disabled (checked)\" disabled checked></ext-checkboxfield>\n    </ext-formpanel>\n  </ext-container>\n```\n```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-checkboxfield.component';\n\nexport default class CheckBoxFieldComponent {}\n```\n"
 },
 {
  "name": "Ext.field.Checkbox",
  "xtype": "checkboxfield",
  "text": " The checkbox field is an enhanced version of the native browser checkbox and is\n great for enabling your user to choose one or more items from a set (for example\n choosing toppings for a pizza order). It works like any other\n {@link Ext.field.Field} and is usually found in the context of a form:\n\n ## Example\n\n ```javascript\n @example({ framework: 'extjs' })\n var form = Ext.create('Ext.form.Panel', {\n     fullscreen: true,\n     items: [\n         {\n             xtype: 'checkboxfield',\n             name : 'tomato',\n             label: 'Tomato',\n             value: 'tomato',\n             checked: true\n         },\n         {\n             xtype: 'checkboxfield',\n             name : 'salami',\n             label: 'Salami'\n         },\n         {\n             xtype: 'toolbar',\n             docked: 'bottom',\n             items: [\n                 { xtype: 'spacer' },\n                 {\n                     text: 'getValues',\n                     handler: function() {\n                         var form = Ext.ComponentQuery.query('formpanel')[0],\n                             values = form.getValues();\n\n                         Ext.Msg.alert(null,\n                             \"Tomato: \" + ((values.tomato) ? \"yes\" : \"no\") +\n                             \"<br />Salami: \" + ((values.salami) ? \"yes\" : \"no\")\n                         );\n                     }\n                 },\n                 { xtype: 'spacer' }\n             ]\n         }\n     ]\n });\n\n\n The form above contains two check boxes - one for Tomato, one for Salami. We configured the\n Tomato checkbox to be checked immediately on load, and the Salami checkbox to be unchecked.\n We also specified an optional text {@link #cfg!value #value} that will be sent when we submit the form.\n We can get this value using the Form's {@link Ext.form.Panel#method!getValues getValues} function,\n or have it sent as part of the data that is sent when the form is submitted:\n\n     form.getValues(); //contains a key called 'tomato' if the Tomato field is still checked\n     form.submit(); //will send 'tomato' in the form submission data\n\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtFormPanel, ExtContainer, ExtCheckBoxField } from '@sencha/ext-react';\n export default class MyExample extends Component {\n     render() {\n         return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow layout={{type: 'vbox', align: 'left'}}>\n                    <ExtCheckBoxField boxLabel=\"Unchecked\"/>\n                    <ExtCheckBoxField boxLabel=\"Checked\" checked/>\n                    <ExtCheckBoxField boxLabel=\"Disabled\" disabled/>\n                    <ExtCheckBoxField boxLabel=\"Disabled (checked)\" disabled checked/>\n                </ExtFormPanel>\n            </ExtContainer>\n         )\n     }\n }\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n @Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n            <ExtContainer [shadow]=\"true\" [layout]='\"center\"'>\n                <ExtFormPanel [shadow] [layout]=\"{type: 'vbox', align: 'left'}\">\n                    <ExtCheckBoxField [boxLabel]='\"Unchecked\"'>\n                    </ExtCheckBoxField>\n                    <ExtCheckBoxField [boxLabel]='\"Checked\"' [checked]=\"true\">\n                    </ExtCheckBoxField>\n                    <ExtCheckBoxField [boxLabel]='\"Disabled\"' [disabled]=\"true\">\n                    </ExtCheckBoxField>\n                    <ExtCheckBoxField [boxLabel]='\"Disabled (checked)\"'\n                       [disabled]=\"true\" [checked]=\"true\">\n                    </ExtCheckBoxField>\n                </ExtFormPanel>\n            </ExtContainer>\n    `\n })\n export class AppComponent {}\n ```\n ```html\n  @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n  <ext-container layout=\"center\">\n    <ext-formpanel\n        shadow=\"true\"\n        layout='{\"type\": \"vbox\", \"align\": \"left\"}'\n     >\n        <ext-checkboxfield boxLabel=\"Unchecked\"></ext-checkboxfield>\n        <ext-checkboxfield boxLabel=\"Checked\" checked></ext-checkboxfield>\n        <ext-checkboxfield boxLabel=\"Disabled\" disabled></ext-checkboxfield>\n        <ext-checkboxfield boxLabel=\"Disabled (checked)\" disabled checked></ext-checkboxfield>\n    </ext-formpanel>\n  </ext-container>\n```\n```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-checkboxfield.component';\n\nexport default class CheckBoxFieldComponent {}\n```\n"
 },
 {
  "name": "Ext.field.Checkbox",
  "xtype": "checkbox",
  "text": " The checkbox field is an enhanced version of the native browser checkbox and is\n great for enabling your user to choose one or more items from a set (for example\n choosing toppings for a pizza order). It works like any other\n {@link Ext.field.Field} and is usually found in the context of a form:\n\n ## Example\n\n ```javascript\n @example({ framework: 'extjs' })\n var form = Ext.create('Ext.form.Panel', {\n     fullscreen: true,\n     items: [\n         {\n             xtype: 'checkboxfield',\n             name : 'tomato',\n             label: 'Tomato',\n             value: 'tomato',\n             checked: true\n         },\n         {\n             xtype: 'checkboxfield',\n             name : 'salami',\n             label: 'Salami'\n         },\n         {\n             xtype: 'toolbar',\n             docked: 'bottom',\n             items: [\n                 { xtype: 'spacer' },\n                 {\n                     text: 'getValues',\n                     handler: function() {\n                         var form = Ext.ComponentQuery.query('formpanel')[0],\n                             values = form.getValues();\n\n                         Ext.Msg.alert(null,\n                             \"Tomato: \" + ((values.tomato) ? \"yes\" : \"no\") +\n                             \"<br />Salami: \" + ((values.salami) ? \"yes\" : \"no\")\n                         );\n                     }\n                 },\n                 { xtype: 'spacer' }\n             ]\n         }\n     ]\n });\n\n\n The form above contains two check boxes - one for Tomato, one for Salami. We configured the\n Tomato checkbox to be checked immediately on load, and the Salami checkbox to be unchecked.\n We also specified an optional text {@link #cfg!value #value} that will be sent when we submit the form.\n We can get this value using the Form's {@link Ext.form.Panel#method!getValues getValues} function,\n or have it sent as part of the data that is sent when the form is submitted:\n\n     form.getValues(); //contains a key called 'tomato' if the Tomato field is still checked\n     form.submit(); //will send 'tomato' in the form submission data\n\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtFormPanel, ExtContainer, ExtCheckBoxField } from '@sencha/ext-react';\n export default class MyExample extends Component {\n     render() {\n         return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow layout={{type: 'vbox', align: 'left'}}>\n                    <ExtCheckBoxField boxLabel=\"Unchecked\"/>\n                    <ExtCheckBoxField boxLabel=\"Checked\" checked/>\n                    <ExtCheckBoxField boxLabel=\"Disabled\" disabled/>\n                    <ExtCheckBoxField boxLabel=\"Disabled (checked)\" disabled checked/>\n                </ExtFormPanel>\n            </ExtContainer>\n         )\n     }\n }\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n @Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n            <ExtContainer [shadow]=\"true\" [layout]='\"center\"'>\n                <ExtFormPanel [shadow] [layout]=\"{type: 'vbox', align: 'left'}\">\n                    <ExtCheckBoxField [boxLabel]='\"Unchecked\"'>\n                    </ExtCheckBoxField>\n                    <ExtCheckBoxField [boxLabel]='\"Checked\"' [checked]=\"true\">\n                    </ExtCheckBoxField>\n                    <ExtCheckBoxField [boxLabel]='\"Disabled\"' [disabled]=\"true\">\n                    </ExtCheckBoxField>\n                    <ExtCheckBoxField [boxLabel]='\"Disabled (checked)\"'\n                       [disabled]=\"true\" [checked]=\"true\">\n                    </ExtCheckBoxField>\n                </ExtFormPanel>\n            </ExtContainer>\n    `\n })\n export class AppComponent {}\n ```\n ```html\n  @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n  <ext-container layout=\"center\">\n    <ext-formpanel\n        shadow=\"true\"\n        layout='{\"type\": \"vbox\", \"align\": \"left\"}'\n     >\n        <ext-checkboxfield boxLabel=\"Unchecked\"></ext-checkboxfield>\n        <ext-checkboxfield boxLabel=\"Checked\" checked></ext-checkboxfield>\n        <ext-checkboxfield boxLabel=\"Disabled\" disabled></ext-checkboxfield>\n        <ext-checkboxfield boxLabel=\"Disabled (checked)\" disabled checked></ext-checkboxfield>\n    </ext-formpanel>\n  </ext-container>\n```\n```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-checkboxfield.component';\n\nexport default class CheckBoxFieldComponent {}\n```\n"
 },
 {
  "name": "Ext.field.Checkbox",
  "xtype": "checkboxfield",
  "text": " The checkbox field is an enhanced version of the native browser checkbox and is\n great for enabling your user to choose one or more items from a set (for example\n choosing toppings for a pizza order). It works like any other\n {@link Ext.field.Field} and is usually found in the context of a form:\n\n ## Example\n\n ```javascript\n @example({ framework: 'extjs' })\n var form = Ext.create('Ext.form.Panel', {\n     fullscreen: true,\n     items: [\n         {\n             xtype: 'checkboxfield',\n             name : 'tomato',\n             label: 'Tomato',\n             value: 'tomato',\n             checked: true\n         },\n         {\n             xtype: 'checkboxfield',\n             name : 'salami',\n             label: 'Salami'\n         },\n         {\n             xtype: 'toolbar',\n             docked: 'bottom',\n             items: [\n                 { xtype: 'spacer' },\n                 {\n                     text: 'getValues',\n                     handler: function() {\n                         var form = Ext.ComponentQuery.query('formpanel')[0],\n                             values = form.getValues();\n\n                         Ext.Msg.alert(null,\n                             \"Tomato: \" + ((values.tomato) ? \"yes\" : \"no\") +\n                             \"<br />Salami: \" + ((values.salami) ? \"yes\" : \"no\")\n                         );\n                     }\n                 },\n                 { xtype: 'spacer' }\n             ]\n         }\n     ]\n });\n\n\n The form above contains two check boxes - one for Tomato, one for Salami. We configured the\n Tomato checkbox to be checked immediately on load, and the Salami checkbox to be unchecked.\n We also specified an optional text {@link #cfg!value #value} that will be sent when we submit the form.\n We can get this value using the Form's {@link Ext.form.Panel#method!getValues getValues} function,\n or have it sent as part of the data that is sent when the form is submitted:\n\n     form.getValues(); //contains a key called 'tomato' if the Tomato field is still checked\n     form.submit(); //will send 'tomato' in the form submission data\n\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtFormPanel, ExtContainer, ExtCheckBoxField } from '@sencha/ext-react';\n export default class MyExample extends Component {\n     render() {\n         return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow layout={{type: 'vbox', align: 'left'}}>\n                    <ExtCheckBoxField boxLabel=\"Unchecked\"/>\n                    <ExtCheckBoxField boxLabel=\"Checked\" checked/>\n                    <ExtCheckBoxField boxLabel=\"Disabled\" disabled/>\n                    <ExtCheckBoxField boxLabel=\"Disabled (checked)\" disabled checked/>\n                </ExtFormPanel>\n            </ExtContainer>\n         )\n     }\n }\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n @Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n            <ExtContainer [shadow]=\"true\" [layout]='\"center\"'>\n                <ExtFormPanel [shadow] [layout]=\"{type: 'vbox', align: 'left'}\">\n                    <ExtCheckBoxField [boxLabel]='\"Unchecked\"'>\n                    </ExtCheckBoxField>\n                    <ExtCheckBoxField [boxLabel]='\"Checked\"' [checked]=\"true\">\n                    </ExtCheckBoxField>\n                    <ExtCheckBoxField [boxLabel]='\"Disabled\"' [disabled]=\"true\">\n                    </ExtCheckBoxField>\n                    <ExtCheckBoxField [boxLabel]='\"Disabled (checked)\"'\n                       [disabled]=\"true\" [checked]=\"true\">\n                    </ExtCheckBoxField>\n                </ExtFormPanel>\n            </ExtContainer>\n    `\n })\n export class AppComponent {}\n ```\n ```html\n  @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n  <ext-container layout=\"center\">\n    <ext-formpanel\n        shadow=\"true\"\n        layout='{\"type\": \"vbox\", \"align\": \"left\"}'\n     >\n        <ext-checkboxfield boxLabel=\"Unchecked\"></ext-checkboxfield>\n        <ext-checkboxfield boxLabel=\"Checked\" checked></ext-checkboxfield>\n        <ext-checkboxfield boxLabel=\"Disabled\" disabled></ext-checkboxfield>\n        <ext-checkboxfield boxLabel=\"Disabled (checked)\" disabled checked></ext-checkboxfield>\n    </ext-formpanel>\n  </ext-container>\n```\n```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-checkboxfield.component';\n\nexport default class CheckBoxFieldComponent {}\n```\n"
 },
 {
  "name": "Ext.field.CheckboxGroup",
  "xtype": "checkboxgroup",
  "text": " This Field is useful for containing multiple {@link Ext.field.Checkbox}.\n\n It plots items into wither horizontal / vertical depending on\n {@link Ext.field.FieldGroupContainer#cfg!vertical Ext.field.FieldGroupContainer#vertical} config properties.\n\n\n ```javascript\n @example({ framework: 'extjs' }\n     Ext.create('Ext.form.Panel', {\n         title: 'Checkbox Group',\n         width: 300,\n         height: 125,\n         fullscreen: true,\n         items:[{\n             xtype: 'checkboxgroup',\n             label: 'Checkbox Group',\n             // Arrange checkboxes distributed vertically.\n             // Automatically latter items flow to next column if\n             // available height is less to display all the items in single column.\n             vertical: true,\n             height: 100,\n             items: [\n                 { label: 'Item 1', name: 'cb-item-1', value: '1' },\n                 { label: 'Item 2', name: 'cb-item-2', value: '2', checked: true },\n                 { label: 'Item 3', name: 'cb-item-3', value: '3' },\n                 { label: 'Item 4', name: 'cb-common', value: '4' },\n                 { label: 'Item 5', name: 'cb-common', value: '5' },\n                 { label: 'Item 6', name: 'cb-common', value: '6' }\n             ]\n         }]\n     }\n );\n\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtFormPanel, ExtCheckBoxGroup, ExtCheckBoxField } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n      render() {\n           return (\n               <ExtFormPanel\n                title=\"Checkbox Group\"\n                width=\"300\"\n                height=\"125\"\n                fullscreen={true}\n               >\n                   <ExtCheckBoxGroup\n                       label=\"Checkbox Group\"\n                       vertical\n                       height=\"100\"\n                   >\n                       <ExtCheckBoxField\n                           label=\"Item 1\"\n                           name=\"cb-item-1\"\n                           value=\"1\"\n                       >\n                       </ExtCheckBoxField>\n                       <ExtCheckBoxField\n                           label=\"Item 2\"\n                           name=\"cb-item-2\"\n                           value=\"2\"\n                           checked=\"true\"\n                       >\n                       </ExtCheckBoxField>\n                       <ExtCheckBoxField\n                           label=\"Item 3\"\n                           name=\"cb-item-3\"\n                           value=\"3\"\n                       >\n                       </ExtCheckBoxField>\n                       <ExtCheckBoxField\n                           label=\"Item 4\"\n                           name=\"cb-common\"\n                           value=\"4\"\n                       >\n                       </ExtCheckBoxField>\n                       <ExtCheckBoxField\n                           label=\"Item 5\"\n                           name=\"cb-common\"\n                           value=\"5\"\n                       >\n                       </ExtCheckBoxField>\n                       <ExtCheckBoxField\n                           label=\"Item 6\"\n                           name=\"cb-common\"\n                           value=\"6\"\n                       >\n                       </ExtCheckBoxField>\n                   </ExtCheckBoxGroup>\n               </ExtFormPanel>\n           )\n      }\n }\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'checkboxgroup-component',\n     styles: [``],\n     template: `\n         <ExtFormPanel\n              title=\"Checkbox Group\"\n              [width]=\"600\"\n              [height]=\"400\"\n              [fullscreen]=\"true\"\n          >\n              <ExtCheckBoxGroup\n                  label=\"Checkbox Group\"\n                  [vertical]=\"true\"\n                  [height]=\"100\"\n              >\n                  <ExtCheckBoxField\n                      [label]=\"'Item 1'\"\n                      [name]=\"'cb-item-1'\"\n                      value=\"1\"\n                  >\n                  </ExtCheckBoxField>\n                  <ExtCheckBoxField\n                      [label]=\"'Item 2'\"\n                      [name]=\"'cb-item-2'\"\n                      value=\"2\"\n                      [checked]=\"true\"\n                  >\n                  </ExtCheckBoxField>\n                  <ExtCheckBoxField\n                      [label]=\"'Item 3'\"\n                      [name]=\"'cb-item-3'\"\n                      value=\"3\"\n                  >\n                  </ExtCheckBoxField>\n                  <ExtCheckBoxField\n                      [label]=\"'Item 4'\"\n                      [name]=\"'cb-common'\"\n                      value=\"4\"\n                  >\n                  </ExtCheckBoxField>\n                  <ExtCheckBoxField\n                      [label]=\"'Item 5'\"\n                      [name]=\"'cb-common'\"\n                      value=\"5\"\n                  >\n                  </ExtCheckBoxField>\n                  <ExtCheckBoxField\n                      [label]=\"'Item 6'\"\n                      [name]=\"'cb-common'\"\n                      value=\"6\"\n                  >\n                  </ExtCheckBoxField>\n              </ExtCheckBoxGroup>\n          </ExtFormPanel>\n      `\n })\n export class CheckBoxGroupComponent  {}\n```\n```html\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n <ext-formpanel\n      title=\"Checkbox Group\"\n      width=\"300\"\n      height=\"125\"\n      fullscreen=\"true\"\n  >\n   <ext-checkboxgroup\n       label=\"Checkbox Group\"\n       vertical=\"true\"\n       height=\"100\"\n   >\n       <ext-checkboxfield\n           label=\"Item 1\"\n           name=\"cb-item-1\"\n           value=\"1\"\n       >\n       </ext-checkboxfield>\n       <ext-checkboxfield\n           label=\"Item 2\"\n           name=\"cb-item-2\"\n           value=\"2\"\n           checked=\"true\"\n       >\n       </ext-checkboxfield>\n       <ext-checkboxfield\n           label=\"Item 3\"\n           name=\"cb-item-3\"\n           value=\"3\"\n       >\n       </ext-checkboxfield>\n       <ext-checkboxfield\n           label=\"Item 4\"\n           name=\"cb-common\"\n           value=\"4\"\n       >\n       </ext-checkboxfield>\n       <ext-checkboxfield\n           label=\"Item 5\"\n           name=\"cb-common\"\n           value=\"5\"\n       >\n       </ext-checkboxfield>\n       <ext-checkboxfield\n           label=\"Item 6\"\n           name=\"cb-common\"\n           value=\"6\"\n       >\n       </ext-checkboxfield>\n   </ext-checkboxgroup>\n </ext-formpanel>\n```\n```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-formpanel.component';\n import '@sencha/ext-web-components/dist/ext-checkboxgroup.component';\n import '@sencha/ext-web-components/dist/ext-checkboxfield.component';\n export default class CheckBoxGroupComponent {}\n```\n"
 },
 {
  "name": "Ext.field.ComboBox",
  "xtype": "combobox",
  "text": " A combobox control with support for autocomplete, remote loading, and many other features.\n\n A ComboBox is like a combination of a traditional HTML text `<input>` field and a `<select>`\n field; if the {@link #cfg!editable} config is `true`, then the user is able to type freely\n into the field, and/or pick values from a dropdown selection list.\n\n The user can input any value by default, even if it does not appear in the selection list;\n to prevent free-form values and restrict them to items in the list, set\n {@link #cfg!forceSelection #forceSelection} to `true`.\n\n The selection list's options are populated from any {@link Ext.data.Store}, including remote\n stores. The data items in the store are mapped to each option's displayed text and backing\n value via the {@link #cfg!valueField #valueField} and {@link #cfg!displayField #displayField} configurations which are applied\n to the list via the {@link #cfg!itemTpl}.\n\n If your store is not remote, i.e. it depends only on local data and is loaded up front, you MUST\n set the {@link #cfg!queryMode #queryMode} to `'local'`.\n\n # Example usage:\n\n ```javascript\n @example({ framework: 'extjs' })\n      Ext.create({\n          fullscreen: true,\n          xtype: 'container',\n          padding: 50,\n          layout: 'vbox',\n          items: [{\n              xtype: 'combobox',\n              label: 'Choose State',\n              queryMode: 'local',\n              displayField: 'name',\n              valueField: 'abbr',\n\n              store: [\n                  { abbr: 'AL', name: 'Alabama' },\n                  { abbr: 'AK', name: 'Alaska' },\n                  { abbr: 'AZ', name: 'Arizona' }\n              ]\n          }]\n      });\n ```\n\n # Events\n\n ComboBox fires a select event if an item is chosen from the associated list.  If\n the ComboBox is configured with {@link #cfg!forceSelection #forceSelection}: true, an action event is fired\n when the user has typed the ENTER key while editing the field, and a change event on\n each keystroke.\n\n ## Customized combobox\n\n Both the text shown in dropdown list and text field can be easily customized:\n```javascript\n     @example({ framework: 'extjs' })\n      Ext.create({\n          fullscreen: true,\n          xtype: 'container',\n          padding: 50,\n          layout: 'vbox',\n          items: [{\n              xtype: 'combobox',\n              label: 'Choose State',\n              queryMode: 'local',\n              displayField: 'name',\n              valueField: 'abbr',\n\n              // For the dropdown list\n              itemTpl: '<span role=\"option\" class=\"x-boundlist-item\">{abbr} - {name}</span>',\n\n              // For the content of the text field\n              displayTpl: '{abbr} - {name}',\n\n              editable: false,  // disable typing in the text field\n\n              store: [\n                  { abbr: 'AL', name: 'Alabama' },\n                  { abbr: 'AK', name: 'Alaska' },\n                  { abbr: 'AZ', name: 'Arizona' }\n              ]\n          }]\n      });\n\n See also the {@link #cfg!floatedPicker} and {@link #cfg!edgePicker} options for additional\n configuration of the options list.\n\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [``],\n     template: `\n         <ExtContainer [layout]='\"center\"'>\n             <ExtFormPanel [shadow]>\n                 <ExtComboBox\n                     [width]=\"200\"\n                     [label]='\"State\"'\n                     [options]='data'\n                     [displayField]='\"name\"'\n                     [valueField]='\"code\"'\n                     [queryMode]='\"local\"'\n                     [labelAlign]='\"placeholder\"'\n                     [typeAhead]\n                 ></ExtComboBox>\n             </ExtFormPanel>\n         </ExtContainer>\n })\n export class AppComponent {\n     data = [\n         {\"name\":\"Alabama\",\"abbrev\":\"AL\"},\n         {\"name\":\"Alaska\",\"abbrev\":\"AK\"},\n         {\"name\":\"Arizona\",\"abbrev\":\"AZ\"}\n     ];\n  }\n ```\n ```html\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n <ext-formpanel\n    shadow=\"true\"\n >\n    <ext-combobox\n        width=\"200\"\n        label=\"State\"\n        displayField=\"name\"\n        valueField=\"code\"\n        queryMode=\"local\"\n        labelAlign=\"placeholder\"\n        typeAhead=\"true\"\n        onready=\"comboboxfield.comboboxFieldReady\"\n     >\n     </ext-combobox>\n </ext-formpanel>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-formpanel.component';\n import '@sencha/ext-web-components/dist/ext-combobox.component';\n\n export default class ComboBoxFieldComponent {\n    constructor() {\n         this.data = [\n             {\"name\":\"Alabama\",\"abbrev\":\"AL\"},\n             {\"name\":\"Alaska\",\"abbrev\":\"AK\"},\n             {\"name\":\"Arizona\",\"abbrev\":\"AZ\"}\n         ]\n   }\n   comboboxFieldReady(event) {\n       this.combobox = event.detail.cmp;\n       this.combobox.setOptions(this.data);\n   }\n }\n\n window.comboboxfield = new ComboBoxFieldComponent();\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtFormPanel, ExtComboBox } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     render() {\n          const data = [\n               {\"name\":\"Alabama\",\"abbrev\":\"AL\"},\n               {\"name\":\"Alaska\",\"abbrev\":\"AK\"},\n               {\"name\":\"Arizona\",\"abbrev\":\"AZ\"}\n          ]\n\n          return (\n              <ExtFormPanel shadow>\n                  <ExtComboBox\n                      width={200}\n                      label=\"State\"\n                      options={data}\n                      displayField=\"name\"\n                      valueField=\"code\"\n                      queryMode=\"local\"\n                      labelAlign=\"placeholder\"\n                      typeAhead\n                  />\n              </ExtFormPanel>\n          )\n      }\n }\n ```\n"
 },
 {
  "name": "Ext.field.ComboBox",
  "xtype": "comboboxfield",
  "text": " A combobox control with support for autocomplete, remote loading, and many other features.\n\n A ComboBox is like a combination of a traditional HTML text `<input>` field and a `<select>`\n field; if the {@link #cfg!editable} config is `true`, then the user is able to type freely\n into the field, and/or pick values from a dropdown selection list.\n\n The user can input any value by default, even if it does not appear in the selection list;\n to prevent free-form values and restrict them to items in the list, set\n {@link #cfg!forceSelection #forceSelection} to `true`.\n\n The selection list's options are populated from any {@link Ext.data.Store}, including remote\n stores. The data items in the store are mapped to each option's displayed text and backing\n value via the {@link #cfg!valueField #valueField} and {@link #cfg!displayField #displayField} configurations which are applied\n to the list via the {@link #cfg!itemTpl}.\n\n If your store is not remote, i.e. it depends only on local data and is loaded up front, you MUST\n set the {@link #cfg!queryMode #queryMode} to `'local'`.\n\n # Example usage:\n\n ```javascript\n @example({ framework: 'extjs' })\n      Ext.create({\n          fullscreen: true,\n          xtype: 'container',\n          padding: 50,\n          layout: 'vbox',\n          items: [{\n              xtype: 'combobox',\n              label: 'Choose State',\n              queryMode: 'local',\n              displayField: 'name',\n              valueField: 'abbr',\n\n              store: [\n                  { abbr: 'AL', name: 'Alabama' },\n                  { abbr: 'AK', name: 'Alaska' },\n                  { abbr: 'AZ', name: 'Arizona' }\n              ]\n          }]\n      });\n ```\n\n # Events\n\n ComboBox fires a select event if an item is chosen from the associated list.  If\n the ComboBox is configured with {@link #cfg!forceSelection #forceSelection}: true, an action event is fired\n when the user has typed the ENTER key while editing the field, and a change event on\n each keystroke.\n\n ## Customized combobox\n\n Both the text shown in dropdown list and text field can be easily customized:\n```javascript\n     @example({ framework: 'extjs' })\n      Ext.create({\n          fullscreen: true,\n          xtype: 'container',\n          padding: 50,\n          layout: 'vbox',\n          items: [{\n              xtype: 'combobox',\n              label: 'Choose State',\n              queryMode: 'local',\n              displayField: 'name',\n              valueField: 'abbr',\n\n              // For the dropdown list\n              itemTpl: '<span role=\"option\" class=\"x-boundlist-item\">{abbr} - {name}</span>',\n\n              // For the content of the text field\n              displayTpl: '{abbr} - {name}',\n\n              editable: false,  // disable typing in the text field\n\n              store: [\n                  { abbr: 'AL', name: 'Alabama' },\n                  { abbr: 'AK', name: 'Alaska' },\n                  { abbr: 'AZ', name: 'Arizona' }\n              ]\n          }]\n      });\n\n See also the {@link #cfg!floatedPicker} and {@link #cfg!edgePicker} options for additional\n configuration of the options list.\n\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [``],\n     template: `\n         <ExtContainer [layout]='\"center\"'>\n             <ExtFormPanel [shadow]>\n                 <ExtComboBox\n                     [width]=\"200\"\n                     [label]='\"State\"'\n                     [options]='data'\n                     [displayField]='\"name\"'\n                     [valueField]='\"code\"'\n                     [queryMode]='\"local\"'\n                     [labelAlign]='\"placeholder\"'\n                     [typeAhead]\n                 ></ExtComboBox>\n             </ExtFormPanel>\n         </ExtContainer>\n })\n export class AppComponent {\n     data = [\n         {\"name\":\"Alabama\",\"abbrev\":\"AL\"},\n         {\"name\":\"Alaska\",\"abbrev\":\"AK\"},\n         {\"name\":\"Arizona\",\"abbrev\":\"AZ\"}\n     ];\n  }\n ```\n ```html\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n <ext-formpanel\n    shadow=\"true\"\n >\n    <ext-combobox\n        width=\"200\"\n        label=\"State\"\n        displayField=\"name\"\n        valueField=\"code\"\n        queryMode=\"local\"\n        labelAlign=\"placeholder\"\n        typeAhead=\"true\"\n        onready=\"comboboxfield.comboboxFieldReady\"\n     >\n     </ext-combobox>\n </ext-formpanel>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-formpanel.component';\n import '@sencha/ext-web-components/dist/ext-combobox.component';\n\n export default class ComboBoxFieldComponent {\n    constructor() {\n         this.data = [\n             {\"name\":\"Alabama\",\"abbrev\":\"AL\"},\n             {\"name\":\"Alaska\",\"abbrev\":\"AK\"},\n             {\"name\":\"Arizona\",\"abbrev\":\"AZ\"}\n         ]\n   }\n   comboboxFieldReady(event) {\n       this.combobox = event.detail.cmp;\n       this.combobox.setOptions(this.data);\n   }\n }\n\n window.comboboxfield = new ComboBoxFieldComponent();\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtFormPanel, ExtComboBox } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     render() {\n          const data = [\n               {\"name\":\"Alabama\",\"abbrev\":\"AL\"},\n               {\"name\":\"Alaska\",\"abbrev\":\"AK\"},\n               {\"name\":\"Arizona\",\"abbrev\":\"AZ\"}\n          ]\n\n          return (\n              <ExtFormPanel shadow>\n                  <ExtComboBox\n                      width={200}\n                      label=\"State\"\n                      options={data}\n                      displayField=\"name\"\n                      valueField=\"code\"\n                      queryMode=\"local\"\n                      labelAlign=\"placeholder\"\n                      typeAhead\n                  />\n              </ExtFormPanel>\n          )\n      }\n }\n ```\n"
 },
 {
  "name": "Ext.field.ComboBox",
  "xtype": "combobox",
  "text": " A combobox control with support for autocomplete, remote loading, and many other features.\n\n A ComboBox is like a combination of a traditional HTML text `<input>` field and a `<select>`\n field; if the {@link #cfg!editable} config is `true`, then the user is able to type freely\n into the field, and/or pick values from a dropdown selection list.\n\n The user can input any value by default, even if it does not appear in the selection list;\n to prevent free-form values and restrict them to items in the list, set\n {@link #cfg!forceSelection #forceSelection} to `true`.\n\n The selection list's options are populated from any {@link Ext.data.Store}, including remote\n stores. The data items in the store are mapped to each option's displayed text and backing\n value via the {@link #cfg!valueField #valueField} and {@link #cfg!displayField #displayField} configurations which are applied\n to the list via the {@link #cfg!itemTpl}.\n\n If your store is not remote, i.e. it depends only on local data and is loaded up front, you MUST\n set the {@link #cfg!queryMode #queryMode} to `'local'`.\n\n # Example usage:\n\n ```javascript\n @example({ framework: 'extjs' })\n      Ext.create({\n          fullscreen: true,\n          xtype: 'container',\n          padding: 50,\n          layout: 'vbox',\n          items: [{\n              xtype: 'combobox',\n              label: 'Choose State',\n              queryMode: 'local',\n              displayField: 'name',\n              valueField: 'abbr',\n\n              store: [\n                  { abbr: 'AL', name: 'Alabama' },\n                  { abbr: 'AK', name: 'Alaska' },\n                  { abbr: 'AZ', name: 'Arizona' }\n              ]\n          }]\n      });\n ```\n\n # Events\n\n ComboBox fires a select event if an item is chosen from the associated list.  If\n the ComboBox is configured with {@link #cfg!forceSelection #forceSelection}: true, an action event is fired\n when the user has typed the ENTER key while editing the field, and a change event on\n each keystroke.\n\n ## Customized combobox\n\n Both the text shown in dropdown list and text field can be easily customized:\n```javascript\n     @example({ framework: 'extjs' })\n      Ext.create({\n          fullscreen: true,\n          xtype: 'container',\n          padding: 50,\n          layout: 'vbox',\n          items: [{\n              xtype: 'combobox',\n              label: 'Choose State',\n              queryMode: 'local',\n              displayField: 'name',\n              valueField: 'abbr',\n\n              // For the dropdown list\n              itemTpl: '<span role=\"option\" class=\"x-boundlist-item\">{abbr} - {name}</span>',\n\n              // For the content of the text field\n              displayTpl: '{abbr} - {name}',\n\n              editable: false,  // disable typing in the text field\n\n              store: [\n                  { abbr: 'AL', name: 'Alabama' },\n                  { abbr: 'AK', name: 'Alaska' },\n                  { abbr: 'AZ', name: 'Arizona' }\n              ]\n          }]\n      });\n\n See also the {@link #cfg!floatedPicker} and {@link #cfg!edgePicker} options for additional\n configuration of the options list.\n\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [``],\n     template: `\n         <ExtContainer [layout]='\"center\"'>\n             <ExtFormPanel [shadow]>\n                 <ExtComboBox\n                     [width]=\"200\"\n                     [label]='\"State\"'\n                     [options]='data'\n                     [displayField]='\"name\"'\n                     [valueField]='\"code\"'\n                     [queryMode]='\"local\"'\n                     [labelAlign]='\"placeholder\"'\n                     [typeAhead]\n                 ></ExtComboBox>\n             </ExtFormPanel>\n         </ExtContainer>\n })\n export class AppComponent {\n     data = [\n         {\"name\":\"Alabama\",\"abbrev\":\"AL\"},\n         {\"name\":\"Alaska\",\"abbrev\":\"AK\"},\n         {\"name\":\"Arizona\",\"abbrev\":\"AZ\"}\n     ];\n  }\n ```\n ```html\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n <ext-formpanel\n    shadow=\"true\"\n >\n    <ext-combobox\n        width=\"200\"\n        label=\"State\"\n        displayField=\"name\"\n        valueField=\"code\"\n        queryMode=\"local\"\n        labelAlign=\"placeholder\"\n        typeAhead=\"true\"\n        onready=\"comboboxfield.comboboxFieldReady\"\n     >\n     </ext-combobox>\n </ext-formpanel>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-formpanel.component';\n import '@sencha/ext-web-components/dist/ext-combobox.component';\n\n export default class ComboBoxFieldComponent {\n    constructor() {\n         this.data = [\n             {\"name\":\"Alabama\",\"abbrev\":\"AL\"},\n             {\"name\":\"Alaska\",\"abbrev\":\"AK\"},\n             {\"name\":\"Arizona\",\"abbrev\":\"AZ\"}\n         ]\n   }\n   comboboxFieldReady(event) {\n       this.combobox = event.detail.cmp;\n       this.combobox.setOptions(this.data);\n   }\n }\n\n window.comboboxfield = new ComboBoxFieldComponent();\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtFormPanel, ExtComboBox } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     render() {\n          const data = [\n               {\"name\":\"Alabama\",\"abbrev\":\"AL\"},\n               {\"name\":\"Alaska\",\"abbrev\":\"AK\"},\n               {\"name\":\"Arizona\",\"abbrev\":\"AZ\"}\n          ]\n\n          return (\n              <ExtFormPanel shadow>\n                  <ExtComboBox\n                      width={200}\n                      label=\"State\"\n                      options={data}\n                      displayField=\"name\"\n                      valueField=\"code\"\n                      queryMode=\"local\"\n                      labelAlign=\"placeholder\"\n                      typeAhead\n                  />\n              </ExtFormPanel>\n          )\n      }\n }\n ```\n"
 },
 {
  "name": "Ext.field.ComboBox",
  "xtype": "comboboxfield",
  "text": " A combobox control with support for autocomplete, remote loading, and many other features.\n\n A ComboBox is like a combination of a traditional HTML text `<input>` field and a `<select>`\n field; if the {@link #cfg!editable} config is `true`, then the user is able to type freely\n into the field, and/or pick values from a dropdown selection list.\n\n The user can input any value by default, even if it does not appear in the selection list;\n to prevent free-form values and restrict them to items in the list, set\n {@link #cfg!forceSelection #forceSelection} to `true`.\n\n The selection list's options are populated from any {@link Ext.data.Store}, including remote\n stores. The data items in the store are mapped to each option's displayed text and backing\n value via the {@link #cfg!valueField #valueField} and {@link #cfg!displayField #displayField} configurations which are applied\n to the list via the {@link #cfg!itemTpl}.\n\n If your store is not remote, i.e. it depends only on local data and is loaded up front, you MUST\n set the {@link #cfg!queryMode #queryMode} to `'local'`.\n\n # Example usage:\n\n ```javascript\n @example({ framework: 'extjs' })\n      Ext.create({\n          fullscreen: true,\n          xtype: 'container',\n          padding: 50,\n          layout: 'vbox',\n          items: [{\n              xtype: 'combobox',\n              label: 'Choose State',\n              queryMode: 'local',\n              displayField: 'name',\n              valueField: 'abbr',\n\n              store: [\n                  { abbr: 'AL', name: 'Alabama' },\n                  { abbr: 'AK', name: 'Alaska' },\n                  { abbr: 'AZ', name: 'Arizona' }\n              ]\n          }]\n      });\n ```\n\n # Events\n\n ComboBox fires a select event if an item is chosen from the associated list.  If\n the ComboBox is configured with {@link #cfg!forceSelection #forceSelection}: true, an action event is fired\n when the user has typed the ENTER key while editing the field, and a change event on\n each keystroke.\n\n ## Customized combobox\n\n Both the text shown in dropdown list and text field can be easily customized:\n```javascript\n     @example({ framework: 'extjs' })\n      Ext.create({\n          fullscreen: true,\n          xtype: 'container',\n          padding: 50,\n          layout: 'vbox',\n          items: [{\n              xtype: 'combobox',\n              label: 'Choose State',\n              queryMode: 'local',\n              displayField: 'name',\n              valueField: 'abbr',\n\n              // For the dropdown list\n              itemTpl: '<span role=\"option\" class=\"x-boundlist-item\">{abbr} - {name}</span>',\n\n              // For the content of the text field\n              displayTpl: '{abbr} - {name}',\n\n              editable: false,  // disable typing in the text field\n\n              store: [\n                  { abbr: 'AL', name: 'Alabama' },\n                  { abbr: 'AK', name: 'Alaska' },\n                  { abbr: 'AZ', name: 'Arizona' }\n              ]\n          }]\n      });\n\n See also the {@link #cfg!floatedPicker} and {@link #cfg!edgePicker} options for additional\n configuration of the options list.\n\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [``],\n     template: `\n         <ExtContainer [layout]='\"center\"'>\n             <ExtFormPanel [shadow]>\n                 <ExtComboBox\n                     [width]=\"200\"\n                     [label]='\"State\"'\n                     [options]='data'\n                     [displayField]='\"name\"'\n                     [valueField]='\"code\"'\n                     [queryMode]='\"local\"'\n                     [labelAlign]='\"placeholder\"'\n                     [typeAhead]\n                 ></ExtComboBox>\n             </ExtFormPanel>\n         </ExtContainer>\n })\n export class AppComponent {\n     data = [\n         {\"name\":\"Alabama\",\"abbrev\":\"AL\"},\n         {\"name\":\"Alaska\",\"abbrev\":\"AK\"},\n         {\"name\":\"Arizona\",\"abbrev\":\"AZ\"}\n     ];\n  }\n ```\n ```html\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n <ext-formpanel\n    shadow=\"true\"\n >\n    <ext-combobox\n        width=\"200\"\n        label=\"State\"\n        displayField=\"name\"\n        valueField=\"code\"\n        queryMode=\"local\"\n        labelAlign=\"placeholder\"\n        typeAhead=\"true\"\n        onready=\"comboboxfield.comboboxFieldReady\"\n     >\n     </ext-combobox>\n </ext-formpanel>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-formpanel.component';\n import '@sencha/ext-web-components/dist/ext-combobox.component';\n\n export default class ComboBoxFieldComponent {\n    constructor() {\n         this.data = [\n             {\"name\":\"Alabama\",\"abbrev\":\"AL\"},\n             {\"name\":\"Alaska\",\"abbrev\":\"AK\"},\n             {\"name\":\"Arizona\",\"abbrev\":\"AZ\"}\n         ]\n   }\n   comboboxFieldReady(event) {\n       this.combobox = event.detail.cmp;\n       this.combobox.setOptions(this.data);\n   }\n }\n\n window.comboboxfield = new ComboBoxFieldComponent();\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtFormPanel, ExtComboBox } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     render() {\n          const data = [\n               {\"name\":\"Alabama\",\"abbrev\":\"AL\"},\n               {\"name\":\"Alaska\",\"abbrev\":\"AK\"},\n               {\"name\":\"Arizona\",\"abbrev\":\"AZ\"}\n          ]\n\n          return (\n              <ExtFormPanel shadow>\n                  <ExtComboBox\n                      width={200}\n                      label=\"State\"\n                      options={data}\n                      displayField=\"name\"\n                      valueField=\"code\"\n                      queryMode=\"local\"\n                      labelAlign=\"placeholder\"\n                      typeAhead\n                  />\n              </ExtFormPanel>\n          )\n      }\n }\n ```\n"
 },
 {
  "name": "Ext.field.Container",
  "xtype": "containerfield",
  "text": "This Container Field is useful for containing multiple form fields\nto be a single field within a form and will line up nicely with other\nfields. This allows it to be configured with a {@link #cfg!label field label}\nand optional {@link #cfg!errorTarget error message} around it's sub-items.\nA common use is for grouping a set of related fields under a single label\nin a form.\n\nThe container's configured {@link #cfg!items #cfg-items} will be layed out within\nthe field body area according to the configured {@link #cfg!layout #layout} type.\nThe default layout is `'hbox'`.\n\n# Example\n\n```javascript\n @example({ framework: 'extjs' })\n    Ext.create('Ext.form.Panel', {\n        fullscreen: true,\n        title: 'FieldContainer Example',\n        bodyPadding: 10,\n\n        items: [{\n            xtype: 'containerfield',\n            label: 'Name',\n            name: 'name',\n            items: [{\n                flex: 1,\n                name: 'first',\n                placeholder: 'First'\n            }, {\n                margin: '0 10',\n                name: 'middle',\n                placeholder: 'MI',\n                width: 50\n            }, {\n                flex: 1,\n                name: 'last',\n                placeholder: 'Last'\n            }]\n        }]\n    });\n```\n"
 },
 {
  "name": "Ext.field.Container",
  "xtype": "fieldcontainer",
  "text": "This Container Field is useful for containing multiple form fields\nto be a single field within a form and will line up nicely with other\nfields. This allows it to be configured with a {@link #cfg!label field label}\nand optional {@link #cfg!errorTarget error message} around it's sub-items.\nA common use is for grouping a set of related fields under a single label\nin a form.\n\nThe container's configured {@link #cfg!items #cfg-items} will be layed out within\nthe field body area according to the configured {@link #cfg!layout #layout} type.\nThe default layout is `'hbox'`.\n\n# Example\n\n```javascript\n @example({ framework: 'extjs' })\n    Ext.create('Ext.form.Panel', {\n        fullscreen: true,\n        title: 'FieldContainer Example',\n        bodyPadding: 10,\n\n        items: [{\n            xtype: 'containerfield',\n            label: 'Name',\n            name: 'name',\n            items: [{\n                flex: 1,\n                name: 'first',\n                placeholder: 'First'\n            }, {\n                margin: '0 10',\n                name: 'middle',\n                placeholder: 'MI',\n                width: 50\n            }, {\n                flex: 1,\n                name: 'last',\n                placeholder: 'Last'\n            }]\n        }]\n    });\n```\n"
 },
 {
  "name": "Ext.field.Date",
  "xtype": "datefield",
  "text": " This is a specialized field which shows a {@link Ext.picker.Date} when tapped.\n If it has a predefined value, or a value is selected in the {@link Ext.picker.Date},\n it will be displayed like a normal {@link Ext.field.Text} (but not selectable/changable).\n\n     Ext.create('Ext.field.Date', {\n         label: 'Birthday',\n         value: new Date()\n     });\n\n {@link Ext.field.Date} fields are very simple to implement, and have no required configurations.\n\n ## Examples\n\n It can be very useful to set a default {@link #cfg!value #value} configuration on\n {@link Ext.field.Date} fields. In this example, we set the {@link #cfg!value #value} to be\n the current date.  You can also use the {@link #setValue} method to update the value at any time.\n\n ```javascript\n @example({ framework: 'extjs' })\n     var form = Ext.create('Ext.form.Panel', {\n         fullscreen: true,\n         referenceHolder: true,\n         items: [{\n             xtype: 'fieldset',\n             items: [{\n                 xtype: 'datefield',\n                 label: 'Birthday',\n                 reference: 'birthday',\n                 value: new Date()\n             }]\n         }, {\n             xtype: 'toolbar',\n             docked: 'bottom',\n             items: [{\n                 text: 'setValue',\n                 handler: function() {\n                     var field = form.lookup('birthday'),\n                         y = Ext.Number.randomInt(1980, 2011),\n                         m = Ext.Number.randomInt(0, 11),\n                         d = Ext.Number.randomInt(1, 28);\n\n                     field.setValue(new Date(y, m, d));\n                 }\n             }]\n         }]\n     });\n ```\n When you need to retrieve the date from the {@link Ext.field.Date}, you can either use\n the {@link #getValue} or {@link #method!getFormattedValue #getFormattedValue} methods:\n\n ```javascript\n @example({ framework: 'extjs' })\n var form = Ext.create('Ext.form.Panel', {\n     fullscreen: true,\n     referenceHolder: true,\n     items: [{\n         xtype: 'fieldset',\n         items: [{\n             xtype: 'datefield',\n             label: 'Birthday',\n             reference: 'birthday',\n             value: new Date()\n         }]\n     }, {\n         xtype: 'toolbar',\n         docked: 'bottom',\n         items: [{\n             text: 'getValue',\n             handler: function() {\n                 var field = form.lookup('birthday');\n                 console.log(field.getValue());\n             }\n         }, {\n             text: 'getFormattedValue',\n             handler: function() {\n                 var field = form.lookup('birthday');\n                 console.log(field.getFormattedValue());\n             }\n         }]\n     }]\n });\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtContainer, ExtFormPanel, ExtDatePickerField } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     render() {\n         return (\n             <ExtContainer layout=\"center\">\n                 <ExtFormPanel shadow>\n                     <ExtDatePickerField\n                         width={150}\n                         value={new Date()}\n                         destroyPickerOnHide\n                         label=\"Date\"\n                         picker={{\n                             yearFrom: 1990\n                         }}\n                     />\n                 </ExtFormPanel>\n             </ExtContainer>\n         )\n     }\n }\n ```\n ```javascript\n  @example({framework: 'ext-angular', packages:['ext-angular']})\n  import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [``],\n     template: `\n         <ExtContainer [layout]='\"center\"'>\n             <ExtFormPanel [shadow]>\n                 <ExtDatePickerField\n                     [width]='150'\n                     [value]='date'\n                     [destroyPickerOnHide]\n                     [label]='\"Date\"'\n                     [picker]='{\n                         yearFrom: 1990\n                     }'\n                 >\n                 </ExtDatePickerField>\n             </ExtFormPanel>\n         </ExtContainer>\n     `\n })\n export class AppComponent {\n     date:Date = new Date();\n }\n ```\n ```html\n  @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n  <ext-container layout=\"center\">\n    <ext-formpanel\n      layout='{\"type\": \"vbox\", \"align\": \"stretch\"}'\n      width=\"300\"\n      height=\"100\"\n      bodyPadding=\"10\"\n      shadow=\"true\"\n     >\n      <ext-datepickerfield\n        destroyPickerOnHide=\"true\"\n        label=\"Date\"\n        picker='{\n          \"yearFrom\": \"1990\"\n        }'\n        onready=\"datepickerfield.datePickerFieldReady\"\n      >\n      </ext-datepickerfield>\n     </ext-formPanel>\n  </ext-container>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-container.component';\n import '@sencha/ext-web-components/dist/ext-datepickerfield.component';\n import '@sencha/ext-web-components/dist/ext-formpanel.component';\n\n export default class DatePickerFieldComponent {\n    datePickerFieldReady(event) {\n        this.datepickerfieldView = event.detail.cmp;\n        this.datepickerfieldView.setValue(new Date());\n    }\n }\n window.datepickerfield = new DatePickerFieldComponent();\n```\n"
 },
 {
  "name": "Ext.field.Date",
  "xtype": "datepickerfield",
  "text": " This is a specialized field which shows a {@link Ext.picker.Date} when tapped.\n If it has a predefined value, or a value is selected in the {@link Ext.picker.Date},\n it will be displayed like a normal {@link Ext.field.Text} (but not selectable/changable).\n\n     Ext.create('Ext.field.Date', {\n         label: 'Birthday',\n         value: new Date()\n     });\n\n {@link Ext.field.Date} fields are very simple to implement, and have no required configurations.\n\n ## Examples\n\n It can be very useful to set a default {@link #cfg!value #value} configuration on\n {@link Ext.field.Date} fields. In this example, we set the {@link #cfg!value #value} to be\n the current date.  You can also use the {@link #setValue} method to update the value at any time.\n\n ```javascript\n @example({ framework: 'extjs' })\n     var form = Ext.create('Ext.form.Panel', {\n         fullscreen: true,\n         referenceHolder: true,\n         items: [{\n             xtype: 'fieldset',\n             items: [{\n                 xtype: 'datefield',\n                 label: 'Birthday',\n                 reference: 'birthday',\n                 value: new Date()\n             }]\n         }, {\n             xtype: 'toolbar',\n             docked: 'bottom',\n             items: [{\n                 text: 'setValue',\n                 handler: function() {\n                     var field = form.lookup('birthday'),\n                         y = Ext.Number.randomInt(1980, 2011),\n                         m = Ext.Number.randomInt(0, 11),\n                         d = Ext.Number.randomInt(1, 28);\n\n                     field.setValue(new Date(y, m, d));\n                 }\n             }]\n         }]\n     });\n ```\n When you need to retrieve the date from the {@link Ext.field.Date}, you can either use\n the {@link #getValue} or {@link #method!getFormattedValue #getFormattedValue} methods:\n\n ```javascript\n @example({ framework: 'extjs' })\n var form = Ext.create('Ext.form.Panel', {\n     fullscreen: true,\n     referenceHolder: true,\n     items: [{\n         xtype: 'fieldset',\n         items: [{\n             xtype: 'datefield',\n             label: 'Birthday',\n             reference: 'birthday',\n             value: new Date()\n         }]\n     }, {\n         xtype: 'toolbar',\n         docked: 'bottom',\n         items: [{\n             text: 'getValue',\n             handler: function() {\n                 var field = form.lookup('birthday');\n                 console.log(field.getValue());\n             }\n         }, {\n             text: 'getFormattedValue',\n             handler: function() {\n                 var field = form.lookup('birthday');\n                 console.log(field.getFormattedValue());\n             }\n         }]\n     }]\n });\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtContainer, ExtFormPanel, ExtDatePickerField } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     render() {\n         return (\n             <ExtContainer layout=\"center\">\n                 <ExtFormPanel shadow>\n                     <ExtDatePickerField\n                         width={150}\n                         value={new Date()}\n                         destroyPickerOnHide\n                         label=\"Date\"\n                         picker={{\n                             yearFrom: 1990\n                         }}\n                     />\n                 </ExtFormPanel>\n             </ExtContainer>\n         )\n     }\n }\n ```\n ```javascript\n  @example({framework: 'ext-angular', packages:['ext-angular']})\n  import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [``],\n     template: `\n         <ExtContainer [layout]='\"center\"'>\n             <ExtFormPanel [shadow]>\n                 <ExtDatePickerField\n                     [width]='150'\n                     [value]='date'\n                     [destroyPickerOnHide]\n                     [label]='\"Date\"'\n                     [picker]='{\n                         yearFrom: 1990\n                     }'\n                 >\n                 </ExtDatePickerField>\n             </ExtFormPanel>\n         </ExtContainer>\n     `\n })\n export class AppComponent {\n     date:Date = new Date();\n }\n ```\n ```html\n  @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n  <ext-container layout=\"center\">\n    <ext-formpanel\n      layout='{\"type\": \"vbox\", \"align\": \"stretch\"}'\n      width=\"300\"\n      height=\"100\"\n      bodyPadding=\"10\"\n      shadow=\"true\"\n     >\n      <ext-datepickerfield\n        destroyPickerOnHide=\"true\"\n        label=\"Date\"\n        picker='{\n          \"yearFrom\": \"1990\"\n        }'\n        onready=\"datepickerfield.datePickerFieldReady\"\n      >\n      </ext-datepickerfield>\n     </ext-formPanel>\n  </ext-container>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-container.component';\n import '@sencha/ext-web-components/dist/ext-datepickerfield.component';\n import '@sencha/ext-web-components/dist/ext-formpanel.component';\n\n export default class DatePickerFieldComponent {\n    datePickerFieldReady(event) {\n        this.datepickerfieldView = event.detail.cmp;\n        this.datepickerfieldView.setValue(new Date());\n    }\n }\n window.datepickerfield = new DatePickerFieldComponent();\n```\n"
 },
 {
  "name": "Ext.field.Date",
  "xtype": "datefield",
  "text": " This is a specialized field which shows a {@link Ext.picker.Date} when tapped.\n If it has a predefined value, or a value is selected in the {@link Ext.picker.Date},\n it will be displayed like a normal {@link Ext.field.Text} (but not selectable/changable).\n\n     Ext.create('Ext.field.Date', {\n         label: 'Birthday',\n         value: new Date()\n     });\n\n {@link Ext.field.Date} fields are very simple to implement, and have no required configurations.\n\n ## Examples\n\n It can be very useful to set a default {@link #cfg!value #value} configuration on\n {@link Ext.field.Date} fields. In this example, we set the {@link #cfg!value #value} to be\n the current date.  You can also use the {@link #setValue} method to update the value at any time.\n\n ```javascript\n @example({ framework: 'extjs' })\n     var form = Ext.create('Ext.form.Panel', {\n         fullscreen: true,\n         referenceHolder: true,\n         items: [{\n             xtype: 'fieldset',\n             items: [{\n                 xtype: 'datefield',\n                 label: 'Birthday',\n                 reference: 'birthday',\n                 value: new Date()\n             }]\n         }, {\n             xtype: 'toolbar',\n             docked: 'bottom',\n             items: [{\n                 text: 'setValue',\n                 handler: function() {\n                     var field = form.lookup('birthday'),\n                         y = Ext.Number.randomInt(1980, 2011),\n                         m = Ext.Number.randomInt(0, 11),\n                         d = Ext.Number.randomInt(1, 28);\n\n                     field.setValue(new Date(y, m, d));\n                 }\n             }]\n         }]\n     });\n ```\n When you need to retrieve the date from the {@link Ext.field.Date}, you can either use\n the {@link #getValue} or {@link #method!getFormattedValue #getFormattedValue} methods:\n\n ```javascript\n @example({ framework: 'extjs' })\n var form = Ext.create('Ext.form.Panel', {\n     fullscreen: true,\n     referenceHolder: true,\n     items: [{\n         xtype: 'fieldset',\n         items: [{\n             xtype: 'datefield',\n             label: 'Birthday',\n             reference: 'birthday',\n             value: new Date()\n         }]\n     }, {\n         xtype: 'toolbar',\n         docked: 'bottom',\n         items: [{\n             text: 'getValue',\n             handler: function() {\n                 var field = form.lookup('birthday');\n                 console.log(field.getValue());\n             }\n         }, {\n             text: 'getFormattedValue',\n             handler: function() {\n                 var field = form.lookup('birthday');\n                 console.log(field.getFormattedValue());\n             }\n         }]\n     }]\n });\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtContainer, ExtFormPanel, ExtDatePickerField } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     render() {\n         return (\n             <ExtContainer layout=\"center\">\n                 <ExtFormPanel shadow>\n                     <ExtDatePickerField\n                         width={150}\n                         value={new Date()}\n                         destroyPickerOnHide\n                         label=\"Date\"\n                         picker={{\n                             yearFrom: 1990\n                         }}\n                     />\n                 </ExtFormPanel>\n             </ExtContainer>\n         )\n     }\n }\n ```\n ```javascript\n  @example({framework: 'ext-angular', packages:['ext-angular']})\n  import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [``],\n     template: `\n         <ExtContainer [layout]='\"center\"'>\n             <ExtFormPanel [shadow]>\n                 <ExtDatePickerField\n                     [width]='150'\n                     [value]='date'\n                     [destroyPickerOnHide]\n                     [label]='\"Date\"'\n                     [picker]='{\n                         yearFrom: 1990\n                     }'\n                 >\n                 </ExtDatePickerField>\n             </ExtFormPanel>\n         </ExtContainer>\n     `\n })\n export class AppComponent {\n     date:Date = new Date();\n }\n ```\n ```html\n  @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n  <ext-container layout=\"center\">\n    <ext-formpanel\n      layout='{\"type\": \"vbox\", \"align\": \"stretch\"}'\n      width=\"300\"\n      height=\"100\"\n      bodyPadding=\"10\"\n      shadow=\"true\"\n     >\n      <ext-datepickerfield\n        destroyPickerOnHide=\"true\"\n        label=\"Date\"\n        picker='{\n          \"yearFrom\": \"1990\"\n        }'\n        onready=\"datepickerfield.datePickerFieldReady\"\n      >\n      </ext-datepickerfield>\n     </ext-formPanel>\n  </ext-container>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-container.component';\n import '@sencha/ext-web-components/dist/ext-datepickerfield.component';\n import '@sencha/ext-web-components/dist/ext-formpanel.component';\n\n export default class DatePickerFieldComponent {\n    datePickerFieldReady(event) {\n        this.datepickerfieldView = event.detail.cmp;\n        this.datepickerfieldView.setValue(new Date());\n    }\n }\n window.datepickerfield = new DatePickerFieldComponent();\n```\n"
 },
 {
  "name": "Ext.field.Date",
  "xtype": "datepickerfield",
  "text": " This is a specialized field which shows a {@link Ext.picker.Date} when tapped.\n If it has a predefined value, or a value is selected in the {@link Ext.picker.Date},\n it will be displayed like a normal {@link Ext.field.Text} (but not selectable/changable).\n\n     Ext.create('Ext.field.Date', {\n         label: 'Birthday',\n         value: new Date()\n     });\n\n {@link Ext.field.Date} fields are very simple to implement, and have no required configurations.\n\n ## Examples\n\n It can be very useful to set a default {@link #cfg!value #value} configuration on\n {@link Ext.field.Date} fields. In this example, we set the {@link #cfg!value #value} to be\n the current date.  You can also use the {@link #setValue} method to update the value at any time.\n\n ```javascript\n @example({ framework: 'extjs' })\n     var form = Ext.create('Ext.form.Panel', {\n         fullscreen: true,\n         referenceHolder: true,\n         items: [{\n             xtype: 'fieldset',\n             items: [{\n                 xtype: 'datefield',\n                 label: 'Birthday',\n                 reference: 'birthday',\n                 value: new Date()\n             }]\n         }, {\n             xtype: 'toolbar',\n             docked: 'bottom',\n             items: [{\n                 text: 'setValue',\n                 handler: function() {\n                     var field = form.lookup('birthday'),\n                         y = Ext.Number.randomInt(1980, 2011),\n                         m = Ext.Number.randomInt(0, 11),\n                         d = Ext.Number.randomInt(1, 28);\n\n                     field.setValue(new Date(y, m, d));\n                 }\n             }]\n         }]\n     });\n ```\n When you need to retrieve the date from the {@link Ext.field.Date}, you can either use\n the {@link #getValue} or {@link #method!getFormattedValue #getFormattedValue} methods:\n\n ```javascript\n @example({ framework: 'extjs' })\n var form = Ext.create('Ext.form.Panel', {\n     fullscreen: true,\n     referenceHolder: true,\n     items: [{\n         xtype: 'fieldset',\n         items: [{\n             xtype: 'datefield',\n             label: 'Birthday',\n             reference: 'birthday',\n             value: new Date()\n         }]\n     }, {\n         xtype: 'toolbar',\n         docked: 'bottom',\n         items: [{\n             text: 'getValue',\n             handler: function() {\n                 var field = form.lookup('birthday');\n                 console.log(field.getValue());\n             }\n         }, {\n             text: 'getFormattedValue',\n             handler: function() {\n                 var field = form.lookup('birthday');\n                 console.log(field.getFormattedValue());\n             }\n         }]\n     }]\n });\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtContainer, ExtFormPanel, ExtDatePickerField } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     render() {\n         return (\n             <ExtContainer layout=\"center\">\n                 <ExtFormPanel shadow>\n                     <ExtDatePickerField\n                         width={150}\n                         value={new Date()}\n                         destroyPickerOnHide\n                         label=\"Date\"\n                         picker={{\n                             yearFrom: 1990\n                         }}\n                     />\n                 </ExtFormPanel>\n             </ExtContainer>\n         )\n     }\n }\n ```\n ```javascript\n  @example({framework: 'ext-angular', packages:['ext-angular']})\n  import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [``],\n     template: `\n         <ExtContainer [layout]='\"center\"'>\n             <ExtFormPanel [shadow]>\n                 <ExtDatePickerField\n                     [width]='150'\n                     [value]='date'\n                     [destroyPickerOnHide]\n                     [label]='\"Date\"'\n                     [picker]='{\n                         yearFrom: 1990\n                     }'\n                 >\n                 </ExtDatePickerField>\n             </ExtFormPanel>\n         </ExtContainer>\n     `\n })\n export class AppComponent {\n     date:Date = new Date();\n }\n ```\n ```html\n  @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n  <ext-container layout=\"center\">\n    <ext-formpanel\n      layout='{\"type\": \"vbox\", \"align\": \"stretch\"}'\n      width=\"300\"\n      height=\"100\"\n      bodyPadding=\"10\"\n      shadow=\"true\"\n     >\n      <ext-datepickerfield\n        destroyPickerOnHide=\"true\"\n        label=\"Date\"\n        picker='{\n          \"yearFrom\": \"1990\"\n        }'\n        onready=\"datepickerfield.datePickerFieldReady\"\n      >\n      </ext-datepickerfield>\n     </ext-formPanel>\n  </ext-container>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-container.component';\n import '@sencha/ext-web-components/dist/ext-datepickerfield.component';\n import '@sencha/ext-web-components/dist/ext-formpanel.component';\n\n export default class DatePickerFieldComponent {\n    datePickerFieldReady(event) {\n        this.datepickerfieldView = event.detail.cmp;\n        this.datepickerfieldView.setValue(new Date());\n    }\n }\n window.datepickerfield = new DatePickerFieldComponent();\n```\n"
 },
 {
  "name": "Ext.field.Date",
  "xtype": "datefield",
  "text": " This is a specialized field which shows a {@link Ext.picker.Date} when tapped.\n If it has a predefined value, or a value is selected in the {@link Ext.picker.Date},\n it will be displayed like a normal {@link Ext.field.Text} (but not selectable/changable).\n\n     Ext.create('Ext.field.Date', {\n         label: 'Birthday',\n         value: new Date()\n     });\n\n {@link Ext.field.Date} fields are very simple to implement, and have no required configurations.\n\n ## Examples\n\n It can be very useful to set a default {@link #cfg!value #value} configuration on\n {@link Ext.field.Date} fields. In this example, we set the {@link #cfg!value #value} to be\n the current date.  You can also use the {@link #setValue} method to update the value at any time.\n\n ```javascript\n @example({ framework: 'extjs' })\n     var form = Ext.create('Ext.form.Panel', {\n         fullscreen: true,\n         referenceHolder: true,\n         items: [{\n             xtype: 'fieldset',\n             items: [{\n                 xtype: 'datefield',\n                 label: 'Birthday',\n                 reference: 'birthday',\n                 value: new Date()\n             }]\n         }, {\n             xtype: 'toolbar',\n             docked: 'bottom',\n             items: [{\n                 text: 'setValue',\n                 handler: function() {\n                     var field = form.lookup('birthday'),\n                         y = Ext.Number.randomInt(1980, 2011),\n                         m = Ext.Number.randomInt(0, 11),\n                         d = Ext.Number.randomInt(1, 28);\n\n                     field.setValue(new Date(y, m, d));\n                 }\n             }]\n         }]\n     });\n ```\n When you need to retrieve the date from the {@link Ext.field.Date}, you can either use\n the {@link #getValue} or {@link #method!getFormattedValue #getFormattedValue} methods:\n\n ```javascript\n @example({ framework: 'extjs' })\n var form = Ext.create('Ext.form.Panel', {\n     fullscreen: true,\n     referenceHolder: true,\n     items: [{\n         xtype: 'fieldset',\n         items: [{\n             xtype: 'datefield',\n             label: 'Birthday',\n             reference: 'birthday',\n             value: new Date()\n         }]\n     }, {\n         xtype: 'toolbar',\n         docked: 'bottom',\n         items: [{\n             text: 'getValue',\n             handler: function() {\n                 var field = form.lookup('birthday');\n                 console.log(field.getValue());\n             }\n         }, {\n             text: 'getFormattedValue',\n             handler: function() {\n                 var field = form.lookup('birthday');\n                 console.log(field.getFormattedValue());\n             }\n         }]\n     }]\n });\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtContainer, ExtFormPanel, ExtDatePickerField } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     render() {\n         return (\n             <ExtContainer layout=\"center\">\n                 <ExtFormPanel shadow>\n                     <ExtDatePickerField\n                         width={150}\n                         value={new Date()}\n                         destroyPickerOnHide\n                         label=\"Date\"\n                         picker={{\n                             yearFrom: 1990\n                         }}\n                     />\n                 </ExtFormPanel>\n             </ExtContainer>\n         )\n     }\n }\n ```\n ```javascript\n  @example({framework: 'ext-angular', packages:['ext-angular']})\n  import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [``],\n     template: `\n         <ExtContainer [layout]='\"center\"'>\n             <ExtFormPanel [shadow]>\n                 <ExtDatePickerField\n                     [width]='150'\n                     [value]='date'\n                     [destroyPickerOnHide]\n                     [label]='\"Date\"'\n                     [picker]='{\n                         yearFrom: 1990\n                     }'\n                 >\n                 </ExtDatePickerField>\n             </ExtFormPanel>\n         </ExtContainer>\n     `\n })\n export class AppComponent {\n     date:Date = new Date();\n }\n ```\n ```html\n  @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n  <ext-container layout=\"center\">\n    <ext-formpanel\n      layout='{\"type\": \"vbox\", \"align\": \"stretch\"}'\n      width=\"300\"\n      height=\"100\"\n      bodyPadding=\"10\"\n      shadow=\"true\"\n     >\n      <ext-datepickerfield\n        destroyPickerOnHide=\"true\"\n        label=\"Date\"\n        picker='{\n          \"yearFrom\": \"1990\"\n        }'\n        onready=\"datepickerfield.datePickerFieldReady\"\n      >\n      </ext-datepickerfield>\n     </ext-formPanel>\n  </ext-container>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-container.component';\n import '@sencha/ext-web-components/dist/ext-datepickerfield.component';\n import '@sencha/ext-web-components/dist/ext-formpanel.component';\n\n export default class DatePickerFieldComponent {\n    datePickerFieldReady(event) {\n        this.datepickerfieldView = event.detail.cmp;\n        this.datepickerfieldView.setValue(new Date());\n    }\n }\n window.datepickerfield = new DatePickerFieldComponent();\n```\n"
 },
 {
  "name": "Ext.field.Date",
  "xtype": "datepickerfield",
  "text": " This is a specialized field which shows a {@link Ext.picker.Date} when tapped.\n If it has a predefined value, or a value is selected in the {@link Ext.picker.Date},\n it will be displayed like a normal {@link Ext.field.Text} (but not selectable/changable).\n\n     Ext.create('Ext.field.Date', {\n         label: 'Birthday',\n         value: new Date()\n     });\n\n {@link Ext.field.Date} fields are very simple to implement, and have no required configurations.\n\n ## Examples\n\n It can be very useful to set a default {@link #cfg!value #value} configuration on\n {@link Ext.field.Date} fields. In this example, we set the {@link #cfg!value #value} to be\n the current date.  You can also use the {@link #setValue} method to update the value at any time.\n\n ```javascript\n @example({ framework: 'extjs' })\n     var form = Ext.create('Ext.form.Panel', {\n         fullscreen: true,\n         referenceHolder: true,\n         items: [{\n             xtype: 'fieldset',\n             items: [{\n                 xtype: 'datefield',\n                 label: 'Birthday',\n                 reference: 'birthday',\n                 value: new Date()\n             }]\n         }, {\n             xtype: 'toolbar',\n             docked: 'bottom',\n             items: [{\n                 text: 'setValue',\n                 handler: function() {\n                     var field = form.lookup('birthday'),\n                         y = Ext.Number.randomInt(1980, 2011),\n                         m = Ext.Number.randomInt(0, 11),\n                         d = Ext.Number.randomInt(1, 28);\n\n                     field.setValue(new Date(y, m, d));\n                 }\n             }]\n         }]\n     });\n ```\n When you need to retrieve the date from the {@link Ext.field.Date}, you can either use\n the {@link #getValue} or {@link #method!getFormattedValue #getFormattedValue} methods:\n\n ```javascript\n @example({ framework: 'extjs' })\n var form = Ext.create('Ext.form.Panel', {\n     fullscreen: true,\n     referenceHolder: true,\n     items: [{\n         xtype: 'fieldset',\n         items: [{\n             xtype: 'datefield',\n             label: 'Birthday',\n             reference: 'birthday',\n             value: new Date()\n         }]\n     }, {\n         xtype: 'toolbar',\n         docked: 'bottom',\n         items: [{\n             text: 'getValue',\n             handler: function() {\n                 var field = form.lookup('birthday');\n                 console.log(field.getValue());\n             }\n         }, {\n             text: 'getFormattedValue',\n             handler: function() {\n                 var field = form.lookup('birthday');\n                 console.log(field.getFormattedValue());\n             }\n         }]\n     }]\n });\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtContainer, ExtFormPanel, ExtDatePickerField } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     render() {\n         return (\n             <ExtContainer layout=\"center\">\n                 <ExtFormPanel shadow>\n                     <ExtDatePickerField\n                         width={150}\n                         value={new Date()}\n                         destroyPickerOnHide\n                         label=\"Date\"\n                         picker={{\n                             yearFrom: 1990\n                         }}\n                     />\n                 </ExtFormPanel>\n             </ExtContainer>\n         )\n     }\n }\n ```\n ```javascript\n  @example({framework: 'ext-angular', packages:['ext-angular']})\n  import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [``],\n     template: `\n         <ExtContainer [layout]='\"center\"'>\n             <ExtFormPanel [shadow]>\n                 <ExtDatePickerField\n                     [width]='150'\n                     [value]='date'\n                     [destroyPickerOnHide]\n                     [label]='\"Date\"'\n                     [picker]='{\n                         yearFrom: 1990\n                     }'\n                 >\n                 </ExtDatePickerField>\n             </ExtFormPanel>\n         </ExtContainer>\n     `\n })\n export class AppComponent {\n     date:Date = new Date();\n }\n ```\n ```html\n  @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n  <ext-container layout=\"center\">\n    <ext-formpanel\n      layout='{\"type\": \"vbox\", \"align\": \"stretch\"}'\n      width=\"300\"\n      height=\"100\"\n      bodyPadding=\"10\"\n      shadow=\"true\"\n     >\n      <ext-datepickerfield\n        destroyPickerOnHide=\"true\"\n        label=\"Date\"\n        picker='{\n          \"yearFrom\": \"1990\"\n        }'\n        onready=\"datepickerfield.datePickerFieldReady\"\n      >\n      </ext-datepickerfield>\n     </ext-formPanel>\n  </ext-container>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-container.component';\n import '@sencha/ext-web-components/dist/ext-datepickerfield.component';\n import '@sencha/ext-web-components/dist/ext-formpanel.component';\n\n export default class DatePickerFieldComponent {\n    datePickerFieldReady(event) {\n        this.datepickerfieldView = event.detail.cmp;\n        this.datepickerfieldView.setValue(new Date());\n    }\n }\n window.datepickerfield = new DatePickerFieldComponent();\n```\n"
 },
 {
  "name": "Ext.field.DatePickerNative",
  "xtype": "datepickernativefield"
 },
 {
  "name": "Ext.field.DatePickerNative",
  "xtype": "datepickernativefield"
 },
 {
  "name": "Ext.field.Display",
  "xtype": "displayfield",
  "text": "A display-only text field which is not validated and not submitted. This is useful for when you\nwant to display a value from a form's loaded data but do not want to allow the  user to edit or\nsubmit that * value. The value can be optionally {@link #htmlEncode HTML encoded} if it contains\nHTML markup that you do not want * to be rendered.\n\nIf you have more complex content, or need to include components within the displayed content,\nalso consider using a {@link Ext.field.Container} instead.\n\nExample:\n\n    @example\n    Ext.create('Ext.form.Panel', {\n        renderTo: Ext.getBody(),\n        width: 175,\n        height: 150,\n        bodyPadding: 10,\n        title: 'Final Score',\n        items: [{\n            xtype: 'displayfield',\n            fieldLabel: 'Home',\n            name: 'home_score',\n            value: '10'\n        }, {\n            xtype: 'displayfield',\n            fieldLabel: 'Visitor',\n            name: 'visitor_score',\n            value: '11'\n        }],\n        buttons: [{\n            text: 'Update'\n        }]\n    });\n"
 },
 {
  "name": "Ext.field.Display",
  "xtype": "displayfield",
  "text": "A display-only text field which is not validated and not submitted. This is useful for when you\nwant to display a value from a form's loaded data but do not want to allow the  user to edit or\nsubmit that * value. The value can be optionally {@link #htmlEncode HTML encoded} if it contains\nHTML markup that you do not want * to be rendered.\n\nIf you have more complex content, or need to include components within the displayed content,\nalso consider using a {@link Ext.field.Container} instead.\n\nExample:\n\n    @example\n    Ext.create('Ext.form.Panel', {\n        renderTo: Ext.getBody(),\n        width: 175,\n        height: 150,\n        bodyPadding: 10,\n        title: 'Final Score',\n        items: [{\n            xtype: 'displayfield',\n            fieldLabel: 'Home',\n            name: 'home_score',\n            value: '10'\n        }, {\n            xtype: 'displayfield',\n            fieldLabel: 'Visitor',\n            name: 'visitor_score',\n            value: '11'\n        }],\n        buttons: [{\n            text: 'Update'\n        }]\n    });\n"
 },
 {
  "name": "Ext.field.Email",
  "xtype": "emailfield",
  "text": " The Email field creates an HTML5 email input and is usually created inside a form.\n Because it creates an HTML email input field, most browsers will show a specialized virtual\n keyboard for email address input. Aside from that, the email field is just a normal text field.\n Here's an example of how to use it in a form:\n\n ```javascript\n    @example({ framework: 'extjs' })\n     Ext.create('Ext.form.Panel', {\n         fullscreen: true,\n         items: [\n             {\n                 xtype: 'fieldset',\n                 title: 'Register',\n                 items: [\n                     {\n                         xtype: 'emailfield',\n                         label: 'Email',\n                         name: 'email'\n                     },\n                     {\n                         xtype: 'passwordfield',\n                         label: 'Password',\n                         name: 'password'\n                     }\n                 ]\n             }\n         ]\n     });\n\n Or on its own, outside of a form:\n\n     Ext.create('Ext.field.Email', {\n         label: 'Email address',\n         value: 'prefilled@email.com'\n     });\n\n Because email field inherits from {@link Ext.field.Text} it gains all of the\n functionality that text fields provide, including getting and setting the value at runtime,\n validations and various events that are fired as the user interacts with the component.\n Check out the {@link Ext.field.Text} docs to see the additional functionality available.\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtContainer, ExtFormPanel, ExtEmailField } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     render() {\n         return (\n             <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtEmailField\n                        width={250}\n                        placeholder=\"user@domain.com\"\n                        label=\"Email\"\n                     />\n                  </ExtFormPanel>\n             </ExtContainer>\n         )\n     }\n }\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n  selector: 'app-root-1',\n  styles: [``],\n  template: `\n      <ExtContainer [layout]='\"center\"'>\n          <ExtFormPanel [shadow]>\n              <ExtEmailField\n                  [width]='250'\n                  [placeholder]='\"user@domain.com\"'\n                  [label]='\"Email\"'\n              >\n              </ExtEmailField>\n          </ExtFormPanel>\n      </ExtContainer>\n          `\n })\n export class AppComponent {}\n ```\n ```html\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n  <ext-container\n    layout=\"center\"\n  >\n   <ext-formpanel\n         shadow=\"true\"\n    >\n       <ext-emailfield\n            width=\"250\"\n            placeholder=\"user@domain.com\"\n            label=\"Email\"\n        >\n       </ext-emailfield>\n    </ext-formpanel>\n </ext-container>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-container.component';\n import '@sencha/ext-web-components/dist/ext-formpanel.component';\n import '@sencha/ext-web-components/dist/ext-emailfield.component';\n\n export default class EmailFieldComponent {}\n```\n"
 },
 {
  "name": "Ext.field.Email",
  "xtype": "emailfield",
  "text": " The Email field creates an HTML5 email input and is usually created inside a form.\n Because it creates an HTML email input field, most browsers will show a specialized virtual\n keyboard for email address input. Aside from that, the email field is just a normal text field.\n Here's an example of how to use it in a form:\n\n ```javascript\n    @example({ framework: 'extjs' })\n     Ext.create('Ext.form.Panel', {\n         fullscreen: true,\n         items: [\n             {\n                 xtype: 'fieldset',\n                 title: 'Register',\n                 items: [\n                     {\n                         xtype: 'emailfield',\n                         label: 'Email',\n                         name: 'email'\n                     },\n                     {\n                         xtype: 'passwordfield',\n                         label: 'Password',\n                         name: 'password'\n                     }\n                 ]\n             }\n         ]\n     });\n\n Or on its own, outside of a form:\n\n     Ext.create('Ext.field.Email', {\n         label: 'Email address',\n         value: 'prefilled@email.com'\n     });\n\n Because email field inherits from {@link Ext.field.Text} it gains all of the\n functionality that text fields provide, including getting and setting the value at runtime,\n validations and various events that are fired as the user interacts with the component.\n Check out the {@link Ext.field.Text} docs to see the additional functionality available.\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtContainer, ExtFormPanel, ExtEmailField } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     render() {\n         return (\n             <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtEmailField\n                        width={250}\n                        placeholder=\"user@domain.com\"\n                        label=\"Email\"\n                     />\n                  </ExtFormPanel>\n             </ExtContainer>\n         )\n     }\n }\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n  selector: 'app-root-1',\n  styles: [``],\n  template: `\n      <ExtContainer [layout]='\"center\"'>\n          <ExtFormPanel [shadow]>\n              <ExtEmailField\n                  [width]='250'\n                  [placeholder]='\"user@domain.com\"'\n                  [label]='\"Email\"'\n              >\n              </ExtEmailField>\n          </ExtFormPanel>\n      </ExtContainer>\n          `\n })\n export class AppComponent {}\n ```\n ```html\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n  <ext-container\n    layout=\"center\"\n  >\n   <ext-formpanel\n         shadow=\"true\"\n    >\n       <ext-emailfield\n            width=\"250\"\n            placeholder=\"user@domain.com\"\n            label=\"Email\"\n        >\n       </ext-emailfield>\n    </ext-formpanel>\n </ext-container>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-container.component';\n import '@sencha/ext-web-components/dist/ext-formpanel.component';\n import '@sencha/ext-web-components/dist/ext-emailfield.component';\n\n export default class EmailFieldComponent {}\n```\n"
 },
 {
  "name": "Ext.field.Field",
  "xtype": "field",
  "text": "Field is the base class for all form fields. It provides a lot of shared functionality to all\nfield subclasses (for example labels, simple validation, {@link #clearable clearing} and tab\nindex management), but is rarely used directly. Instead, it is much more common to use one of\nthe field subclasses:\n\n    xtype            Class\n    ---------------------------------------\n    textfield        {@link Ext.field.Text}\n    numberfield      {@link Ext.field.Number}\n    textareafield    {@link Ext.field.TextArea}\n    hiddenfield      {@link Ext.field.Hidden}\n    radiofield       {@link Ext.field.Radio}\n    filefield        {@link Ext.field.File}\n    checkboxfield    {@link Ext.field.Checkbox}\n    selectfield      {@link Ext.field.Select}\n    togglefield      {@link Ext.field.Toggle}\n    fieldset         {@link Ext.form.FieldSet}\n\nFields are normally used within the context of a form and/or fieldset. See the\n{@link Ext.form.Panel} and {@link Ext.form.FieldSet} docs for examples on how\nto put those together, or the list of links above for usage of individual field types. If you\nwish to create your own Field subclasses you can extend this class, though it is sometimes more\nuseful to extend {@link Ext.field.Text} as this provides additional text entry functionality.\n"
 },
 {
  "name": "Ext.field.Field",
  "xtype": "field",
  "text": "Field is the base class for all form fields. It provides a lot of shared functionality to all\nfield subclasses (for example labels, simple validation, {@link #clearable clearing} and tab\nindex management), but is rarely used directly. Instead, it is much more common to use one of\nthe field subclasses:\n\n    xtype            Class\n    ---------------------------------------\n    textfield        {@link Ext.field.Text}\n    numberfield      {@link Ext.field.Number}\n    textareafield    {@link Ext.field.TextArea}\n    hiddenfield      {@link Ext.field.Hidden}\n    radiofield       {@link Ext.field.Radio}\n    filefield        {@link Ext.field.File}\n    checkboxfield    {@link Ext.field.Checkbox}\n    selectfield      {@link Ext.field.Select}\n    togglefield      {@link Ext.field.Toggle}\n    fieldset         {@link Ext.form.FieldSet}\n\nFields are normally used within the context of a form and/or fieldset. See the\n{@link Ext.form.Panel} and {@link Ext.form.FieldSet} docs for examples on how\nto put those together, or the list of links above for usage of individual field types. If you\nwish to create your own Field subclasses you can extend this class, though it is sometimes more\nuseful to extend {@link Ext.field.Text} as this provides additional text entry functionality.\n"
 },
 {
  "name": "Ext.field.FieldGroupContainer",
  "xtype": "groupcontainer",
  "text": "This Group Container Field is useful for containing multiple form fields\nto be a single group and will line up nicely with group other fields.\nA common use is for grouping a set of related fields.\n"
 },
 {
  "name": "Ext.field.File",
  "xtype": "filefield",
  "text": "Creates an HTML file input field on the page. This is usually used to upload files\nto remote server.\nFile fields are usually created inside a form like this:\n\n```javascript\n @example({ framework: 'extjs' })\n     Ext.create('Ext.form.Panel', {\n        fullscreen: true,\n        items: [\n            {\n                xtype: 'fieldset',\n                title: 'My Uploader',\n                items: [\n                    {\n                        xtype: 'filefield',\n                        label: \"MyPhoto:\",\n                        name: 'photo',\n                        accept: 'image'\n                    }\n                ]\n            }\n        ]\n    });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtFileField } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtFileField\n                      label=\"Select a File\"\n                      name=\"photo\"\n                      accept=\"image\"\n                    />\n                </ExtFormPanel>\n            </ExtContainer>\n       )\n   }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n   selector: 'app-root-1',\n   styles: [``],\n   template: `\n       <ExtContainer [layout]='\"center\"'>\n           <ExtFormPanel [shadow]>\n               <ExtFileField\n                   [label]='\"Select a File\"'\n                   [name]='\"photo\"'\n                   [accept]='\"image\"'\n               >\n               </ExtFileField>\n           </ExtFormPanel>\n       </ExtContainer>\n   `\n})\n\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n    <ext-formpanel shadow=\"true\">\n        <ext-filefield\n             label=\"Select a File\"\n             name=\"photo\"\n             accept=\"image\"\n         >\n         </ext-filefield>\n    </ext-formpanel>\n</ext-container>\n```\n```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-container.component';\n import '@sencha/ext-web-components/dist/ext-formpanel.component';\n import '@sencha/ext-web-components/dist/ext-filefield.component';\n\n export default class FileFieldComponent {}\n```\n"
 },
 {
  "name": "Ext.field.FileButton",
  "xtype": "filebutton"
 },
 {
  "name": "Ext.field.Hidden",
  "xtype": "hiddenfield",
  "text": "Hidden fields allow you to easily inject additional data into a {@link Ext.form.Panel}\nwithout displaying additional fields on the screen. This is often useful for sending dynamic\nor previously collected data back to the server in the same request as the normal form\nsubmission.\nFor example, here is how we might set up a form to send back a hidden userId field:\n\n```javascript\n@example({ framework: 'extjs' })\nvar form = Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [{\n        xtype: 'fieldset',\n        title: 'Enter your name',\n        items: [{\n                  xtype: 'hiddenfield',\n                  name: 'userId',\n                  value: 123\n               }, {\n                  xtype: 'checkboxfield',\n                  label: 'Enable notifications',\n                  name: 'notifications'\n               }]\n        }]\n });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtHiddenField } from '@sencha/ext-react';\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtHiddenField\n                      value=\"123\"\n                      name=\"hide\"\n                    />\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n@Component({\n selector: 'app-root-1',\n styles: [``],\n template: `\n     <ExtContainer layout=\"center\">\n         <ExtFormPanel shadow=\"true\">\n             <ExtHiddenField\n                 value=\"123\"\n                 name=\"hide\"\n             >\n             </ExtHiddenField>\n         </ExtFormPanel>\n     </ExtContainer>\n `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n       <ext-hiddenfield\n            value=\"123\"\n            name=\"hide\"\n        >\n       </ext-hiddenfield>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-hiddenfield.component';\n\nexport default class HiddenFieldComponent {}\n```\n\nIn the form above we created two fields - a hidden field and a\n{@link Ext.field.Checkbox}. Only the check box will be visible, but both fields\nwill be submitted. Hidden fields cannot be tabbed to - they are removed from the tab index so\nwhen your user taps the next/previous field buttons the hidden field is skipped over.\n\nIt's easy to read and update the value of a hidden field within a form. Using the example\nabove, we can get a reference to the hidden field and then set it to a new value in 2 lines\nof code:\n\n    var userId = form.down('hiddenfield')[0];\n    userId.setValue(1234);\n"
 },
 {
  "name": "Ext.field.Hidden",
  "xtype": "hiddenfield",
  "text": "Hidden fields allow you to easily inject additional data into a {@link Ext.form.Panel}\nwithout displaying additional fields on the screen. This is often useful for sending dynamic\nor previously collected data back to the server in the same request as the normal form\nsubmission.\nFor example, here is how we might set up a form to send back a hidden userId field:\n\n```javascript\n@example({ framework: 'extjs' })\nvar form = Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [{\n        xtype: 'fieldset',\n        title: 'Enter your name',\n        items: [{\n                  xtype: 'hiddenfield',\n                  name: 'userId',\n                  value: 123\n               }, {\n                  xtype: 'checkboxfield',\n                  label: 'Enable notifications',\n                  name: 'notifications'\n               }]\n        }]\n });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtHiddenField } from '@sencha/ext-react';\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtHiddenField\n                      value=\"123\"\n                      name=\"hide\"\n                    />\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n@Component({\n selector: 'app-root-1',\n styles: [``],\n template: `\n     <ExtContainer layout=\"center\">\n         <ExtFormPanel shadow=\"true\">\n             <ExtHiddenField\n                 value=\"123\"\n                 name=\"hide\"\n             >\n             </ExtHiddenField>\n         </ExtFormPanel>\n     </ExtContainer>\n `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n       <ext-hiddenfield\n            value=\"123\"\n            name=\"hide\"\n        >\n       </ext-hiddenfield>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-hiddenfield.component';\n\nexport default class HiddenFieldComponent {}\n```\n\nIn the form above we created two fields - a hidden field and a\n{@link Ext.field.Checkbox}. Only the check box will be visible, but both fields\nwill be submitted. Hidden fields cannot be tabbed to - they are removed from the tab index so\nwhen your user taps the next/previous field buttons the hidden field is skipped over.\n\nIt's easy to read and update the value of a hidden field within a form. Using the example\nabove, we can get a reference to the hidden field and then set it to a new value in 2 lines\nof code:\n\n    var userId = form.down('hiddenfield')[0];\n    userId.setValue(1234);\n"
 },
 {
  "name": "Ext.field.Input",
  "xtype": "inputfield",
  "text": "A base class for form fields that contain and manage an `<input>` element.  This class\nis intended to be extended, not directly instantiated.\n"
 },
 {
  "name": "Ext.field.Number",
  "xtype": "numberfield",
  "text": "The Number field creates an HTML5 text input that allows the editing of number values,\nand is usually created inside a form. Most browsers will show a specialized virtual keyboard\nfor entering numbers. The Number field only accepts numerical input.  If you want a Number field\nwith up/down spinners, see {@link Ext.field.Spinner}.\n```javascript\n @example({ framework: 'extjs' })\n    Ext.create('Ext.form.Panel', {\n        fullscreen: true,\n        items: [\n            {\n                xtype: 'fieldset',\n                title: 'How old are you?',\n                items: [\n                    {\n                        xtype: 'numberfield',\n                        label: 'Age',\n                        minValue: 18,\n                        maxValue: 150,\n                        name: 'age'\n                    }\n                ]\n            }\n        ]\n    });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtNumberField, ExtFormPanel } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n       return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtNumberField\n                        label=\"Number\"\n                        width=\"150\"\n                    />\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n@Component({\n selector: 'app-root-1',\n styles: [``],\n template: `\n     <ExtContainer layout=\"center\">\n         <ExtFormPanel shadow=\"true\">\n             <ExtNumberField\n                 label=\"Number\"\n                 width=\"150\"\n             >\n             </ExtNumberField>\n         </ExtFormPanel>\n     </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-numberfield\n            label=\"Number\"\n            width=\"150\"\n        >\n       </ext-numberfield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-numberfield.component';\n\nexport default class NumberFieldComponent {}\n```\n\nOr on its own, outside of a form:\n\n    Ext.create('Ext.field.Number', {\n        label: 'Age',\n        value: '26'\n    });\n\n## minValue, maxValue\n\nThe {@link #cfg!minValue #minValue} and {@link #cfg!maxValue #maxValue} configurations are self-explanatory and\nsimply constrain the value\nFor example, to create a salary field that limits entry to between 25,000 and 50,000\nwe can do this:\n\n    @example\n    Ext.create('Ext.form.Panel', {\n        fullscreen: true,\n        items: [\n            {\n                xtype: 'fieldset',\n                title: 'Are you rich yet?',\n                items: [\n                    {\n                        xtype: 'numberfield',\n                        label: 'Salary',\n                        value: 30000,\n                        minValue: 25000,\n                        maxValue: 50000\n                    }\n                ]\n            }\n        ]\n    });\n\nThis creates a field that starts with a value of $30,000 and will not go beneath $25,000\nor above $50,000.\n\nBecause number field inherits from {@link Ext.field.Text} it gains all of the\nfunctionality that text fields provide, including getting and setting the value at runtime,\nvalidations and various events that are fired as the user interacts with the component.\nCheck out the {@link Ext.field.Text} docs to see the additional functionality available.\n"
 },
 {
  "name": "Ext.field.Number",
  "xtype": "numberfield",
  "text": "The Number field creates an HTML5 text input that allows the editing of number values,\nand is usually created inside a form. Most browsers will show a specialized virtual keyboard\nfor entering numbers. The Number field only accepts numerical input.  If you want a Number field\nwith up/down spinners, see {@link Ext.field.Spinner}.\n```javascript\n @example({ framework: 'extjs' })\n    Ext.create('Ext.form.Panel', {\n        fullscreen: true,\n        items: [\n            {\n                xtype: 'fieldset',\n                title: 'How old are you?',\n                items: [\n                    {\n                        xtype: 'numberfield',\n                        label: 'Age',\n                        minValue: 18,\n                        maxValue: 150,\n                        name: 'age'\n                    }\n                ]\n            }\n        ]\n    });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtNumberField, ExtFormPanel } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n       return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtNumberField\n                        label=\"Number\"\n                        width=\"150\"\n                    />\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n@Component({\n selector: 'app-root-1',\n styles: [``],\n template: `\n     <ExtContainer layout=\"center\">\n         <ExtFormPanel shadow=\"true\">\n             <ExtNumberField\n                 label=\"Number\"\n                 width=\"150\"\n             >\n             </ExtNumberField>\n         </ExtFormPanel>\n     </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-numberfield\n            label=\"Number\"\n            width=\"150\"\n        >\n       </ext-numberfield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-numberfield.component';\n\nexport default class NumberFieldComponent {}\n```\n\nOr on its own, outside of a form:\n\n    Ext.create('Ext.field.Number', {\n        label: 'Age',\n        value: '26'\n    });\n\n## minValue, maxValue\n\nThe {@link #cfg!minValue #minValue} and {@link #cfg!maxValue #maxValue} configurations are self-explanatory and\nsimply constrain the value\nFor example, to create a salary field that limits entry to between 25,000 and 50,000\nwe can do this:\n\n    @example\n    Ext.create('Ext.form.Panel', {\n        fullscreen: true,\n        items: [\n            {\n                xtype: 'fieldset',\n                title: 'Are you rich yet?',\n                items: [\n                    {\n                        xtype: 'numberfield',\n                        label: 'Salary',\n                        value: 30000,\n                        minValue: 25000,\n                        maxValue: 50000\n                    }\n                ]\n            }\n        ]\n    });\n\nThis creates a field that starts with a value of $30,000 and will not go beneath $25,000\nor above $50,000.\n\nBecause number field inherits from {@link Ext.field.Text} it gains all of the\nfunctionality that text fields provide, including getting and setting the value at runtime,\nvalidations and various events that are fired as the user interacts with the component.\nCheck out the {@link Ext.field.Text} docs to see the additional functionality available.\n"
 },
 {
  "name": "Ext.field.Panel",
  "xtype": "fieldpanel",
  "text": "A `fieldpanel` is a convenient way to manage and load {@link Ext.field.Field}.\nThis class does not provide the `form` submit capabilities of\n{@link Ext.form.Panel} but is instead designed to be used where data will be\nsaved to a server in other ways (see below) or perhaps as a child of a `formpanel`.\n\nUsually a `fieldpanel` just contains a set of fields to display such as the following:\n\n```javascript\n@example({ framework: 'extjs' })\n     var panel = Ext.create({\n         xtype: 'fieldpanel',\n         fullscreen: true,\n\n         items: [{\n             xtype: 'textfield',\n             name: 'name',\n             label: 'Name'\n         }, {\n             xtype: 'emailfield',\n             name: 'email',\n             label: 'Email'\n         }, {\n             xtype: 'passwordfield',\n             name: 'password',\n             label: 'Password'\n         }]\n     });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtFieldPanel, ExtTextField, ExtEmailField, ExtPasswordField } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtFieldPanel width=\"600\" height=\"300\">\n                <ExtTextField\n                    name=\"name\"\n                    label=\"Name\"\n                    padding=\"10\"\n                >\n                </ExtTextField>\n                <ExtEmailField\n                    name=\"email\"\n                    label=\"Email\"\n                    padding=\"10\"\n                >\n                </ExtEmailField>\n                <ExtPasswordField\n                    name=\"password\"\n                    label=\"Password\"\n                    padding=\"10\"\n                >\n                </ExtPasswordField>\n            </ExtFieldPanel>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'fieldpanel-component',\n    styles: [``],\n    template: `\n        <ExtFieldPanel width=\"600\" height=\"300\">\n            <ExtTextField\n                [name]=\"'name'\"\n                [label]=\"'Name'\"\n                padding=\"10\"\n            >\n            </ExtTextField>\n            <ExtEmailField\n                 [name]=\"'email'\"\n                 [label]=\"'Email'\"\n                 padding=\"10\"\n            >\n            </ExtEmailField>\n            <ExtPasswordField\n                 [name]=\"'password'\"\n                 [label]=\"'Password'\"\n                 padding=\"10\"\n            >\n            </ExtPasswordField>\n        </ExtFieldPanel>\n    `\n})\nexport class FieldPanelComponent  {}\n```\n```html\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n <ext-fieldpanel fullscreen=\"true\">\n     <ext-textfield\n          name=\"name\"\n          label=\"Name\"\n      >\n      </ext-textfield>\n      <ext-emailfield\n          name=\"email\"\n          label=\"Email\"\n      >\n      </ext-emailfield>\n      <ext-passwordfield\n          name=\"password\"\n          label=\"Password\"\n      >\n      </ext-passwordfield>\n  </ext-fieldpanel>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-fieldpanel.component';\nimport '@sencha/ext-web-components/dist/ext-textfield.component';\nimport '@sencha/ext-web-components/dist/ext-emailfield.component';\nimport '@sencha/ext-web-components/dist/ext-passwordfield.component';\nexport default class PanelComponent {}\n```\n\nHere we just created a simple container which could be used as a registration form to\nsign up to your service. We added a plain {@link Ext.field.Text} for the\nuser's Name, an {@link Ext.field.Email} and finally a\n{@link Ext.field.Password}.\n\nIn each case we provided a {@link Ext.field.Field#cfg!name name} config on the field so\nthat we can identify it later and act on the whole group of fields.\n\n## Gathering Field Data\n\nOne simple way to get the data from a `fieldpanel` is {@link #method!getValues #getValues}:\n\n     var values = panel.getValues();\n\n     // values now looks like this:\n\n     {\n         name: 'Peter',\n         email: 'peter.venkman@gb.com',\n         password: '**********'\n     }\n\nOr if you have a {@link Ext.data.Model}, you can use `{@link #method!fillRecord fillRecord}`:\n\n     panel.fillRecord(rec);\n\nThis method is equivalent to the classic toolkit `updateRecord` method, but that name\nis not used in the modern toolkit due to conflicts with the `{@link #cfg!record record}` config property.\n\n## Observing Fields\n\nTypical applications use a {@link Ext.app.ViewController} to manage events\nfrom containers like this:\n\n     var panel = Ext.create({\n         xtype: 'fieldpanel',\n         fullscreen: true,\n\n         controller: 'mycontroller',\n\n         items: [{\n             xtype: 'textfield',\n             name: 'name',\n             label: 'Name'\n         }, {\n             xtype: 'emailfield',\n             name: 'email',\n             label: 'Email'\n         }, {\n             xtype: 'passwordfield',\n             name: 'password',\n             label: 'Password'\n         }]\n     });\n\n     Ext.define('MyController', {\n         extend: 'Ext.app.ViewController',\n         alias: 'controller.mycontroller',\n\n         control: {\n             '> field': {\n                 change: 'onChange'\n             }\n         },\n\n         onChange: function (field, value) {\n             console.log('change', field.name, value);\n         }\n     });\n\nThe above code responds to a {@link Ext.field.Text#event!change change} event from any `field`\nthat is an immediate child of its view, the `fieldpanel`.\n\n## Saving Data\n\nWith a `fieldpanel` you can use the {@link Ext.data.Model#method!save} on a\nrecord to save data to the server.\n\n     var panel = Ext.create({\n         xtype: 'fieldpanel',\n         fullscreen: true,\n\n         controller: 'mycontroller',\n\n         buttons: {\n             save: 'onSave'\n         },\n\n         items: [{\n             xtype: 'textfield',\n             name: 'name',\n             label: 'Name'\n         }, {\n             xtype: 'emailfield',\n             name: 'email',\n             label: 'Email'\n         }, {\n             xtype: 'passwordfield',\n             name: 'password',\n             label: 'Password'\n         }]\n     });\n\n     Ext.define('MyController', {\n         extend: 'Ext.app.ViewController',\n         alias: 'controller.mycontroller',\n\n         onSave: function () {\n             var rec = new MyModel();\n\n             this.getView().fillRecord(rec);\n\n             rec.save({\n                 // options\n             });\n         }\n     });\n\nTo use `form` submit, use {@link Ext.form.Panel} instead.\n"
 },
 {
  "name": "Ext.field.Password",
  "xtype": "passwordfield",
  "text": "The Password field creates a password input and is usually created inside a form.\nBecause it creates a password field, when the user enters text it will show up as stars.\nAside from that, the password field is just a normal text field. Here's an example of how\nto use it in a form:\n\n```javascript\n@example({ framework: 'extjs' })\n    Ext.create('Ext.form.Panel', {\n        fullscreen: true,\n        items: [\n            {\n                xtype: 'fieldset',\n                title: 'Register',\n                items: [\n                    {\n                        xtype: 'emailfield',\n                        label: 'Email',\n                        name: 'email'\n                    },\n                    {\n                        xtype: 'passwordfield',\n                        label: 'Password',\n                        name: 'password'\n                    }\n                ]\n            }\n        ]\n    });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, PasswordField } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtPasswordField\n                        width={200}\n                        label=\"Password\"\n                        required\n                        revealable\n                    />\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow=\"true\">\n                    <ExtPasswordField\n                        width=\"200\"\n                        label=\"Password\"\n                        required=\"true\"\n                        revealable=\"true\"\n                    >\n                    </ExtPasswordField>\n                </ExtFormPanel>\n            </ExtContainer>\n      `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-passwordfield\n            width=\"200\"\n            label=\"Password\"\n            required=\"true\"\n            revealable=\"true\"\n       >\n       </ext-passwordfield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-passwordfield.component';\n\nexport default class PasswordFieldComponent {}\n```\n\nOr on its own, outside of a form:\n\n    Ext.create('Ext.field.Password', {\n        label: 'Password',\n        value: 'existingPassword'\n    });\n\nBecause the password field inherits from {@link Ext.field.Text} it gains all of\nthe functionality that text fields provide, including getting and setting the value at runtime,\nvalidations and various events that are fired as the user interacts with the component.\nCheck out the {@link Ext.field.Text} docs to see the additional functionality available.\n"
 },
 {
  "name": "Ext.field.Password",
  "xtype": "passwordfield",
  "text": "The Password field creates a password input and is usually created inside a form.\nBecause it creates a password field, when the user enters text it will show up as stars.\nAside from that, the password field is just a normal text field. Here's an example of how\nto use it in a form:\n\n```javascript\n@example({ framework: 'extjs' })\n    Ext.create('Ext.form.Panel', {\n        fullscreen: true,\n        items: [\n            {\n                xtype: 'fieldset',\n                title: 'Register',\n                items: [\n                    {\n                        xtype: 'emailfield',\n                        label: 'Email',\n                        name: 'email'\n                    },\n                    {\n                        xtype: 'passwordfield',\n                        label: 'Password',\n                        name: 'password'\n                    }\n                ]\n            }\n        ]\n    });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, PasswordField } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtPasswordField\n                        width={200}\n                        label=\"Password\"\n                        required\n                        revealable\n                    />\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow=\"true\">\n                    <ExtPasswordField\n                        width=\"200\"\n                        label=\"Password\"\n                        required=\"true\"\n                        revealable=\"true\"\n                    >\n                    </ExtPasswordField>\n                </ExtFormPanel>\n            </ExtContainer>\n      `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-passwordfield\n            width=\"200\"\n            label=\"Password\"\n            required=\"true\"\n            revealable=\"true\"\n       >\n       </ext-passwordfield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-passwordfield.component';\n\nexport default class PasswordFieldComponent {}\n```\n\nOr on its own, outside of a form:\n\n    Ext.create('Ext.field.Password', {\n        label: 'Password',\n        value: 'existingPassword'\n    });\n\nBecause the password field inherits from {@link Ext.field.Text} it gains all of\nthe functionality that text fields provide, including getting and setting the value at runtime,\nvalidations and various events that are fired as the user interacts with the component.\nCheck out the {@link Ext.field.Text} docs to see the additional functionality available.\n"
 },
 {
  "name": "Ext.field.Picker",
  "xtype": "pickerfield",
  "text": "An abstract class for fields that have a single trigger which opens a \"picker\" popup\nabove the field. It provides a base implementation for toggling the picker's\nvisibility when the trigger is tapped.\n\nYou would not normally use this class directly, but instead use it as the parent\nclass for a specific picker field implementation.\n"
 },
 {
  "name": "Ext.field.Radio",
  "xtype": "radio",
  "text": "The radio field is an enhanced version of the native browser radio controls and is a good\nway of allowing your user to choose one option out of a selection of several (for example,\nchoosing a favorite color):\n```javascript\n@example({ framework: 'extjs' })\nvar form = Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'radiofield',\n            name : 'color',\n            value: 'red',\n            label: 'Red',\n            checked: true\n        },\n        {\n            xtype: 'radiofield',\n            name : 'color',\n            value: 'green',\n            label: 'Green'\n        },\n        {\n            xtype: 'radiofield',\n            name : 'color',\n            value: 'blue',\n            label: 'Blue'\n        }\n    ]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtRadioField, ExtFieldSet } from '@sencha/ext-react';\nconst radioProps = {\n    name: 'radios'\n};\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow layout={{type: 'vbox', align: 'left'}}>\n                    <ExtRadioField {...radioProps} boxLabel=\"Checked\" value=\"checked\"\n                          checked/>\n                    <ExtRadioField {...radioProps} boxLabel=\"Unchecked\"\n                         value=\"unchecked\"/>\n                    <ExtRadioField {...radioProps} boxLabel=\"Disabled\"\n                         value=\"disabled\" disabled/>\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer layout=\"center\">\n            <ExtFormPanel shadow=\"true\"\n                  [layout]=\"{type: 'vbox', align: 'left'}\">\n                <ExtRadioField name=\"radios\" boxLabel=\"Checked\" value=\"checked\"\n                   checked=\"true\"></ExtRadioField>\n                <ExtRadioField name=\"radios\" boxLabel=\"Unchecked\"\n                  value=\"unchecked\"></ExtRadioField>\n                <ExtRadioField name=\"radios\" boxLabel=\"Disabled\"\n                       value=\"disabled\" disabled=\"true\"></ExtRadioField>\n            </ExtFormPanel>\n        </ExtContainer>\n   `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel\n        shadow=\"true\"\n        layout='{\"type\": \"vbox\", \"align\": \"left\"}'\n   >\n       <ext-radiofield\n          name=\"radios\"\n          boxLabel=\"Checked\"\n          value=\"checked\"\n          checked=\"true\"\n       >\n       </ext-radiofield>\n       <ext-radiofield\n           name=\"radios\"\n           boxLabel=\"Unchecked\"\n           value=\"unchecked\"\n       >\n       </ext-radiofield>\n       <ext-radiofield\n           name=\"radios\"\n           boxLabel=\"Disabled\"\n           value=\"disabled\"\n           disabled=\"true\"\n       >\n       </ext-radiofield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-radiofield.component';\n\nexport default class RadioFieldComponent {}\n```\n\nAbove we created a simple form which allows the user to pick a color from the options red,\ngreen and blue. Because we gave each of the fields above the same {@link #cfg!name #name}, the radio\nfield ensures that only one of them can be checked at a time. When we come to get the values\nout of the form again or submit it to the server, only 1 value will be sent for each group of\nradio fields with the same name:\n\n    form.getValues(); //looks like {color: 'red'}\n    form.submit(); //sends a single field back to the server (in this case color: red)\n"
 },
 {
  "name": "Ext.field.Radio",
  "xtype": "radiofield",
  "text": "The radio field is an enhanced version of the native browser radio controls and is a good\nway of allowing your user to choose one option out of a selection of several (for example,\nchoosing a favorite color):\n```javascript\n@example({ framework: 'extjs' })\nvar form = Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'radiofield',\n            name : 'color',\n            value: 'red',\n            label: 'Red',\n            checked: true\n        },\n        {\n            xtype: 'radiofield',\n            name : 'color',\n            value: 'green',\n            label: 'Green'\n        },\n        {\n            xtype: 'radiofield',\n            name : 'color',\n            value: 'blue',\n            label: 'Blue'\n        }\n    ]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtRadioField, ExtFieldSet } from '@sencha/ext-react';\nconst radioProps = {\n    name: 'radios'\n};\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow layout={{type: 'vbox', align: 'left'}}>\n                    <ExtRadioField {...radioProps} boxLabel=\"Checked\" value=\"checked\"\n                          checked/>\n                    <ExtRadioField {...radioProps} boxLabel=\"Unchecked\"\n                         value=\"unchecked\"/>\n                    <ExtRadioField {...radioProps} boxLabel=\"Disabled\"\n                         value=\"disabled\" disabled/>\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer layout=\"center\">\n            <ExtFormPanel shadow=\"true\"\n                  [layout]=\"{type: 'vbox', align: 'left'}\">\n                <ExtRadioField name=\"radios\" boxLabel=\"Checked\" value=\"checked\"\n                   checked=\"true\"></ExtRadioField>\n                <ExtRadioField name=\"radios\" boxLabel=\"Unchecked\"\n                  value=\"unchecked\"></ExtRadioField>\n                <ExtRadioField name=\"radios\" boxLabel=\"Disabled\"\n                       value=\"disabled\" disabled=\"true\"></ExtRadioField>\n            </ExtFormPanel>\n        </ExtContainer>\n   `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel\n        shadow=\"true\"\n        layout='{\"type\": \"vbox\", \"align\": \"left\"}'\n   >\n       <ext-radiofield\n          name=\"radios\"\n          boxLabel=\"Checked\"\n          value=\"checked\"\n          checked=\"true\"\n       >\n       </ext-radiofield>\n       <ext-radiofield\n           name=\"radios\"\n           boxLabel=\"Unchecked\"\n           value=\"unchecked\"\n       >\n       </ext-radiofield>\n       <ext-radiofield\n           name=\"radios\"\n           boxLabel=\"Disabled\"\n           value=\"disabled\"\n           disabled=\"true\"\n       >\n       </ext-radiofield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-radiofield.component';\n\nexport default class RadioFieldComponent {}\n```\n\nAbove we created a simple form which allows the user to pick a color from the options red,\ngreen and blue. Because we gave each of the fields above the same {@link #cfg!name #name}, the radio\nfield ensures that only one of them can be checked at a time. When we come to get the values\nout of the form again or submit it to the server, only 1 value will be sent for each group of\nradio fields with the same name:\n\n    form.getValues(); //looks like {color: 'red'}\n    form.submit(); //sends a single field back to the server (in this case color: red)\n"
 },
 {
  "name": "Ext.field.Radio",
  "xtype": "radio",
  "text": "The radio field is an enhanced version of the native browser radio controls and is a good\nway of allowing your user to choose one option out of a selection of several (for example,\nchoosing a favorite color):\n```javascript\n@example({ framework: 'extjs' })\nvar form = Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'radiofield',\n            name : 'color',\n            value: 'red',\n            label: 'Red',\n            checked: true\n        },\n        {\n            xtype: 'radiofield',\n            name : 'color',\n            value: 'green',\n            label: 'Green'\n        },\n        {\n            xtype: 'radiofield',\n            name : 'color',\n            value: 'blue',\n            label: 'Blue'\n        }\n    ]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtRadioField, ExtFieldSet } from '@sencha/ext-react';\nconst radioProps = {\n    name: 'radios'\n};\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow layout={{type: 'vbox', align: 'left'}}>\n                    <ExtRadioField {...radioProps} boxLabel=\"Checked\" value=\"checked\"\n                          checked/>\n                    <ExtRadioField {...radioProps} boxLabel=\"Unchecked\"\n                         value=\"unchecked\"/>\n                    <ExtRadioField {...radioProps} boxLabel=\"Disabled\"\n                         value=\"disabled\" disabled/>\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer layout=\"center\">\n            <ExtFormPanel shadow=\"true\"\n                  [layout]=\"{type: 'vbox', align: 'left'}\">\n                <ExtRadioField name=\"radios\" boxLabel=\"Checked\" value=\"checked\"\n                   checked=\"true\"></ExtRadioField>\n                <ExtRadioField name=\"radios\" boxLabel=\"Unchecked\"\n                  value=\"unchecked\"></ExtRadioField>\n                <ExtRadioField name=\"radios\" boxLabel=\"Disabled\"\n                       value=\"disabled\" disabled=\"true\"></ExtRadioField>\n            </ExtFormPanel>\n        </ExtContainer>\n   `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel\n        shadow=\"true\"\n        layout='{\"type\": \"vbox\", \"align\": \"left\"}'\n   >\n       <ext-radiofield\n          name=\"radios\"\n          boxLabel=\"Checked\"\n          value=\"checked\"\n          checked=\"true\"\n       >\n       </ext-radiofield>\n       <ext-radiofield\n           name=\"radios\"\n           boxLabel=\"Unchecked\"\n           value=\"unchecked\"\n       >\n       </ext-radiofield>\n       <ext-radiofield\n           name=\"radios\"\n           boxLabel=\"Disabled\"\n           value=\"disabled\"\n           disabled=\"true\"\n       >\n       </ext-radiofield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-radiofield.component';\n\nexport default class RadioFieldComponent {}\n```\n\nAbove we created a simple form which allows the user to pick a color from the options red,\ngreen and blue. Because we gave each of the fields above the same {@link #cfg!name #name}, the radio\nfield ensures that only one of them can be checked at a time. When we come to get the values\nout of the form again or submit it to the server, only 1 value will be sent for each group of\nradio fields with the same name:\n\n    form.getValues(); //looks like {color: 'red'}\n    form.submit(); //sends a single field back to the server (in this case color: red)\n"
 },
 {
  "name": "Ext.field.Radio",
  "xtype": "radiofield",
  "text": "The radio field is an enhanced version of the native browser radio controls and is a good\nway of allowing your user to choose one option out of a selection of several (for example,\nchoosing a favorite color):\n```javascript\n@example({ framework: 'extjs' })\nvar form = Ext.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'radiofield',\n            name : 'color',\n            value: 'red',\n            label: 'Red',\n            checked: true\n        },\n        {\n            xtype: 'radiofield',\n            name : 'color',\n            value: 'green',\n            label: 'Green'\n        },\n        {\n            xtype: 'radiofield',\n            name : 'color',\n            value: 'blue',\n            label: 'Blue'\n        }\n    ]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtRadioField, ExtFieldSet } from '@sencha/ext-react';\nconst radioProps = {\n    name: 'radios'\n};\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow layout={{type: 'vbox', align: 'left'}}>\n                    <ExtRadioField {...radioProps} boxLabel=\"Checked\" value=\"checked\"\n                          checked/>\n                    <ExtRadioField {...radioProps} boxLabel=\"Unchecked\"\n                         value=\"unchecked\"/>\n                    <ExtRadioField {...radioProps} boxLabel=\"Disabled\"\n                         value=\"disabled\" disabled/>\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer layout=\"center\">\n            <ExtFormPanel shadow=\"true\"\n                  [layout]=\"{type: 'vbox', align: 'left'}\">\n                <ExtRadioField name=\"radios\" boxLabel=\"Checked\" value=\"checked\"\n                   checked=\"true\"></ExtRadioField>\n                <ExtRadioField name=\"radios\" boxLabel=\"Unchecked\"\n                  value=\"unchecked\"></ExtRadioField>\n                <ExtRadioField name=\"radios\" boxLabel=\"Disabled\"\n                       value=\"disabled\" disabled=\"true\"></ExtRadioField>\n            </ExtFormPanel>\n        </ExtContainer>\n   `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel\n        shadow=\"true\"\n        layout='{\"type\": \"vbox\", \"align\": \"left\"}'\n   >\n       <ext-radiofield\n          name=\"radios\"\n          boxLabel=\"Checked\"\n          value=\"checked\"\n          checked=\"true\"\n       >\n       </ext-radiofield>\n       <ext-radiofield\n           name=\"radios\"\n           boxLabel=\"Unchecked\"\n           value=\"unchecked\"\n       >\n       </ext-radiofield>\n       <ext-radiofield\n           name=\"radios\"\n           boxLabel=\"Disabled\"\n           value=\"disabled\"\n           disabled=\"true\"\n       >\n       </ext-radiofield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-radiofield.component';\n\nexport default class RadioFieldComponent {}\n```\n\nAbove we created a simple form which allows the user to pick a color from the options red,\ngreen and blue. Because we gave each of the fields above the same {@link #cfg!name #name}, the radio\nfield ensures that only one of them can be checked at a time. When we come to get the values\nout of the form again or submit it to the server, only 1 value will be sent for each group of\nradio fields with the same name:\n\n    form.getValues(); //looks like {color: 'red'}\n    form.submit(); //sends a single field back to the server (in this case color: red)\n"
 },
 {
  "name": "Ext.field.RadioGroup",
  "xtype": "radiogroup",
  "text": "This Field is useful for containing multiple {@link Ext.field.Radio}.\n\nIt plots items into wither horizontal / vertical depending on\n{@link Ext.field.FieldGroupContainer#cfg!vertical Ext.field.FieldGroupContainer#vertical} config properties.\n\n## Example usage\n\n```javascript\n @example({ framework: 'extjs' })\n    Ext.create('Ext.form.Panel', {\n        title: 'RadioGroup Example',\n        width: 300,\n        height: 125,\n        fullscreen: true,\n        items:[{\n            xtype: 'radiogroup',\n            label: 'Two Columns',\n            // Arrange radio field distributed vertically.\n            // Automatically latter items flow to next column if\n            // available height is less to display all the items in single column.\n            vertical: true,\n            height: 100,\n            items: [\n                { label: 'Item 1', name: 'rb', value: '1' },\n                { label: 'Item 2', name: 'rb', value: '2', checked: true},\n                { label: 'Item 3', name: 'rb', value: '3' },\n                { label: 'Item 4', name: 'rb', value: '4' },\n                { label: 'Item 5', name: 'rb', value: '5' },\n                { label: 'Item 6', name: 'rb', value: '6' }\n            ]\n        }]\n    });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtFormPanel, ExtRadioGroup, ExtRadioField } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtFormPanel\n                title=\"RadioGroup Example\"\n                width={600}\n                height={300}\n                fullscreen\n            >\n                <ExtRadioGroup\n                    label=\"Two Columns\"\n                    vertical={true}\n                    height={100}\n                >\n                    <ExtRadioField\n                        label=\"Item 1\"\n                        name=\"rb\"\n                        value={1}\n                    >\n                    </ExtRadioField>\n                    <ExtRadioField\n                        label=\"Item 2\"\n                        name=\"rb\"\n                        value={2}\n                        checked={true}\n                    >\n                    </ExtRadioField>\n                    <ExtRadioField\n                        label=\"Item 3\"\n                        name=\"rb\"\n                        value={3}\n                    >\n                    </ExtRadioField>\n                    <ExtRadioField\n                        label=\"Item 4\"\n                        name=\"rb\"\n                        value={4}\n                    >\n                    </ExtRadioField>\n                    <ExtRadioField\n                        label=\"Item 5\"\n                        name=\"rb\"\n                        value={5}\n                    >\n                    </ExtRadioField>\n                    <ExtRadioField\n                        label=\"Item 6\"\n                        name=\"rb\"\n                        value={6}\n                    >\n                    </ExtRadioField>\n                </ExtRadioGroup>\n            </ExtFormPanel>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'radiogroup-component',\n    styles: [``],\n    template: `\n      <ExtFormPanel\n           title=\"RadioGroup Example\"\n           [width]=\"600\"\n           [height]=\"400\"\n           [fullscreen]=\"true\"\n       >\n           <ExtRadioGroup\n               [label]=\"'Two Columns'\"\n               [vertical]=\"true\"\n               [height]=\"100\"\n           >\n               <ExtRadioField\n                   [label]=\"'Item 1'\"\n                   [name]=\"'rb'\"\n                   value=\"1\"\n               >\n               </ExtRadioField>\n               <ExtRadioField\n                   [label]=\"'Item 2'\"\n                   [name]=\"'rb'\"\n                   value=\"2\"\n                   [checked]=\"true\"\n               >\n               </ExtRadioField>\n               <ExtRadioField\n                   [label]=\"'Item 3'\"\n                   [name]=\"'rb'\"\n                   value=\"3\"\n               >\n               </ExtRadioField>\n               <ExtRadioField\n                   [label]=\"'Item 4'\"\n                   [name]=\"'rb'\"\n                   value=\"4\"\n               >\n               </ExtRadioField>\n               <ExtRadioField\n                   [label]=\"'Item 5'\"\n                   [name]=\"'rb'\"\n                   value=\"5\"\n               >\n               </ExtRadioField>\n               <ExtRadioField\n                   [label]=\"'Item 6'\"\n                   [name]=\"'rb'\"\n                   value=\"6\"\n               >\n               </ExtRadioField>\n           </ExtRadioGroup>\n       </ExtFormPanel>`\n})\nexport class RadioGroupComponents  {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-formpanel\n     title=\"RadioGroup Example\"\n     width=\"300\"\n     height=\"125\"\n     fullscreen=\"true\"\n >\n  <ext-radiogroup\n      label=\"Two Columns\"\n      vertical=\"true\"\n      height=\"100\"\n  >\n      <ext-radiofield\n          label=\"Item 1\"\n          name=\"rb\"\n          value=\"1\"\n      >\n      </ext-radiofield>\n      <ext-radiofield\n          label=\"Item 2\"\n          name=\"rb\"\n          value=\"2\"\n          checked=\"true\"\n      >\n      </ext-radiofield>\n      <ext-radiofield\n          label=\"Item 3\"\n          name=\"rb\"\n          value=\"3\"\n      >\n      </ext-radiofield>\n      <ext-radiofield\n          label=\"Item 4\"\n          name=\"rb\"\n          value=\"4\"\n      >\n      </ext-radiofield>\n      <ext-radiofield\n          label=\"Item 5\"\n          name=\"rb\"\n          value=\"5\"\n      >\n      </ext-radiofield>\n      <ext-radiofield\n          label=\"Item 6\"\n          name=\"rb\"\n          value=\"6\"\n      >\n      </ext-radiofield>\n  </ext-radiogroup>\n </ext-formpanel>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-radiogroup.component';\nimport '@sencha/ext-web-components/dist/ext-radiofield.component';\nexport default class RadioGroupComponent {}\n```\n\n## Binding Example\n\nIn the below example, \"Item 2\" will initially be checked using `myValue: '2'` from\nthe ViewModel.\n\n    @example\n    Ext.define('MyApp.main.view.MainModel', {\n        extend: 'Ext.app.ViewModel',\n        alias: 'viewmodel.main',\n        data: {\n            myValue: '2'\n        }\n    });\n\n    Ext.create('Ext.form.Panel', {\n        title: 'RadioGroup Example',\n        viewModel: {\n            type: 'main'\n        },\n        width: 300,\n        bodyPadding: 10,\n        renderTo: Ext.getBody(),\n        items:[{\n            xtype: 'radiogroup',\n            label: 'Two Columns',\n            vertical: true,\n            height: 100,\n            bind: '{myValue}',\n            items: [\n                { label: 'Item 1', name: 'rb', value: '1' },\n                { label: 'Item 2', name: 'rb', value: '2' },\n                { label: 'Item 3', name: 'rb', value: '3' },\n                { label: 'Item 4', name: 'rb', value: '4' },\n                { label: 'Item 5', name: 'rb', value: '5' },\n                { label: 'Item 6', name: 'rb', value: '6' }\n            ]\n        }]\n    });\n"
 },
 {
  "name": "Ext.field.Search",
  "xtype": "searchfield",
  "text": "The Search field creates an HTML5 search input and is usually created inside a form.\nBecause it creates an HTML search input type, the visual styling of this input is\nslightly different to normal text input controls (the corners are rounded), though the virtual\nkeyboard displayed by the operating system is the standard keyboard control.\n\nAs with all other form fields, the search field gains a \"clear\" button that appears\nwhenever there is text entered into the form, and which removes that text when tapped.\n\n```javascript\n @example({ framework: 'extjs' })\n    Ext.create('Ext.form.Panel', {\n        fullscreen: true,\n        items: [{\n         xtype: 'fieldset',\n         title: 'Search',\n         items: [{\n             xtype: 'searchfield',\n             label: 'Query',\n             name: 'query'\n         }]\n    }]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtSearchField } from '@sencha/ext-react'\n\nexport default class SearchFieldExample extends Component {\n    state = { };\n    search = (field, value) => {\n        this.setState({ query: value });\n    }\n\n    render() {\n        const { query } = this.state;\n\n        return (\n               <ExtContainer layout=\"center\">\n                   <ExtFormPanel shadow>\n                       <ExtSearchField\n                           value={query}\n                           width=\"300\"\n                           placeholder=\"Search...\"\n                           onChange={this.search}\n                       />\n                       { query && <div>You searched for \"{query}\"</div> }\n                   </ExtFormPanel>\n               </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer layout=\"center\">\n            <ExtFormPanel shadow=\"true\" >\n                <ExtSearchField\n                    [value]=\"query\"\n                    width=\"300\"\n                    placeholder=\"Search...\"\n                    (change)=\"search($event)\"\n                >\n                </ExtSearchField>\n                <div>You searched for \"{{query}}\"</div>\n            </ExtFormPanel>\n         </ExtContainer>\n    `\n})\nexport class AppComponent {\n    query:string = \"\";\n    search = (event) => {\n        console.log(\"In search : \" + event.newValue);\n        this.query = event.newValue;\n    }\n}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-searchfield\n            width=\"300\"\n            placeholder=\"Search...\"\n            onChange=\"searchfield.search\"\n            onready=\"searchfield.searchFieldReady()\"\n       >\n       </ext-searchfield>\n       <ext-container\n            onready=\"searchfield.searchMessageReady()\"\n       >\n       </ext-container>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-searchfield.component';\n\nexport default class SearchFieldComponent {\n\n   search = (field, value) => {\n      this.searchFieldView.setValue(value);\n      this.searchMessage.setHTML(`<div>You searched for ${value} </div>`);\n   }\n\n   searchFieldReady = (event) => {\n       this.searchFieldView = event.detail.cmp;\n   }\n\n   searchMessageRead = (event) => {\n       this.searchMessage = event.detail.cmp;\n   }\n}\n\nwindow.searchfield = new SearchFieldComponent();\n```\n\nOr on its own, outside of a form:\n\n    Ext.create('Ext.field.Search', {\n        label: 'Search:',\n        value: 'query'\n    });\n\nBecause search field inherits from {@link Ext.field.Text} it gains all of the\nfunctionality that text fields provide, including getting and setting the value at runtime,\nvalidations and various events that are fired as the user interacts with the component.\nCheck out the {@link Ext.field.Text} docs to see the additional functionality available.\n"
 },
 {
  "name": "Ext.field.Search",
  "xtype": "searchfield",
  "text": "The Search field creates an HTML5 search input and is usually created inside a form.\nBecause it creates an HTML search input type, the visual styling of this input is\nslightly different to normal text input controls (the corners are rounded), though the virtual\nkeyboard displayed by the operating system is the standard keyboard control.\n\nAs with all other form fields, the search field gains a \"clear\" button that appears\nwhenever there is text entered into the form, and which removes that text when tapped.\n\n```javascript\n @example({ framework: 'extjs' })\n    Ext.create('Ext.form.Panel', {\n        fullscreen: true,\n        items: [{\n         xtype: 'fieldset',\n         title: 'Search',\n         items: [{\n             xtype: 'searchfield',\n             label: 'Query',\n             name: 'query'\n         }]\n    }]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtSearchField } from '@sencha/ext-react'\n\nexport default class SearchFieldExample extends Component {\n    state = { };\n    search = (field, value) => {\n        this.setState({ query: value });\n    }\n\n    render() {\n        const { query } = this.state;\n\n        return (\n               <ExtContainer layout=\"center\">\n                   <ExtFormPanel shadow>\n                       <ExtSearchField\n                           value={query}\n                           width=\"300\"\n                           placeholder=\"Search...\"\n                           onChange={this.search}\n                       />\n                       { query && <div>You searched for \"{query}\"</div> }\n                   </ExtFormPanel>\n               </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer layout=\"center\">\n            <ExtFormPanel shadow=\"true\" >\n                <ExtSearchField\n                    [value]=\"query\"\n                    width=\"300\"\n                    placeholder=\"Search...\"\n                    (change)=\"search($event)\"\n                >\n                </ExtSearchField>\n                <div>You searched for \"{{query}}\"</div>\n            </ExtFormPanel>\n         </ExtContainer>\n    `\n})\nexport class AppComponent {\n    query:string = \"\";\n    search = (event) => {\n        console.log(\"In search : \" + event.newValue);\n        this.query = event.newValue;\n    }\n}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-searchfield\n            width=\"300\"\n            placeholder=\"Search...\"\n            onChange=\"searchfield.search\"\n            onready=\"searchfield.searchFieldReady()\"\n       >\n       </ext-searchfield>\n       <ext-container\n            onready=\"searchfield.searchMessageReady()\"\n       >\n       </ext-container>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-searchfield.component';\n\nexport default class SearchFieldComponent {\n\n   search = (field, value) => {\n      this.searchFieldView.setValue(value);\n      this.searchMessage.setHTML(`<div>You searched for ${value} </div>`);\n   }\n\n   searchFieldReady = (event) => {\n       this.searchFieldView = event.detail.cmp;\n   }\n\n   searchMessageRead = (event) => {\n       this.searchMessage = event.detail.cmp;\n   }\n}\n\nwindow.searchfield = new SearchFieldComponent();\n```\n\nOr on its own, outside of a form:\n\n    Ext.create('Ext.field.Search', {\n        label: 'Search:',\n        value: 'query'\n    });\n\nBecause search field inherits from {@link Ext.field.Text} it gains all of the\nfunctionality that text fields provide, including getting and setting the value at runtime,\nvalidations and various events that are fired as the user interacts with the component.\nCheck out the {@link Ext.field.Text} docs to see the additional functionality available.\n"
 },
 {
  "name": "Ext.field.Select",
  "xtype": "selectfield",
  "text": "Simple Select field wrapper. Example usage:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [{\n        xtype: 'fieldset',\n        title: 'Select',\n        items: [{\n            xtype: 'selectfield',\n            label: 'Choose one',\n            options: [{\n                text: 'First Option',\n                value: 'first'\n            }, {\n                text: 'Second Option',\n                value: 'second'\n            }, {\n                text: 'Third Option',\n                value: 'third'\n            }]\n        }]\n    }]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtFormPanel, ExtSelectField, ExtContainer } from '@sencha/ext-react';\n\nExt.require('Ext.Toast');\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtSelectField\n                        label=\"Select\"\n                        width=\"200\"\n                        onChange={(field, newValue)\n                             => Ext.toast(`You selected ${newValue.get('value')}`)}\n                        options={[\n                            { text: 'Option 1', value: 1 },\n                            { text: 'Option 2', value: 2 },\n                            { text: 'Option 3', value: 3 }\n                        ]}\n                    />\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow=\"true\" >\n                    <ExtSelectField\n                        label=\"Select\"\n                        width=\"200\"\n                        (change)=\"onChange($event)\"\n                        [options]=\"[\n                            { text: 'Option 1', value: 1 },\n                            { text: 'Option 2', value: 2 },\n                            { text: 'Option 3', value: 3 }\n                        ]\"\n                     ></ExtSelectField>\n                </ExtFormPanel>\n            </ExtContainer>\n        `\n})\nexport class AppComponent {\n    onChange = (event) => {\n        Ext.toast(`You selected ${event.newValue}`)\n    }\n }\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-selectfield\n            label=\"Select\"\n            width=\"200\"\n            onChange=\"selectfield.onchangeselectfield\"\n            options='[\n                { \"text\": \"Option 1\", \"value\": \"1\" },\n                { \"text\": \"Option 2\", \"value\": \"2\" },\n                { \"text\": \"Option 3\", \"value\": \"3\" }\n            ]'\n       >\n       </ext-selectfield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-selectfield.component';\n\nexport default class SelectFieldComponent {\n\n   onchangeselectfield = (event) => {\n        return Ext.toast(`You selected the item with value ${event.detail.newValue}`);\n   }\n}\n\nwindow.selectfield = new SelectFieldComponent();\n```\n"
 },
 {
  "name": "Ext.field.Select",
  "xtype": "selectfield",
  "text": "Simple Select field wrapper. Example usage:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [{\n        xtype: 'fieldset',\n        title: 'Select',\n        items: [{\n            xtype: 'selectfield',\n            label: 'Choose one',\n            options: [{\n                text: 'First Option',\n                value: 'first'\n            }, {\n                text: 'Second Option',\n                value: 'second'\n            }, {\n                text: 'Third Option',\n                value: 'third'\n            }]\n        }]\n    }]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtFormPanel, ExtSelectField, ExtContainer } from '@sencha/ext-react';\n\nExt.require('Ext.Toast');\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtSelectField\n                        label=\"Select\"\n                        width=\"200\"\n                        onChange={(field, newValue)\n                             => Ext.toast(`You selected ${newValue.get('value')}`)}\n                        options={[\n                            { text: 'Option 1', value: 1 },\n                            { text: 'Option 2', value: 2 },\n                            { text: 'Option 3', value: 3 }\n                        ]}\n                    />\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow=\"true\" >\n                    <ExtSelectField\n                        label=\"Select\"\n                        width=\"200\"\n                        (change)=\"onChange($event)\"\n                        [options]=\"[\n                            { text: 'Option 1', value: 1 },\n                            { text: 'Option 2', value: 2 },\n                            { text: 'Option 3', value: 3 }\n                        ]\"\n                     ></ExtSelectField>\n                </ExtFormPanel>\n            </ExtContainer>\n        `\n})\nexport class AppComponent {\n    onChange = (event) => {\n        Ext.toast(`You selected ${event.newValue}`)\n    }\n }\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-selectfield\n            label=\"Select\"\n            width=\"200\"\n            onChange=\"selectfield.onchangeselectfield\"\n            options='[\n                { \"text\": \"Option 1\", \"value\": \"1\" },\n                { \"text\": \"Option 2\", \"value\": \"2\" },\n                { \"text\": \"Option 3\", \"value\": \"3\" }\n            ]'\n       >\n       </ext-selectfield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-selectfield.component';\n\nexport default class SelectFieldComponent {\n\n   onchangeselectfield = (event) => {\n        return Ext.toast(`You selected the item with value ${event.detail.newValue}`);\n   }\n}\n\nwindow.selectfield = new SelectFieldComponent();\n```\n"
 },
 {
  "name": "Ext.field.SingleSlider",
  "xtype": "singlesliderfield",
  "text": "The slider is a way to allow the user to select a value from a given numerical range.\nYou might use it for choosing\n"
 },
 {
  "name": "Ext.field.Slider",
  "xtype": "sliderfield",
  "text": "The slider is a way to allow the user to select a value from a given numerical range.\nYou might use it for choosing a percentage, combine two of them to get min and max values,\nor use three of them to specify the hex values for a color. Each slider contains a single\n'thumb' that can be dragged along the slider's length to change the value. Sliders are equally\nuseful inside {@link Ext.form.Panel} and standalone. Here's how to quickly create a slider\nin form, in this case enabling a user to choose a percentage:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'sliderfield',\n            label: 'Percentage',\n            value: 50,\n            minValue: 0,\n            maxValue: 100\n        }\n    ]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtSliderField } from '@sencha/ext-react';\nexport default class SliderFieldExample extends Component {\n        state = {\n            singleValue: 20,\n            multipleValue: [10, 70]\n        };\n\n        onSingleChange = (field, value) => {\n            this.setState({ singleValue: value });\n        }\n\n        onMultipleChange = (field, value) => {\n            this.setState({ multipleValue: value });\n        }\n\n        render() {\n            const { singleValue, multipleValue } = this.state;\n\n            return (\n                <ExtContainer layout=\"center\">\n                    <ExtFormPanel shadow width=\"300\">\n                        <ExtSliderField\n                            onChange={this.onSingleChange}\n                            label=\"Single Thumb\"\n                            value={singleValue}\n                        />\n                        <div style={{marginBottom: '20px'}}>Value: {singleValue}</div>\n                        <ExtSliderField\n                            onChange={this.onMultipleChange}\n                            label=\"Multiple Thumbs\"\n                            values={multipleValue}\n                        />\n                        <div>Values: {multipleValue.join(', ')}</div>\n                    </ExtFormPanel>\n                </ExtContainer>\n            )\n        }\n    }\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer [layout]=\"'center'\">\n            <ExtFormPanel [shadow]=\"true\" [width]=\"400\" [height]=\"300\">\n                <ExtSliderField\n                    (change)=\"onSingleChange($event)\"\n                    label=\"Single Thumb\"\n                    [value]=\"singleValue\"\n                >\n                </ExtSliderField>\n                <ExtContainer [style]=\"{marginBottom: 20}\"\n                     [html]=\"'Value: '+singleValue\">\n                </ExtContainer>\n                <ExtSliderField\n                    (change)=\"onMultipleChange($event)\"\n                    label=\"Multiple Thumbs\"\n                    [value]=\"multipleValue\"\n                >\n                </ExtSliderField>\n                <ExtContainer\n                    [html]=\"'Values: '+multipleValue.join(', ')\">\n                </ExtContainer>\n            </ExtFormPanel>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {\n    singleValue:number = 20;\n    multipleValue:number[] = [10, 70];\n\n    onSingleChange = (params) => {\n        this.singleValue = params.newValue;\n    }\n\n    onMultipleChange = (params) => {\n        this.multipleValue = params.newValue;\n    }\n}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel\n        shadow=\"true\"\n        width=\"300\"\n   >\n       <ext-sliderfield\n            onChange=\"sliderfield.onSingleChange\"\n            label=\"Single Thumb\"\n            value=\"20\"\n            onready=\"sliderfield.readySingleChangeSliderField\"\n       >\n       </ext-sliderfield>\n       <ext-container\n           style='{marginBottom: \"20px\"}'\n           onready=\"sliderfield.readySingleValueMessage\"\n       >\n       </ext-container>\n       <ext-sliderfield\n            onChange=\"sliderfield.onMultipleChange\"\n            label=\"Multiple Thumbs\"\n            value=\"[10,70]\"\n            onready=\"sliderfield.readyMultipleChangeSliderField\"\n       >\n       </ext-sliderfield>\n       <ext-container\n            onready=\"sliderfield.readyMultipleValueMessage\"\n       >\n       </ext-container>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-sliderfield.component';\n\nexport default class SliderFieldComponent {\n\n  constructor() {\n      this.singleValue = 20;\n      this.multipleValue = [10, 70];\n  }\n\n  onSingleChange = (event) => {\n      this.singleValueMessageView.setHTML(`Values: ${event.detail.newValue}`)\n  }\n\n  readySingleChangeSliderField = (event) => {\n      this.singleValueSliderFieldView = event.detail.cmp;\n  }\n\n  readyMultipleChangeSliderField = (event) => {\n      this.multipleValueSliderFieldView = event.detail.cmp;\n  }\n\n  onMultipleChange = (event) => {\n      this.multipleValueMessageView.setHTML(`Values: ${event.detail.newValue.join(',')}`)\n  }\n\n  readyMultipleValueMessage = (event) => {\n       this.multipleValueMessageView = event.detail.cmp;\n       this.multipleValueMessageView.setHtml(`Values: ${this.multipleValue}`)\n  }\n\n  readySingleValueMessage = (event) => {\n       this.singleValueMessageView = event.detail.cmp;\n       this.singleValueMessageView.setHtml(`Value: ${this.singleValue}`);\n  }\n}\n\n window.sliderfield = new SliderFieldComponent();\n```\n\nIn this case we set a starting value of 50%, and defined the min and max values to be 0 and\n100 respectively, giving us a percentage slider. Because this is such a common use case, the\ndefaults for {@link #cfg!minValue #minValue} and {@link #cfg!maxValue #maxValue} are already set to 0 and 100 so in the\nexample above they could be removed.\n\nIt's often useful to render sliders outside the context of a form panel too. In this example\nwe create a slider that allows a user to choose the waist measurement of a pair of jeans.\nLet's say the online store we're making this for sells jeans with waist sizes from 24 inches\nto 60 inches in 2 inch increments - here's how we might achieve that:\n\n    @example\n    Ext.create('Ext.form.Panel', {\n        fullscreen: true,\n        items: [\n            {\n                xtype: 'sliderfield',\n                label: 'Waist Measurement',\n                minValue: 24,\n                maxValue: 60,\n                increment: 2,\n                value: 32\n            }\n        ]\n    });\n\nNow that we've got our slider, we can ask it what value it currently has and listen\nto events that it fires. For example, if we wanted our app to show different images\nfor different sizes, we can listen to the {@link #event!change #change} event to be informed whenever\nthe slider is moved:\n\n    slider.on('change', function(field, newValue) {\n        if (newValue[0] > 40) {\n            imgComponent.setSrc('large.png');\n        } else {\n            imgComponent.setSrc('small.png');\n        }\n    }, this);\n\nHere we listened to the {@link #event!change #change} event on the slider and updated the background\nimage of an {@link Ext.Img} based on what size the user selected. Of\ncourse, you can use any logic inside your event listener.\n"
 },
 {
  "name": "Ext.field.Slider",
  "xtype": "sliderfield",
  "text": "The slider is a way to allow the user to select a value from a given numerical range.\nYou might use it for choosing a percentage, combine two of them to get min and max values,\nor use three of them to specify the hex values for a color. Each slider contains a single\n'thumb' that can be dragged along the slider's length to change the value. Sliders are equally\nuseful inside {@link Ext.form.Panel} and standalone. Here's how to quickly create a slider\nin form, in this case enabling a user to choose a percentage:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'sliderfield',\n            label: 'Percentage',\n            value: 50,\n            minValue: 0,\n            maxValue: 100\n        }\n    ]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtSliderField } from '@sencha/ext-react';\nexport default class SliderFieldExample extends Component {\n        state = {\n            singleValue: 20,\n            multipleValue: [10, 70]\n        };\n\n        onSingleChange = (field, value) => {\n            this.setState({ singleValue: value });\n        }\n\n        onMultipleChange = (field, value) => {\n            this.setState({ multipleValue: value });\n        }\n\n        render() {\n            const { singleValue, multipleValue } = this.state;\n\n            return (\n                <ExtContainer layout=\"center\">\n                    <ExtFormPanel shadow width=\"300\">\n                        <ExtSliderField\n                            onChange={this.onSingleChange}\n                            label=\"Single Thumb\"\n                            value={singleValue}\n                        />\n                        <div style={{marginBottom: '20px'}}>Value: {singleValue}</div>\n                        <ExtSliderField\n                            onChange={this.onMultipleChange}\n                            label=\"Multiple Thumbs\"\n                            values={multipleValue}\n                        />\n                        <div>Values: {multipleValue.join(', ')}</div>\n                    </ExtFormPanel>\n                </ExtContainer>\n            )\n        }\n    }\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer [layout]=\"'center'\">\n            <ExtFormPanel [shadow]=\"true\" [width]=\"400\" [height]=\"300\">\n                <ExtSliderField\n                    (change)=\"onSingleChange($event)\"\n                    label=\"Single Thumb\"\n                    [value]=\"singleValue\"\n                >\n                </ExtSliderField>\n                <ExtContainer [style]=\"{marginBottom: 20}\"\n                     [html]=\"'Value: '+singleValue\">\n                </ExtContainer>\n                <ExtSliderField\n                    (change)=\"onMultipleChange($event)\"\n                    label=\"Multiple Thumbs\"\n                    [value]=\"multipleValue\"\n                >\n                </ExtSliderField>\n                <ExtContainer\n                    [html]=\"'Values: '+multipleValue.join(', ')\">\n                </ExtContainer>\n            </ExtFormPanel>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {\n    singleValue:number = 20;\n    multipleValue:number[] = [10, 70];\n\n    onSingleChange = (params) => {\n        this.singleValue = params.newValue;\n    }\n\n    onMultipleChange = (params) => {\n        this.multipleValue = params.newValue;\n    }\n}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel\n        shadow=\"true\"\n        width=\"300\"\n   >\n       <ext-sliderfield\n            onChange=\"sliderfield.onSingleChange\"\n            label=\"Single Thumb\"\n            value=\"20\"\n            onready=\"sliderfield.readySingleChangeSliderField\"\n       >\n       </ext-sliderfield>\n       <ext-container\n           style='{marginBottom: \"20px\"}'\n           onready=\"sliderfield.readySingleValueMessage\"\n       >\n       </ext-container>\n       <ext-sliderfield\n            onChange=\"sliderfield.onMultipleChange\"\n            label=\"Multiple Thumbs\"\n            value=\"[10,70]\"\n            onready=\"sliderfield.readyMultipleChangeSliderField\"\n       >\n       </ext-sliderfield>\n       <ext-container\n            onready=\"sliderfield.readyMultipleValueMessage\"\n       >\n       </ext-container>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-sliderfield.component';\n\nexport default class SliderFieldComponent {\n\n  constructor() {\n      this.singleValue = 20;\n      this.multipleValue = [10, 70];\n  }\n\n  onSingleChange = (event) => {\n      this.singleValueMessageView.setHTML(`Values: ${event.detail.newValue}`)\n  }\n\n  readySingleChangeSliderField = (event) => {\n      this.singleValueSliderFieldView = event.detail.cmp;\n  }\n\n  readyMultipleChangeSliderField = (event) => {\n      this.multipleValueSliderFieldView = event.detail.cmp;\n  }\n\n  onMultipleChange = (event) => {\n      this.multipleValueMessageView.setHTML(`Values: ${event.detail.newValue.join(',')}`)\n  }\n\n  readyMultipleValueMessage = (event) => {\n       this.multipleValueMessageView = event.detail.cmp;\n       this.multipleValueMessageView.setHtml(`Values: ${this.multipleValue}`)\n  }\n\n  readySingleValueMessage = (event) => {\n       this.singleValueMessageView = event.detail.cmp;\n       this.singleValueMessageView.setHtml(`Value: ${this.singleValue}`);\n  }\n}\n\n window.sliderfield = new SliderFieldComponent();\n```\n\nIn this case we set a starting value of 50%, and defined the min and max values to be 0 and\n100 respectively, giving us a percentage slider. Because this is such a common use case, the\ndefaults for {@link #cfg!minValue #minValue} and {@link #cfg!maxValue #maxValue} are already set to 0 and 100 so in the\nexample above they could be removed.\n\nIt's often useful to render sliders outside the context of a form panel too. In this example\nwe create a slider that allows a user to choose the waist measurement of a pair of jeans.\nLet's say the online store we're making this for sells jeans with waist sizes from 24 inches\nto 60 inches in 2 inch increments - here's how we might achieve that:\n\n    @example\n    Ext.create('Ext.form.Panel', {\n        fullscreen: true,\n        items: [\n            {\n                xtype: 'sliderfield',\n                label: 'Waist Measurement',\n                minValue: 24,\n                maxValue: 60,\n                increment: 2,\n                value: 32\n            }\n        ]\n    });\n\nNow that we've got our slider, we can ask it what value it currently has and listen\nto events that it fires. For example, if we wanted our app to show different images\nfor different sizes, we can listen to the {@link #event!change #change} event to be informed whenever\nthe slider is moved:\n\n    slider.on('change', function(field, newValue) {\n        if (newValue[0] > 40) {\n            imgComponent.setSrc('large.png');\n        } else {\n            imgComponent.setSrc('small.png');\n        }\n    }, this);\n\nHere we listened to the {@link #event!change #change} event on the slider and updated the background\nimage of an {@link Ext.Img} based on what size the user selected. Of\ncourse, you can use any logic inside your event listener.\n"
 },
 {
  "name": "Ext.field.Spinner",
  "xtype": "spinnerfield",
  "text": "Wraps a Ext.form.Number field to provide a number input field with up/down spinner button and\noptional step value for each spin up/down increment/decrement.\n\nExample usage:\n```javascript\n @example({ framework: 'extjs' })\n    var spinner = Ext.create('Ext.field.Spinner', {\n        label: 'Spinner Field',\n        minValue: 0,\n        maxValue: 100,\n        stepValue: 2,\n        cycle: true\n    });\n    Ext.Viewport.add({ xtype: 'container', items: [spinner] });\n```\n```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtContainer, ExtSpinnerField, ExtFormPanel } from '@sencha/ext-react';\n export default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtSpinnerField\n                        label=\"Spinner\"\n                        width=\"150\"\n                        minValue={0}\n                        maxValue={10}\n                        stepValue={1}\n                    />\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer layout=\"center\">\n            <ExtFormPanel shadow=\"true\" >\n                <ExtSpinnerField\n                    label=\"Spinner\"\n                    width=\"150\"\n                    minValue=\"0\"\n                    maxValue=\"10\"\n                    stepValue=\"1\"\n                >\n                </ExtSpinnerField>\n            </ExtFormPanel>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-spinnerfield\n           label=\"Spinner\"\n           width=\"150\"\n           minValue=\"1\"\n           maxValue=\"10\"\n           stepValue=\"1\"\n       >\n       </ext-spinnerfield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-spinnerfield.component';\n\nexport default class SpinnerFieldComponent {}\n```\n"
 },
 {
  "name": "Ext.field.Spinner",
  "xtype": "spinnerfield",
  "text": "Wraps a Ext.form.Number field to provide a number input field with up/down spinner button and\noptional step value for each spin up/down increment/decrement.\n\nExample usage:\n```javascript\n @example({ framework: 'extjs' })\n    var spinner = Ext.create('Ext.field.Spinner', {\n        label: 'Spinner Field',\n        minValue: 0,\n        maxValue: 100,\n        stepValue: 2,\n        cycle: true\n    });\n    Ext.Viewport.add({ xtype: 'container', items: [spinner] });\n```\n```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtContainer, ExtSpinnerField, ExtFormPanel } from '@sencha/ext-react';\n export default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtSpinnerField\n                        label=\"Spinner\"\n                        width=\"150\"\n                        minValue={0}\n                        maxValue={10}\n                        stepValue={1}\n                    />\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer layout=\"center\">\n            <ExtFormPanel shadow=\"true\" >\n                <ExtSpinnerField\n                    label=\"Spinner\"\n                    width=\"150\"\n                    minValue=\"0\"\n                    maxValue=\"10\"\n                    stepValue=\"1\"\n                >\n                </ExtSpinnerField>\n            </ExtFormPanel>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-spinnerfield\n           label=\"Spinner\"\n           width=\"150\"\n           minValue=\"1\"\n           maxValue=\"10\"\n           stepValue=\"1\"\n       >\n       </ext-spinnerfield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-spinnerfield.component';\n\nexport default class SpinnerFieldComponent {}\n```\n"
 },
 {
  "name": "Ext.field.Text",
  "xtype": "textfield",
  "text": "The text field is the basis for most of the input fields. It provides a baseline of shared\nfunctionality such as input validation, standard events, state management and look and\nfeel. Typically we create text fields inside a form, like this:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n xtype: 'fieldset',\n title: 'Enter your name',\n items: [{\n         xtype: 'textfield',\n         label: 'First Name',\n         name: 'firstName'\n     }, {\n         xtype: 'textfield',\n         label: 'Last Name',\n         name: 'lastName'\n     }]\n }]\n});\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n     <ExtContainer layout=\"center\">\n        <ExtFormPanel [shadow]=\"true\">\n            <ExtFieldSet title=\"Separate Label and Placeholder\"\n                  [margin]=\"'0 0 20 0'\">\n                <ExtTextField placeHolder=\"Enter Name...\" label=\"Name\"\n                    [required]=\"true\">\n                </ExtTextField>\n            </ExtFieldSet>\n            <ExtFieldSet title=\"Label as Placeholder\" [margin]=\"'0 0 20 0'\">\n                <ExtTextField labelAlign=\"placeholder\"\n                      label=\"Name\" [required]=\"true\">\n                </ExtTextField>\n            </ExtFieldSet>\n            <ExtFieldSet title=\"With Error Message\">\n                <ExtTextField\n                    labelAlign=\"placeholder\"\n                    label=\"Label\"\n                    errorMessage=\"The value you entered is invalid.\"\n                    value=\"invalid value\"\n                    errorTarget=\"under\"\n                ></ExtTextField>\n            </ExtFieldSet>\n        </ExtFormPanel>\n     </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtFormPanel, ExtContainer, ExtTextField, ExtFieldSet } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n             <ExtContainer layout=\"center\">\n                 <ExtFormPanel shadow>\n                     <ExtFieldSet title=\"Separate Label and Placeholder\"\n                          margin=\"0 0 20 0\">\n                         <ExtTextField placeHolder=\"Enter Name...\" label=\"Name\" required/>\n                     </ExtFieldSet>\n                     <ExtFieldSet title=\"Label as Placeholder\" margin=\"0 0 20 0\" >\n                         <ExtTextField labelAlign=\"placeholder\" label=\"Name\" required/>\n                     </ExtFieldSet>\n                     <ExtFieldSet title=\"With Error Message\">\n                         <ExtTextField\n                             labelAlign=\"placeholder\"\n                             label=\"Label\"\n                             errorMessage=\"The value you entered is invalid.\"\n                             value=\"invalid value\"\n                             errorTarget=\"under\"\n                         />\n                     </ExtFieldSet>\n                 </ExtFormPanel>\n             </ExtContainer>\n        )\n    }\n}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-fieldset\n            title=\"Separate Label and Placeholder\"\n            margin=\"0 0 20 0\"\n        >\n            <ext-textfield\n                placeHolder=\"Enter Name...\"\n                label=\"Name\"\n                required=\"true\"\n            >\n            </ext-textfield>\n       </ext-fieldset>\n       <ext-fieldset\n            title=\"Label as Placeholder\"\n            margin=\"0 0 20 0\"\n        >\n            <ext-textfield\n                labelAlign=\"placeholder\"\n                label=\"Name\"\n                required=\"true\"\n            >\n            </ext-textfield>\n       </ext-fieldset>\n       <ext-fieldset\n            title=\"With Error Message\"\n        >\n            <ext-textfield\n                labelAlign=\"placeholder\"\n                label=\"Label\"\n                value=\"invalid value\"\n                errorTarget=\"under\"\n                errorMessage=\"The value you entered is invalid.\"\n            >\n            </ext-textfield>\n       </ext-fieldset>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-textfield.component';\nimport '@sencha/ext-web-components/dist/ext-fieldset.component';\n\nexport default class TextFieldComponent {}\n```\n\nThis creates two text fields inside a form. Text Fields can also be created outside of a\nForm, like this:\n\n    Ext.create('Ext.field.Text', {\n        label: 'Your Name',\n        value: 'Ed Spencer'\n    });\n\n## Configuring\n\nText field offers several configuration options, including {@link #cfg!placeholder #placeholder},\n{@link #cfg!maxLength #maxLength}, {@link #cfg!autoComplete #autoComplete}, {@link #cfg!autoCapitalize #autoCapitalize} and\n{@link #cfg!autoCorrect #autoCorrect}.\n\nFor example, here is how we would configure a text field to have a maximum length of\n10 characters, with placeholder text that disappears when the field is focused:\n\n    Ext.create('Ext.field.Text', {\n        label: 'Username',\n        maxLength: 10,\n        placeholder: 'Enter your username'\n    });\n\nThe autoComplete, autoCapitalize and autoCorrect configs simply set those attributes on\nthe text field and allow the native browser to provide those capabilities. For example,\nto enable auto complete and auto correct, simply configure your text field like this:\n\n    Ext.create('Ext.field.Text', {\n        label: 'Username',\n        autoComplete: true,\n        autoCorrect: true\n    });\n\nThese configurations will be picked up by the native browser, which will enable the\noptions at the OS level.\n\nText field inherits from {@link Ext.field.Field}, which is the base class for all\nfields and provides a lot of shared functionality for all fields, including setting\nvalues, clearing and basic validation. See the {@link Ext.field.Field} documentation\nto see how to leverage its capabilities.\n"
 },
 {
  "name": "Ext.field.Text",
  "xtype": "textfield",
  "text": "The text field is the basis for most of the input fields. It provides a baseline of shared\nfunctionality such as input validation, standard events, state management and look and\nfeel. Typically we create text fields inside a form, like this:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n xtype: 'fieldset',\n title: 'Enter your name',\n items: [{\n         xtype: 'textfield',\n         label: 'First Name',\n         name: 'firstName'\n     }, {\n         xtype: 'textfield',\n         label: 'Last Name',\n         name: 'lastName'\n     }]\n }]\n});\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n     <ExtContainer layout=\"center\">\n        <ExtFormPanel [shadow]=\"true\">\n            <ExtFieldSet title=\"Separate Label and Placeholder\"\n                  [margin]=\"'0 0 20 0'\">\n                <ExtTextField placeHolder=\"Enter Name...\" label=\"Name\"\n                    [required]=\"true\">\n                </ExtTextField>\n            </ExtFieldSet>\n            <ExtFieldSet title=\"Label as Placeholder\" [margin]=\"'0 0 20 0'\">\n                <ExtTextField labelAlign=\"placeholder\"\n                      label=\"Name\" [required]=\"true\">\n                </ExtTextField>\n            </ExtFieldSet>\n            <ExtFieldSet title=\"With Error Message\">\n                <ExtTextField\n                    labelAlign=\"placeholder\"\n                    label=\"Label\"\n                    errorMessage=\"The value you entered is invalid.\"\n                    value=\"invalid value\"\n                    errorTarget=\"under\"\n                ></ExtTextField>\n            </ExtFieldSet>\n        </ExtFormPanel>\n     </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtFormPanel, ExtContainer, ExtTextField, ExtFieldSet } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n             <ExtContainer layout=\"center\">\n                 <ExtFormPanel shadow>\n                     <ExtFieldSet title=\"Separate Label and Placeholder\"\n                          margin=\"0 0 20 0\">\n                         <ExtTextField placeHolder=\"Enter Name...\" label=\"Name\" required/>\n                     </ExtFieldSet>\n                     <ExtFieldSet title=\"Label as Placeholder\" margin=\"0 0 20 0\" >\n                         <ExtTextField labelAlign=\"placeholder\" label=\"Name\" required/>\n                     </ExtFieldSet>\n                     <ExtFieldSet title=\"With Error Message\">\n                         <ExtTextField\n                             labelAlign=\"placeholder\"\n                             label=\"Label\"\n                             errorMessage=\"The value you entered is invalid.\"\n                             value=\"invalid value\"\n                             errorTarget=\"under\"\n                         />\n                     </ExtFieldSet>\n                 </ExtFormPanel>\n             </ExtContainer>\n        )\n    }\n}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-fieldset\n            title=\"Separate Label and Placeholder\"\n            margin=\"0 0 20 0\"\n        >\n            <ext-textfield\n                placeHolder=\"Enter Name...\"\n                label=\"Name\"\n                required=\"true\"\n            >\n            </ext-textfield>\n       </ext-fieldset>\n       <ext-fieldset\n            title=\"Label as Placeholder\"\n            margin=\"0 0 20 0\"\n        >\n            <ext-textfield\n                labelAlign=\"placeholder\"\n                label=\"Name\"\n                required=\"true\"\n            >\n            </ext-textfield>\n       </ext-fieldset>\n       <ext-fieldset\n            title=\"With Error Message\"\n        >\n            <ext-textfield\n                labelAlign=\"placeholder\"\n                label=\"Label\"\n                value=\"invalid value\"\n                errorTarget=\"under\"\n                errorMessage=\"The value you entered is invalid.\"\n            >\n            </ext-textfield>\n       </ext-fieldset>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-textfield.component';\nimport '@sencha/ext-web-components/dist/ext-fieldset.component';\n\nexport default class TextFieldComponent {}\n```\n\nThis creates two text fields inside a form. Text Fields can also be created outside of a\nForm, like this:\n\n    Ext.create('Ext.field.Text', {\n        label: 'Your Name',\n        value: 'Ed Spencer'\n    });\n\n## Configuring\n\nText field offers several configuration options, including {@link #cfg!placeholder #placeholder},\n{@link #cfg!maxLength #maxLength}, {@link #cfg!autoComplete #autoComplete}, {@link #cfg!autoCapitalize #autoCapitalize} and\n{@link #cfg!autoCorrect #autoCorrect}.\n\nFor example, here is how we would configure a text field to have a maximum length of\n10 characters, with placeholder text that disappears when the field is focused:\n\n    Ext.create('Ext.field.Text', {\n        label: 'Username',\n        maxLength: 10,\n        placeholder: 'Enter your username'\n    });\n\nThe autoComplete, autoCapitalize and autoCorrect configs simply set those attributes on\nthe text field and allow the native browser to provide those capabilities. For example,\nto enable auto complete and auto correct, simply configure your text field like this:\n\n    Ext.create('Ext.field.Text', {\n        label: 'Username',\n        autoComplete: true,\n        autoCorrect: true\n    });\n\nThese configurations will be picked up by the native browser, which will enable the\noptions at the OS level.\n\nText field inherits from {@link Ext.field.Field}, which is the base class for all\nfields and provides a lot of shared functionality for all fields, including setting\nvalues, clearing and basic validation. See the {@link Ext.field.Field} documentation\nto see how to leverage its capabilities.\n"
 },
 {
  "name": "Ext.field.TextArea",
  "xtype": "textareafield",
  "text": "Creates an HTML textarea field on the page. This is useful whenever you need the user to enter\nlarge amounts of text (i.e. more than a few words). Typically, text entry on mobile devices\nis not a pleasant experience for the user so it's good to limit your use of text areas to only\nthose occasions when free form text is required or alternative input methods like select boxes\nor radio buttons are not possible. Text Areas are usually created inside forms, like this:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'fieldset',\n            title: 'About you',\n            items: [\n                {\n                    xtype: 'textfield',\n                    label: 'Name',\n                    name: 'name'\n                },\n                {\n                    xtype: 'textareafield',\n                    label: 'Bio',\n                    maxRows: 4,\n                    name: 'bio'\n                }\n            ]\n        }\n    ]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtTextAreaField } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtTextAreaField\n                        label=\"Description\"\n                        width=\"300\"\n                        maxRows={10}\n                    />\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer layout=\"center\">\n             <ExtFormPanel shadow=\"true\" >\n                <ExtTextAreaField\n                    label=\"Description\"\n                    width=\"300\"\n                    [maxRows]=\"10\"\n                >\n                </ExtTextAreaField>\n            </ExtFormPanel>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-textareafield\n           label=\"Description\"\n           width=\"300\"\n           maxRows=\"10\"\n       >\n       </ext-textareafield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-textareafield.component';\n\nexport default class TextAreaFieldComponent {}\n```\n\nIn the example above we're creating a form with a {@link Ext.field.Text} for the\nuser's name and a text area for their bio. We used the {@link #cfg!maxRows #maxRows} configuration on the\n text area to tell it to grow to a maximum of 4 rows of text before it starts using a scroll\nbar inside the text area to scroll the text.\n\nWe can also create a text area outside the context of a form, like this:\n\nThis creates two text fields inside a form. Text Fields can also be created outside of a Form,\nlike this:\n\n    Ext.create('Ext.field.TextArea', {\n        label: 'About You',\n        placeHolder: 'Tell us about yourself...'\n    });\n"
 },
 {
  "name": "Ext.field.TextArea",
  "xtype": "textareafield",
  "text": "Creates an HTML textarea field on the page. This is useful whenever you need the user to enter\nlarge amounts of text (i.e. more than a few words). Typically, text entry on mobile devices\nis not a pleasant experience for the user so it's good to limit your use of text areas to only\nthose occasions when free form text is required or alternative input methods like select boxes\nor radio buttons are not possible. Text Areas are usually created inside forms, like this:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'fieldset',\n            title: 'About you',\n            items: [\n                {\n                    xtype: 'textfield',\n                    label: 'Name',\n                    name: 'name'\n                },\n                {\n                    xtype: 'textareafield',\n                    label: 'Bio',\n                    maxRows: 4,\n                    name: 'bio'\n                }\n            ]\n        }\n    ]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtTextAreaField } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtTextAreaField\n                        label=\"Description\"\n                        width=\"300\"\n                        maxRows={10}\n                    />\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer layout=\"center\">\n             <ExtFormPanel shadow=\"true\" >\n                <ExtTextAreaField\n                    label=\"Description\"\n                    width=\"300\"\n                    [maxRows]=\"10\"\n                >\n                </ExtTextAreaField>\n            </ExtFormPanel>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-textareafield\n           label=\"Description\"\n           width=\"300\"\n           maxRows=\"10\"\n       >\n       </ext-textareafield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-textareafield.component';\n\nexport default class TextAreaFieldComponent {}\n```\n\nIn the example above we're creating a form with a {@link Ext.field.Text} for the\nuser's name and a text area for their bio. We used the {@link #cfg!maxRows #maxRows} configuration on the\n text area to tell it to grow to a maximum of 4 rows of text before it starts using a scroll\nbar inside the text area to scroll the text.\n\nWe can also create a text area outside the context of a form, like this:\n\nThis creates two text fields inside a form. Text Fields can also be created outside of a Form,\nlike this:\n\n    Ext.create('Ext.field.TextArea', {\n        label: 'About You',\n        placeHolder: 'Tell us about yourself...'\n    });\n"
 },
 {
  "name": "Ext.field.Time",
  "xtype": "timefield",
  "text": "Provides a time input field with a analog time picker and automatic time validation.\n\nThis field recognizes and uses JavaScript Date objects to validate input from {@link #cfg!picker #picker}.\nIn addition, it recognizes string values which are parsed according to\nthe {@link #cfg!format #format} config.\nThese may be reconfigured to use time formats appropriate for the user's locale.\n\nExample usage:\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.form.Panel', {\n     fullscreen: true,\n     items: [\n         {\n             xtype: 'fieldset',\n             items: [\n                 {\n                    xtype: 'timefield',\n                    itemId: '123',\n                    label: 'Birthday',\n                    name: 'birthday',\n                    value: '12:00 PM'\n                 }\n             ]\n         }\n     ]\n});\n```\n"
 },
 {
  "name": "Ext.field.Toggle",
  "xtype": "togglefield",
  "text": "Specialized {@link Ext.field.Slider} with a single thumb which only supports\ntwo {@link #cfg!value values}.\n\n## Examples\n\n```javascript\n@example({ framework: 'extjs' })\nExt.Viewport.add({\n    xtype: 'togglefield',\n    name: 'awesome',\n    label: 'Are you awesome?',\n    labelWidth: '40%'\n});\n```\n\nHaving a default value of 'toggled':\n\n```javascript\n@example({ framework: 'extjs' })\nExt.Viewport.add({\n    xtype: 'togglefield',\n    name: 'awesome',\n    value: 1,\n    label: 'Are you awesome?',\n    labelWidth: '40%'\n});\n```\n\nAnd using the {@link #cfg!value #value} {@link #method!toggle #toggle} method:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.Viewport.add([\n    {\n        xtype: 'togglefield',\n        name: 'awesome',\n        value: 1,\n        label: 'Are you awesome?',\n        labelWidth: '40%'\n    },\n    {\n        xtype: 'toolbar',\n        docked: 'top',\n        items: [\n            {\n                xtype: 'button',\n                text: 'Toggle',\n                flex: 1,\n                handler: function() {\n                    Ext.ComponentQuery.query('togglefield')[0].toggle();\n                }\n            }\n        ]\n    }\n]);\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtToggleField } from '@sencha/ext-react';\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtToggleField boxLabel=\"On\" value={true}/>\n                    <ExtToggleField boxLabel=\"Off\" value={false}/>\n                    <ExtToggleField boxLabel=\"Disabled\" disabled />\n                    <ExtToggleField boxLabel=\"Disabled (On)\" disabled value={true} />\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer layout=\"center\">\n            <ExtFormPanel shadow=\"true\" >\n                <ExtToggleField boxLabel=\"On\" value=\"true\"></ExtToggleField>\n                <ExtToggleField boxLabel=\"Off\" value=\"false\"></ExtToggleField>\n                <ExtToggleField boxLabel=\"Disabled\" disabled=\"true\" >\n                   </ExtToggleField>\n                <ExtToggleField boxLabel=\"Disabled (On)\" disabled=\"true\"\n                    value=\"true\" ></ExtToggleField>\n            </ExtFormPanel>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-togglefield boxLabel=\"On\" value=\"true\"></ext-togglefield>\n       <ext-togglefield boxLabel=\"Off\" value=\"false\"></ext-togglefield>\n       <ext-togglefield boxLabel=\"Disabled\" disabled=\"true\"></ext-togglefield>\n       <ext-togglefield boxLabel=\"Disabled (On)\" disabled=\"true\" value=\"true\"></ext-togglefield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-togglefield.component';\n\nexport default class ToggleFieldComponent {}\n```\n"
 },
 {
  "name": "Ext.field.Toggle",
  "xtype": "togglefield",
  "text": "Specialized {@link Ext.field.Slider} with a single thumb which only supports\ntwo {@link #cfg!value values}.\n\n## Examples\n\n```javascript\n@example({ framework: 'extjs' })\nExt.Viewport.add({\n    xtype: 'togglefield',\n    name: 'awesome',\n    label: 'Are you awesome?',\n    labelWidth: '40%'\n});\n```\n\nHaving a default value of 'toggled':\n\n```javascript\n@example({ framework: 'extjs' })\nExt.Viewport.add({\n    xtype: 'togglefield',\n    name: 'awesome',\n    value: 1,\n    label: 'Are you awesome?',\n    labelWidth: '40%'\n});\n```\n\nAnd using the {@link #cfg!value #value} {@link #method!toggle #toggle} method:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.Viewport.add([\n    {\n        xtype: 'togglefield',\n        name: 'awesome',\n        value: 1,\n        label: 'Are you awesome?',\n        labelWidth: '40%'\n    },\n    {\n        xtype: 'toolbar',\n        docked: 'top',\n        items: [\n            {\n                xtype: 'button',\n                text: 'Toggle',\n                flex: 1,\n                handler: function() {\n                    Ext.ComponentQuery.query('togglefield')[0].toggle();\n                }\n            }\n        ]\n    }\n]);\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtToggleField } from '@sencha/ext-react';\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtToggleField boxLabel=\"On\" value={true}/>\n                    <ExtToggleField boxLabel=\"Off\" value={false}/>\n                    <ExtToggleField boxLabel=\"Disabled\" disabled />\n                    <ExtToggleField boxLabel=\"Disabled (On)\" disabled value={true} />\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer layout=\"center\">\n            <ExtFormPanel shadow=\"true\" >\n                <ExtToggleField boxLabel=\"On\" value=\"true\"></ExtToggleField>\n                <ExtToggleField boxLabel=\"Off\" value=\"false\"></ExtToggleField>\n                <ExtToggleField boxLabel=\"Disabled\" disabled=\"true\" >\n                   </ExtToggleField>\n                <ExtToggleField boxLabel=\"Disabled (On)\" disabled=\"true\"\n                    value=\"true\" ></ExtToggleField>\n            </ExtFormPanel>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-togglefield boxLabel=\"On\" value=\"true\"></ext-togglefield>\n       <ext-togglefield boxLabel=\"Off\" value=\"false\"></ext-togglefield>\n       <ext-togglefield boxLabel=\"Disabled\" disabled=\"true\"></ext-togglefield>\n       <ext-togglefield boxLabel=\"Disabled (On)\" disabled=\"true\" value=\"true\"></ext-togglefield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-togglefield.component';\n\nexport default class ToggleFieldComponent {}\n```\n"
 },
 {
  "name": "Ext.field.trigger.Clear",
  "xtype": "cleartrigger",
  "text": "A \"clear\" trigger.  Used in {@link Ext.field.Text} when\n`{@link Ext.field.Text#cfg!clearable clearable}` is `true`.\n"
 },
 {
  "name": "Ext.field.trigger.Date",
  "xtype": "datetrigger",
  "text": "A \"date\" trigger.  Used in {@link Ext.field.Date DatePicker Fields}.\n"
 },
 {
  "name": "Ext.field.trigger.Expand",
  "xtype": "expandtrigger",
  "text": "A simple \"expand\" trigger.  Used in {@link Ext.field.Picker}.\n"
 },
 {
  "name": "Ext.field.trigger.Menu",
  "xtype": "menutrigger",
  "text": "A field trigger that can show a menu aligned to this trigger.\n"
 },
 {
  "name": "Ext.field.trigger.Reveal",
  "xtype": "revealtrigger",
  "text": "A \"reveal\" trigger.  Used in {@link Ext.field.Password} when\n`{@link Ext.field.Password#cfg!revealable revealable}` is `true`.\n"
 },
 {
  "name": "Ext.field.trigger.SpinDown",
  "xtype": "spindowntrigger",
  "text": "A \"spin down\" trigger.  Used in {@link Ext.field.Spinner}.\n"
 },
 {
  "name": "Ext.field.trigger.SpinUp",
  "xtype": "spinuptrigger",
  "text": "A \"spin up\" trigger.  Used in {@link Ext.field.Spinner}.\n"
 },
 {
  "name": "Ext.field.trigger.Time",
  "xtype": "timetrigger",
  "text": "A \"time\" trigger.  Used in {@link Ext.field.Time}.\n"
 },
 {
  "name": "Ext.field.trigger.Trigger",
  "xtype": "trigger",
  "text": "Text Field {@link Ext.field.Text#cfg!triggers trigger} widget.\n"
 },
 {
  "name": "Ext.field.Url",
  "xtype": "urlfield",
  "text": "The Url field creates an HTML5 url input and is usually created inside a form.\nBecause it creates an HTML url input field, most browsers will show a specialized\nvirtual keyboard for web address input. Aside from that, the url field is just a normal\ntext field. Here's an example of how to use it in a form:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'fieldset',\n            title: 'Add Bookmark',\n            items: [\n                {\n                    xtype: 'urlfield',\n                    label: 'Url',\n                    name: 'url'\n                }\n            ]\n        }\n    ]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtURLField } from '@sencha/ext-react';\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtURLField placeholder=\"http://www.domain.com\" label=\"URL\" width=\"200\"/>\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer layout=\"center\">\n            <ExtFormPanel shadow=\"true\" >\n                <ExtURLField\n                    placeholder=\"http://www.domain.com\"\n                    label=\"URL\"\n                    width=\"200\"\n                >\n                </ExtURLField>\n            </ExtFormPanel>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-urlfield placeholder=\"http://www.domain.com\" label=\"URL\" width=\"200\"></ext-urlfield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-urlfield.component';\n\nexport default class URLFieldComponent {}\n```\n\nOr on its own, outside of a form:\n\nExt.create('Ext.field.Url', {\n    label: 'Web address',\n    value: 'http://sencha.com'\n});\n\nBecause url field inherits from {@link Ext.field.Text} it gains all of the\nfunctionality that text fields provide, including getting and setting the value at runtime,\nvalidations and various events that are fired as the user interacts with the component.\nCheck out the {@link Ext.field.Text} docs to see the additional functionality available.\n"
 },
 {
  "name": "Ext.field.Url",
  "xtype": "urlfield",
  "text": "The Url field creates an HTML5 url input and is usually created inside a form.\nBecause it creates an HTML url input field, most browsers will show a specialized\nvirtual keyboard for web address input. Aside from that, the url field is just a normal\ntext field. Here's an example of how to use it in a form:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.form.Panel', {\n    fullscreen: true,\n    items: [\n        {\n            xtype: 'fieldset',\n            title: 'Add Bookmark',\n            items: [\n                {\n                    xtype: 'urlfield',\n                    label: 'Url',\n                    name: 'url'\n                }\n            ]\n        }\n    ]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtFormPanel, ExtURLField } from '@sencha/ext-react';\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer layout=\"center\">\n                <ExtFormPanel shadow>\n                    <ExtURLField placeholder=\"http://www.domain.com\" label=\"URL\" width=\"200\"/>\n                </ExtFormPanel>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer layout=\"center\">\n            <ExtFormPanel shadow=\"true\" >\n                <ExtURLField\n                    placeholder=\"http://www.domain.com\"\n                    label=\"URL\"\n                    width=\"200\"\n                >\n                </ExtURLField>\n            </ExtFormPanel>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-urlfield placeholder=\"http://www.domain.com\" label=\"URL\" width=\"200\"></ext-urlfield>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-urlfield.component';\n\nexport default class URLFieldComponent {}\n```\n\nOr on its own, outside of a form:\n\nExt.create('Ext.field.Url', {\n    label: 'Web address',\n    value: 'http://sencha.com'\n});\n\nBecause url field inherits from {@link Ext.field.Text} it gains all of the\nfunctionality that text fields provide, including getting and setting the value at runtime,\nvalidations and various events that are fired as the user interacts with the component.\nCheck out the {@link Ext.field.Text} docs to see the additional functionality available.\n"
 },
 {
  "name": "Ext.form.FieldSet",
  "xtype": "fieldset",
  "text": "A FieldSet is a great way to visually separate elements of a form. It's normally\nused when you have a form with fields that can be divided into groups - for example a\ncustomer's billing details in one fieldset and their shipping address in another. A fieldset\ncan be used inside a form or on its own elsewhere in your app. Fieldsets can optionally have\na title at the top and instructions at the bottom. Here's how we might create a FieldSet\ninside a form:\n\n```javascript\n@example({ framework: 'extjs' })\n    Ext.create('Ext.form.Panel', {\n        fullscreen: true,\n        items: [\n            {\n                xtype: 'fieldset',\n                title: 'About You',\n                instructions: 'Tell us all about yourself',\n                items: [\n                    {\n                        xtype: 'textfield',\n                        name : 'firstName',\n                        label: 'First Name'\n                    },\n                    {\n                        xtype: 'textfield',\n                        name : 'lastName',\n                        label: 'Last Name'\n                    }\n                ]\n            }\n        ]\n    });\n```\n```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\nimport React from 'react';\nimport { ExtContainer, ExtFieldSet, ExtTextField, ExtFormPanel } from '@sencha/ext-react';\nexport default function FieldSetExample() {\n    return (\n        <ExtContainer layout=\"center\">\n            <ExtFormPanel shadow>\n                <ExtFieldSet\n                   title=\"About You\"\n                   instructions=\"Tell us about yourself.\"\n                   width={300}\n                >\n                    <ExtTextField label=\"First Name\" labelAlign=\"placeholder\"/>\n                    <ExtTextField label=\"Last Name\" labelAlign=\"placeholder\"/>\n                </ExtFieldSet>\n            </ExtFormPanel>\n        </ExtContainer>\n    )\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer layout=\"center\">\n            <ExtFormPanel shadow=\"true\">\n                <ExtFieldSet title=\"About You\"\n                      instructions=\"Tell us about yourself.\" width=\"300\">\n                    <ExtTextField label=\"First Name\"\n                          labelAlign=\"placeholder\"></ExtTextField>\n                    <ExtTextField label=\"Last Name\"\n                          labelAlign=\"placeholder\"></ExtTextField>\n                </ExtFieldSet>\n            </ExtFormPanel>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container layout=\"center\">\n   <ext-formpanel shadow=\"true\">\n       <ext-fieldset title=\"About You\" instructions=\"Tell us about yourself.\" width=\"300\">\n           <ext-textfield label=\"First Name\" labelAlign=\"placeholder\"></ext-textfield>\n           <ext-textfield label=\"Last Name\" labelAlign=\"placeholder\"></ext-textfield>\n       </ext-fieldset>\n   </ext-formpanel>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-formpanel.component';\nimport '@sencha/ext-web-components/dist/ext-fieldset.component';\nimport '@sencha/ext-web-components/dist/ext-textfield.component';\n\nexport default class FieldSetComponent {}\n\nAbove we created a {@link Ext.form.Panel} with a fieldset that contains two text fields.\nIn this case, all of the form fields are in the same fieldset, but for longer forms we may choose\nto use multiple fieldsets. We also configured a {@link #cfg!title #title} and {@link #cfg!instructions #instructions} to give\nthe user more information on filling out the form if required.\n"
 },
 {
  "name": "Ext.form.Panel",
  "xtype": "formpanel",
  "text": "The `formpanel` is an extension over `fieldpanel` and, in addition to rendering the\nproper `form` tag\n\npresents a set of form fields and provides convenient ways to load and\nsave data. This component uses an HTML `form` element to contain its fields, unlike\n{@link Ext.field.Panel}. As a `form`, this component provides a `submit`\nmethod that can be used to post field data to a server.\n\nPopulating a `formpanel` is the same as with {@link Ext.field.Panel}. The\nsame method are available for setting data in the form, gather field values and managing\nfield errors.\n\n## Submitting Forms\n\nUsing the {@link Ext.field.Panel} class data can be saved to the server using\nthe {@link Ext.data.Model#method!save} of a record. With `formpanel`,\nhowever, you can use its submit method.\n\n     var panel = Ext.create({\n         xtype: 'formpanel',\n         fullscreen: true,\n\n         controller: 'mycontroller',\n\n         buttons: {\n             submit: 'onSubmit'\n         },\n\n         items: [{\n             xtype: 'textfield',\n             name: 'name',\n             label: 'Name'\n         }, {\n             xtype: 'emailfield',\n             name: 'email',\n             label: 'Email'\n         }, {\n             xtype: 'passwordfield',\n             name: 'password',\n             label: 'Password'\n         }]\n     });\n\n     Ext.define('MyController', {\n         extend: 'Ext.app.ViewController',\n         alias: 'controller.mycontroller',\n\n         onSubmit: function () {\n             var form = this.getView();\n\n             form.submit({\n                 url: 'url/to/submit/to',\n                 success: function () {\n                     Ext.Msg.alert('Form submitted successfully!');\n                 }\n             });\n         }\n     });\n\nIn this case we provided the `{@link #cfg!url url}` to submit the form to inside the submit call.\nAlternatively you can just set the {@link #cfg!url #url} config when you create the form. We can\nspecify other parameters (see {@link #method!submit} for details), including callback\nfunctions for success and failure. These functions are used to take some action in your\napp after your data has been saved to the server side.\n\nWhen doing a form submit, each field's value is serialized using the serializer for the\n{@link Ext.data.Model} used when `{@link #cfg!modelValidation modelValidation}` is enabled, or using the serializer\nspecified in the form field's {@link Ext.field.Field#cfg!dataType Ext.field.Field#dataType} config.\n"
 },
 {
  "name": "Ext.form.Panel",
  "xtype": "formpanel",
  "text": "The `formpanel` is an extension over `fieldpanel` and, in addition to rendering the\nproper `form` tag\n\npresents a set of form fields and provides convenient ways to load and\nsave data. This component uses an HTML `form` element to contain its fields, unlike\n{@link Ext.field.Panel}. As a `form`, this component provides a `submit`\nmethod that can be used to post field data to a server.\n\nPopulating a `formpanel` is the same as with {@link Ext.field.Panel}. The\nsame method are available for setting data in the form, gather field values and managing\nfield errors.\n\n## Submitting Forms\n\nUsing the {@link Ext.field.Panel} class data can be saved to the server using\nthe {@link Ext.data.Model#method!save} of a record. With `formpanel`,\nhowever, you can use its submit method.\n\n     var panel = Ext.create({\n         xtype: 'formpanel',\n         fullscreen: true,\n\n         controller: 'mycontroller',\n\n         buttons: {\n             submit: 'onSubmit'\n         },\n\n         items: [{\n             xtype: 'textfield',\n             name: 'name',\n             label: 'Name'\n         }, {\n             xtype: 'emailfield',\n             name: 'email',\n             label: 'Email'\n         }, {\n             xtype: 'passwordfield',\n             name: 'password',\n             label: 'Password'\n         }]\n     });\n\n     Ext.define('MyController', {\n         extend: 'Ext.app.ViewController',\n         alias: 'controller.mycontroller',\n\n         onSubmit: function () {\n             var form = this.getView();\n\n             form.submit({\n                 url: 'url/to/submit/to',\n                 success: function () {\n                     Ext.Msg.alert('Form submitted successfully!');\n                 }\n             });\n         }\n     });\n\nIn this case we provided the `{@link #cfg!url url}` to submit the form to inside the submit call.\nAlternatively you can just set the {@link #cfg!url #url} config when you create the form. We can\nspecify other parameters (see {@link #method!submit} for details), including callback\nfunctions for success and failure. These functions are used to take some action in your\napp after your data has been saved to the server side.\n\nWhen doing a form submit, each field's value is serialized using the serializer for the\n{@link Ext.data.Model} used when `{@link #cfg!modelValidation modelValidation}` is enabled, or using the serializer\nspecified in the form field's {@link Ext.field.Field#cfg!dataType Ext.field.Field#dataType} config.\n"
 },
 {
  "name": "Ext.froala.Editor",
  "xtype": "froalaeditor",
  "text": "Wraps Froala Editor. [Froala Editor](https://www.froala.com/wysiwyg-editor).\n\nWhen the component is created, the Froala editor instance gets initialized, which\ntakes several milliseconds. Use the {@link #event!ready #ready} event to know when it's\nready.\n\nTo run native Froala methods, access the Froala editor instance via\n{@link #method-getEditor}. For example,\n`myFroalaComponent.getEditor().popups.show('froala.hello', 30, 60, 200);`\n\nNative Froala events are available by prefixing the event name with \"froala.\".\nFor example, you can listen to the Froala click event via\n`myFroalaComponent.on('froala.click', function(){console.log('click');});`\n\n## Example\n\n    @example\n    Ext.define('Example.main.Main', {\n        extend: 'Ext.Panel',\n        requires: ['Ext.froala.Editor'],\n        layout: 'fit',\n        items: [{\n            xtype: 'froalaeditor',\n            value: 'Hello world!',\n            listeners: {\n                change: function (froalaComponent) {\n                    Ext.toast({\n                        message: \"Change!\"\n                    });\n                },\n                // Native Froala events are prefixed with 'froala.'\n                \"froala.click\": function (froalaComponent) {\n                    Ext.toast({\n                        message: \"Click!\"\n                    });\n                }\n            }\n        }]\n    });\n\n    Ext.application({\n        name: 'Example',\n        mainView: 'Example.main.Main'\n    });\n\nIf you have a Froala activation key, configure it in your application's `app.json`\n\n      {\n         \"name\": \"MyApp\",\n         \"namespace\": \"MyApp\",\n         \"framework\": \"ext\",\n         \"requires\": [\"font-awesome\", \"froala-editor\"],\n         \"froala\" {\n             \"activation-key\": \"my-activation-key\"\n          }\n         ...\n      }\n\nFor more information about activation keys, please visit [What is an Activation Key?](https://wysiwyg-editor.froala.help/hc/en-us/articles/115000394945-What-is-an-Activation-Key-).\n"
 },
 {
  "name": "Ext.froala.EditorField",
  "xtype": "froalaeditorfield",
  "text": "A field version of [Froala Editor](https://www.froala.com). This allows you to use the Froala Editor\nwithin a form and automatically have its name and value included in a form submit.\n"
 },
 {
  "name": "Ext.grid.cell.Base",
  "xtype": "gridcellbase",
  "text": "This is the base class for {@link Ext.grid.Grid} cells.\n\n{@link Ext.grid.Row} create cells based on the {@link Ext.grid.column.Column#cfg!cell Ext.grid.column.Column#cell}\nconfig. Application code would rarely create cells directly.\n"
 },
 {
  "name": "Ext.grid.cell.Boolean",
  "xtype": "booleancell",
  "text": "This class displays a boolean value in a {@link Ext.grid.Grid} cell. This cell type\nis typically used by specifying {@link Ext.grid.column.Boolean} column type.\n\n{@link Ext.grid.Row} create cells based on the {@link Ext.grid.column.Column#cfg!cell Ext.grid.column.Column#cell}\nconfig. Application code would rarely create cells directly.\n"
 },
 {
  "name": "Ext.grid.cell.Cell",
  "xtype": "gridcell",
  "text": "This is the default cell class for {@link Ext.grid.Grid} cells. Use this class if\nyou use the {@link Ext.grid.column.Column#cfg!renderer Ext.grid.column.Column#renderer} or {@link Ext.grid.column.Column#cfg!tpl Ext.grid.column.Column#tpl}\nconfigs for a column.\n\n{@link Ext.grid.Row} create cells based on the {@link Ext.grid.column.Column#cfg!cell Ext.grid.column.Column#cell}\nconfig. Application code would rarely create cells directly.\n"
 },
 {
  "name": "Ext.grid.cell.Check",
  "xtype": "checkcell",
  "text": "A Cell subclass which renders a checkbox in each column cell which toggles the truthiness\nof the associated data field on click.\n\nThis class should not be directly instantiated.  Instances are created automatically\nwhen using a {@link Ext.grid.column.Check}.\n"
 },
 {
  "name": "Ext.grid.cell.Date",
  "xtype": "datecell",
  "text": "This class displays a date value in a {@link Ext.grid.Grid} cell. This cell type\nis typically used by specifying {@link Ext.grid.column.Date} column type.\n\n{@link Ext.grid.Row} create cells based on the {@link Ext.grid.column.Column#cfg!cell Ext.grid.column.Column#cell}\nconfig. Application code would rarely create cells directly.\n"
 },
 {
  "name": "Ext.grid.cell.Number",
  "xtype": "numbercell",
  "text": "This class displays a numeric value in a {@link Ext.grid.Grid} cell. This cell type\nis typically used by specifying {@link Ext.grid.column.Number} column type.\n\n{@link Ext.grid.Row} create cells based on the {@link Ext.grid.column.Column#cfg!cell Ext.grid.column.Column#cell}\nconfig. Application code would rarely create cells directly.\n"
 },
 {
  "name": "Ext.grid.cell.RowNumberer",
  "xtype": "rownumberercell",
  "text": "This column type displays the record index of the record in the store.\n"
 },
 {
  "name": "Ext.grid.cell.Text",
  "xtype": "textcell",
  "text": "This is the base class for {@link Ext.grid.Grid} cells that contain only text.\n\n{@link Ext.grid.Row} create cells based on the {@link Ext.grid.column.Column#cfg!cell Ext.grid.column.Column#cell}\nconfig. Application code would rarely create cells directly.\n"
 },
 {
  "name": "Ext.grid.cell.Tree",
  "xtype": "treecell"
 },
 {
  "name": "Ext.grid.cell.Widget",
  "xtype": "widgetcell",
  "text": "This class is used for {@link Ext.grid.Grid} cells that contain a child\n{@link Ext.Component} or {@link Ext.Widget}. This cell type is typically used by\nspecifying {@link Ext.grid.column.Widget} column type.\n\n{@link Ext.grid.Row} create cells based on the {@link Ext.grid.column.Column#cfg!cell Ext.grid.column.Column#cell}\nconfig. Application code would rarely create cells directly.\n"
 },
 {
  "name": "Ext.grid.CellEditor",
  "xtype": "celleditor",
  "text": "This class specializes `{@link Ext.Editor}` for the purpose of editing grid cells inline. This\nclass is not instantiated by user code but rather by `Ext.grid.plugin.CellEditing`.\n"
 },
 {
  "name": "Ext.grid.column.Boolean",
  "xtype": "booleancolumn",
  "text": "A Column definition class which renders boolean data fields.\nSee the {@link Ext.grid.column.Column#cfg!xtype xtype} config option of\n{@link Ext.grid.column.Column} for more details.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.data.Store', {\n   storeId:'sampleStore',\n   fields:[\n       {name: 'framework', type: 'string'},\n       {name: 'rocks', type: 'boolean'}\n   ],\n   data:[\n       { framework: \"Ext JS\",     rocks: true  },\n       { framework: \"Ext GWT\",    rocks: true  },\n       { framework: \"Other Guys\", rocks: false }\n   ]\n});\n\nExt.create('Ext.grid.Grid', {\n    fullscreen: true,\n    store: Ext.data.StoreManager.lookup('sampleStore'),\n    columns: [\n        { text: 'Framework',  dataIndex: 'framework', flex: 1 },\n        {\n            xtype: 'booleancolumn',\n            text: 'Rocks',\n            trueText: 'Yes',\n            falseText: 'No',\n            dataIndex: 'rocks'\n        }\n    ],\n    height: 200,\n    width: 400\n});\n```\n"
 },
 {
  "name": "Ext.grid.column.Check",
  "xtype": "checkcolumn",
  "text": "A Column subclass which renders a checkbox in each column cell which toggles the truthiness\nof the associated data field on click.\n"
 },
 {
  "name": "Ext.grid.column.Column",
  "xtype": "gridcolumn",
  "text": "This class specifies the definition for a column inside a {@link Ext.grid.Grid}. It\nencompasses both the grid header configuration as well as displaying data within the\ngrid itself.\n\nIn general an array of column configurations will be passed to the grid:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'grid',\n    title: 'Tree Grid Demo',\n    itemConfig: {\n        viewModel: true\n    },\n    store: {\n         data: [\n             {firstname:\"Michael\", lastname:\"Scott\", seniority:7, department:\"Management\", hired:\"01/10/2004\"},\n             {firstname:\"Dwight\", lastname:\"Schrute\", seniority:2, department:\"Sales\", hired:\"04/01/2004\"},\n             {firstname:\"Jim\", lastname:\"Halpert\", seniority:3, department:\"Sales\", hired:\"02/22/2006\"},\n             {firstname:\"Kevin\", lastname:\"Malone\", seniority:4, department:\"Accounting\", hired:\"06/10/2007\"},\n             {firstname:\"Angela\", lastname:\"Martin\", seniority:5, department:\"Accounting\", hired:\"10/21/2008\"}\n         ]\n    },\n    columns: [\n        {text: 'First Name',  dataIndex:'firstname'},\n        {text: 'Last Name',  dataIndex:'lastname'},\n        {text: 'Hired Month',  dataIndex:'hired'},\n        {\n            text: 'Department',\n            width: 200,\n            cell: {\n               bind: '{record.department} ({record.seniority})'\n            }\n        }\n    ],\n    width: 500,\n    fullscreen: true\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container width=\"100%\" height=\"100%\">\n    <ext-grid shadow=\"true\" height=\"100%\" onready=\"columnGrid.onGridReady\">\n        <ext-column text=\"Name\" dataIndex=\"name\" flex=\"1\"></ext-column>\n        <ext-column text=\"Email\" dataIndex=\"email\" flex=\"1\"></ext-column>\n        <ext-column text=\"Phone\" dataIndex=\"phone\" flex=\"1\"></ext-column>\n    </ext-grid>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-grid.component';\nimport '@sencha/ext-web-components/dist/ext-column.component';\n\nexport default class ColumnGridComponent {\n    constructor() {\n       this.store = new Ext.data.Store({\n          data: [\n              { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n              { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n              { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n              { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n          ]\n       });\n    }\n\n    onGridReady(event) {\n        this.basicGridCmp = event.detail.cmp;\n        this.basicGridCmp.setStore(this.store);\n    }\n}\n\nwindow.columnGrid = new ColumnGridComponent();\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtGrid, ExtColumn, ExtPanel } from '@sencha/ext-modern';\n\nexport default class MyExample extends Component {\n    render() {\n        this.store = new Ext.data.Store({\n            data: [\n                { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n                { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n                { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n                { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n            ]\n        });\n        return (\n           <ExtPanel width=\"100%\" height=\"100%\">\n                <ExtGrid shadow=\"true\" height=\"100%\" store={this.store}>\n                    <ExtColumn text=\"Name\" dataIndex=\"name\" flex=\"1\"></ExtColumn>\n                    <ExtColumn text=\"Email\" dataIndex=\"email\" flex=\"1\"></ExtColumn>\n                    <ExtColumn text=\"Phone\" dataIndex=\"phone\" flex=\"1\"></ExtColumn>\n                </ExtGrid>\n            </ExtPanel>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'column-component',\n    styles: [``],\n    template: `\n      <ExtPanel [width]=\"400\" [height]=\"400\">\n           <ExtGrid shadow=\"true\" [height]=\"400\" [store]=\"store\">\n               <ExtColumn [text]=\"'Name'\" dataIndex=\"name\" flex=\"1\"></ExtColumn>\n               <ExtColumn [text]=\"'Email'\" dataIndex=\"email\" flex=\"1\"></ExtColumn>\n               <ExtColumn [text]=\"'Phone'\" dataIndex=\"phone\" flex=\"1\"></ExtColumn>\n           </ExtGrid>\n       </ExtPanel>`\n  })\nexport class ColumnComponent  {\n   store = new Ext.data.Store({\n   data: [\n       { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n       { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n       { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n       { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n   ]\n   });\n}\n```\n\n# Convenience Subclasses\n\nThere are several column subclasses that provide default rendering for various data types\n\n - {@link Ext.grid.column.Boolean}: Renders for boolean values\n - {@link Ext.grid.column.Date}: Renders for date values\n - {@link Ext.grid.column.Number}: Renders for numeric values\n\nFor more information about configuring cell content, see {@link Ext.grid.Grid}.\n\n# Setting Sizes\n\nThe columns can be only be given an explicit width value. If no width is specified the\ngrid will automatically the size the column to 20px.\n\n# Header Options\n\n - {@link #cfg!text #text}: Sets the header text for the column\n - {@link #cfg!sortable #sortable}: Specifies whether the column can be sorted by clicking the header\n   or using the column menu\n\n# Data Options\n\n - {@link #cfg!dataIndex #dataIndex}: The dataIndex is the field in the underlying {@link Ext.data.Store}\n   to use as the value for the column.\n - {@link #cfg!renderer #renderer}: Allows the underlying store value to be transformed before being\n   displayed in the grid.\n"
 },
 {
  "name": "Ext.grid.column.Column",
  "xtype": "column",
  "text": "This class specifies the definition for a column inside a {@link Ext.grid.Grid}. It\nencompasses both the grid header configuration as well as displaying data within the\ngrid itself.\n\nIn general an array of column configurations will be passed to the grid:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'grid',\n    title: 'Tree Grid Demo',\n    itemConfig: {\n        viewModel: true\n    },\n    store: {\n         data: [\n             {firstname:\"Michael\", lastname:\"Scott\", seniority:7, department:\"Management\", hired:\"01/10/2004\"},\n             {firstname:\"Dwight\", lastname:\"Schrute\", seniority:2, department:\"Sales\", hired:\"04/01/2004\"},\n             {firstname:\"Jim\", lastname:\"Halpert\", seniority:3, department:\"Sales\", hired:\"02/22/2006\"},\n             {firstname:\"Kevin\", lastname:\"Malone\", seniority:4, department:\"Accounting\", hired:\"06/10/2007\"},\n             {firstname:\"Angela\", lastname:\"Martin\", seniority:5, department:\"Accounting\", hired:\"10/21/2008\"}\n         ]\n    },\n    columns: [\n        {text: 'First Name',  dataIndex:'firstname'},\n        {text: 'Last Name',  dataIndex:'lastname'},\n        {text: 'Hired Month',  dataIndex:'hired'},\n        {\n            text: 'Department',\n            width: 200,\n            cell: {\n               bind: '{record.department} ({record.seniority})'\n            }\n        }\n    ],\n    width: 500,\n    fullscreen: true\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container width=\"100%\" height=\"100%\">\n    <ext-grid shadow=\"true\" height=\"100%\" onready=\"columnGrid.onGridReady\">\n        <ext-column text=\"Name\" dataIndex=\"name\" flex=\"1\"></ext-column>\n        <ext-column text=\"Email\" dataIndex=\"email\" flex=\"1\"></ext-column>\n        <ext-column text=\"Phone\" dataIndex=\"phone\" flex=\"1\"></ext-column>\n    </ext-grid>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-grid.component';\nimport '@sencha/ext-web-components/dist/ext-column.component';\n\nexport default class ColumnGridComponent {\n    constructor() {\n       this.store = new Ext.data.Store({\n          data: [\n              { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n              { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n              { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n              { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n          ]\n       });\n    }\n\n    onGridReady(event) {\n        this.basicGridCmp = event.detail.cmp;\n        this.basicGridCmp.setStore(this.store);\n    }\n}\n\nwindow.columnGrid = new ColumnGridComponent();\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtGrid, ExtColumn, ExtPanel } from '@sencha/ext-modern';\n\nexport default class MyExample extends Component {\n    render() {\n        this.store = new Ext.data.Store({\n            data: [\n                { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n                { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n                { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n                { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n            ]\n        });\n        return (\n           <ExtPanel width=\"100%\" height=\"100%\">\n                <ExtGrid shadow=\"true\" height=\"100%\" store={this.store}>\n                    <ExtColumn text=\"Name\" dataIndex=\"name\" flex=\"1\"></ExtColumn>\n                    <ExtColumn text=\"Email\" dataIndex=\"email\" flex=\"1\"></ExtColumn>\n                    <ExtColumn text=\"Phone\" dataIndex=\"phone\" flex=\"1\"></ExtColumn>\n                </ExtGrid>\n            </ExtPanel>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'column-component',\n    styles: [``],\n    template: `\n      <ExtPanel [width]=\"400\" [height]=\"400\">\n           <ExtGrid shadow=\"true\" [height]=\"400\" [store]=\"store\">\n               <ExtColumn [text]=\"'Name'\" dataIndex=\"name\" flex=\"1\"></ExtColumn>\n               <ExtColumn [text]=\"'Email'\" dataIndex=\"email\" flex=\"1\"></ExtColumn>\n               <ExtColumn [text]=\"'Phone'\" dataIndex=\"phone\" flex=\"1\"></ExtColumn>\n           </ExtGrid>\n       </ExtPanel>`\n  })\nexport class ColumnComponent  {\n   store = new Ext.data.Store({\n   data: [\n       { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n       { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n       { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n       { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n   ]\n   });\n}\n```\n\n# Convenience Subclasses\n\nThere are several column subclasses that provide default rendering for various data types\n\n - {@link Ext.grid.column.Boolean}: Renders for boolean values\n - {@link Ext.grid.column.Date}: Renders for date values\n - {@link Ext.grid.column.Number}: Renders for numeric values\n\nFor more information about configuring cell content, see {@link Ext.grid.Grid}.\n\n# Setting Sizes\n\nThe columns can be only be given an explicit width value. If no width is specified the\ngrid will automatically the size the column to 20px.\n\n# Header Options\n\n - {@link #cfg!text #text}: Sets the header text for the column\n - {@link #cfg!sortable #sortable}: Specifies whether the column can be sorted by clicking the header\n   or using the column menu\n\n# Data Options\n\n - {@link #cfg!dataIndex #dataIndex}: The dataIndex is the field in the underlying {@link Ext.data.Store}\n   to use as the value for the column.\n - {@link #cfg!renderer #renderer}: Allows the underlying store value to be transformed before being\n   displayed in the grid.\n"
 },
 {
  "name": "Ext.grid.column.Column",
  "xtype": "templatecolumn",
  "text": "This class specifies the definition for a column inside a {@link Ext.grid.Grid}. It\nencompasses both the grid header configuration as well as displaying data within the\ngrid itself.\n\nIn general an array of column configurations will be passed to the grid:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'grid',\n    title: 'Tree Grid Demo',\n    itemConfig: {\n        viewModel: true\n    },\n    store: {\n         data: [\n             {firstname:\"Michael\", lastname:\"Scott\", seniority:7, department:\"Management\", hired:\"01/10/2004\"},\n             {firstname:\"Dwight\", lastname:\"Schrute\", seniority:2, department:\"Sales\", hired:\"04/01/2004\"},\n             {firstname:\"Jim\", lastname:\"Halpert\", seniority:3, department:\"Sales\", hired:\"02/22/2006\"},\n             {firstname:\"Kevin\", lastname:\"Malone\", seniority:4, department:\"Accounting\", hired:\"06/10/2007\"},\n             {firstname:\"Angela\", lastname:\"Martin\", seniority:5, department:\"Accounting\", hired:\"10/21/2008\"}\n         ]\n    },\n    columns: [\n        {text: 'First Name',  dataIndex:'firstname'},\n        {text: 'Last Name',  dataIndex:'lastname'},\n        {text: 'Hired Month',  dataIndex:'hired'},\n        {\n            text: 'Department',\n            width: 200,\n            cell: {\n               bind: '{record.department} ({record.seniority})'\n            }\n        }\n    ],\n    width: 500,\n    fullscreen: true\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container width=\"100%\" height=\"100%\">\n    <ext-grid shadow=\"true\" height=\"100%\" onready=\"columnGrid.onGridReady\">\n        <ext-column text=\"Name\" dataIndex=\"name\" flex=\"1\"></ext-column>\n        <ext-column text=\"Email\" dataIndex=\"email\" flex=\"1\"></ext-column>\n        <ext-column text=\"Phone\" dataIndex=\"phone\" flex=\"1\"></ext-column>\n    </ext-grid>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-grid.component';\nimport '@sencha/ext-web-components/dist/ext-column.component';\n\nexport default class ColumnGridComponent {\n    constructor() {\n       this.store = new Ext.data.Store({\n          data: [\n              { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n              { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n              { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n              { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n          ]\n       });\n    }\n\n    onGridReady(event) {\n        this.basicGridCmp = event.detail.cmp;\n        this.basicGridCmp.setStore(this.store);\n    }\n}\n\nwindow.columnGrid = new ColumnGridComponent();\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtGrid, ExtColumn, ExtPanel } from '@sencha/ext-modern';\n\nexport default class MyExample extends Component {\n    render() {\n        this.store = new Ext.data.Store({\n            data: [\n                { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n                { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n                { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n                { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n            ]\n        });\n        return (\n           <ExtPanel width=\"100%\" height=\"100%\">\n                <ExtGrid shadow=\"true\" height=\"100%\" store={this.store}>\n                    <ExtColumn text=\"Name\" dataIndex=\"name\" flex=\"1\"></ExtColumn>\n                    <ExtColumn text=\"Email\" dataIndex=\"email\" flex=\"1\"></ExtColumn>\n                    <ExtColumn text=\"Phone\" dataIndex=\"phone\" flex=\"1\"></ExtColumn>\n                </ExtGrid>\n            </ExtPanel>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'column-component',\n    styles: [``],\n    template: `\n      <ExtPanel [width]=\"400\" [height]=\"400\">\n           <ExtGrid shadow=\"true\" [height]=\"400\" [store]=\"store\">\n               <ExtColumn [text]=\"'Name'\" dataIndex=\"name\" flex=\"1\"></ExtColumn>\n               <ExtColumn [text]=\"'Email'\" dataIndex=\"email\" flex=\"1\"></ExtColumn>\n               <ExtColumn [text]=\"'Phone'\" dataIndex=\"phone\" flex=\"1\"></ExtColumn>\n           </ExtGrid>\n       </ExtPanel>`\n  })\nexport class ColumnComponent  {\n   store = new Ext.data.Store({\n   data: [\n       { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n       { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n       { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n       { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n   ]\n   });\n}\n```\n\n# Convenience Subclasses\n\nThere are several column subclasses that provide default rendering for various data types\n\n - {@link Ext.grid.column.Boolean}: Renders for boolean values\n - {@link Ext.grid.column.Date}: Renders for date values\n - {@link Ext.grid.column.Number}: Renders for numeric values\n\nFor more information about configuring cell content, see {@link Ext.grid.Grid}.\n\n# Setting Sizes\n\nThe columns can be only be given an explicit width value. If no width is specified the\ngrid will automatically the size the column to 20px.\n\n# Header Options\n\n - {@link #cfg!text #text}: Sets the header text for the column\n - {@link #cfg!sortable #sortable}: Specifies whether the column can be sorted by clicking the header\n   or using the column menu\n\n# Data Options\n\n - {@link #cfg!dataIndex #dataIndex}: The dataIndex is the field in the underlying {@link Ext.data.Store}\n   to use as the value for the column.\n - {@link #cfg!renderer #renderer}: Allows the underlying store value to be transformed before being\n   displayed in the grid.\n"
 },
 {
  "name": "Ext.grid.column.Column",
  "xtype": "gridcolumn",
  "text": "This class specifies the definition for a column inside a {@link Ext.grid.Grid}. It\nencompasses both the grid header configuration as well as displaying data within the\ngrid itself.\n\nIn general an array of column configurations will be passed to the grid:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'grid',\n    title: 'Tree Grid Demo',\n    itemConfig: {\n        viewModel: true\n    },\n    store: {\n         data: [\n             {firstname:\"Michael\", lastname:\"Scott\", seniority:7, department:\"Management\", hired:\"01/10/2004\"},\n             {firstname:\"Dwight\", lastname:\"Schrute\", seniority:2, department:\"Sales\", hired:\"04/01/2004\"},\n             {firstname:\"Jim\", lastname:\"Halpert\", seniority:3, department:\"Sales\", hired:\"02/22/2006\"},\n             {firstname:\"Kevin\", lastname:\"Malone\", seniority:4, department:\"Accounting\", hired:\"06/10/2007\"},\n             {firstname:\"Angela\", lastname:\"Martin\", seniority:5, department:\"Accounting\", hired:\"10/21/2008\"}\n         ]\n    },\n    columns: [\n        {text: 'First Name',  dataIndex:'firstname'},\n        {text: 'Last Name',  dataIndex:'lastname'},\n        {text: 'Hired Month',  dataIndex:'hired'},\n        {\n            text: 'Department',\n            width: 200,\n            cell: {\n               bind: '{record.department} ({record.seniority})'\n            }\n        }\n    ],\n    width: 500,\n    fullscreen: true\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container width=\"100%\" height=\"100%\">\n    <ext-grid shadow=\"true\" height=\"100%\" onready=\"columnGrid.onGridReady\">\n        <ext-column text=\"Name\" dataIndex=\"name\" flex=\"1\"></ext-column>\n        <ext-column text=\"Email\" dataIndex=\"email\" flex=\"1\"></ext-column>\n        <ext-column text=\"Phone\" dataIndex=\"phone\" flex=\"1\"></ext-column>\n    </ext-grid>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-grid.component';\nimport '@sencha/ext-web-components/dist/ext-column.component';\n\nexport default class ColumnGridComponent {\n    constructor() {\n       this.store = new Ext.data.Store({\n          data: [\n              { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n              { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n              { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n              { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n          ]\n       });\n    }\n\n    onGridReady(event) {\n        this.basicGridCmp = event.detail.cmp;\n        this.basicGridCmp.setStore(this.store);\n    }\n}\n\nwindow.columnGrid = new ColumnGridComponent();\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtGrid, ExtColumn, ExtPanel } from '@sencha/ext-modern';\n\nexport default class MyExample extends Component {\n    render() {\n        this.store = new Ext.data.Store({\n            data: [\n                { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n                { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n                { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n                { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n            ]\n        });\n        return (\n           <ExtPanel width=\"100%\" height=\"100%\">\n                <ExtGrid shadow=\"true\" height=\"100%\" store={this.store}>\n                    <ExtColumn text=\"Name\" dataIndex=\"name\" flex=\"1\"></ExtColumn>\n                    <ExtColumn text=\"Email\" dataIndex=\"email\" flex=\"1\"></ExtColumn>\n                    <ExtColumn text=\"Phone\" dataIndex=\"phone\" flex=\"1\"></ExtColumn>\n                </ExtGrid>\n            </ExtPanel>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'column-component',\n    styles: [``],\n    template: `\n      <ExtPanel [width]=\"400\" [height]=\"400\">\n           <ExtGrid shadow=\"true\" [height]=\"400\" [store]=\"store\">\n               <ExtColumn [text]=\"'Name'\" dataIndex=\"name\" flex=\"1\"></ExtColumn>\n               <ExtColumn [text]=\"'Email'\" dataIndex=\"email\" flex=\"1\"></ExtColumn>\n               <ExtColumn [text]=\"'Phone'\" dataIndex=\"phone\" flex=\"1\"></ExtColumn>\n           </ExtGrid>\n       </ExtPanel>`\n  })\nexport class ColumnComponent  {\n   store = new Ext.data.Store({\n   data: [\n       { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n       { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n       { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n       { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n   ]\n   });\n}\n```\n\n# Convenience Subclasses\n\nThere are several column subclasses that provide default rendering for various data types\n\n - {@link Ext.grid.column.Boolean}: Renders for boolean values\n - {@link Ext.grid.column.Date}: Renders for date values\n - {@link Ext.grid.column.Number}: Renders for numeric values\n\nFor more information about configuring cell content, see {@link Ext.grid.Grid}.\n\n# Setting Sizes\n\nThe columns can be only be given an explicit width value. If no width is specified the\ngrid will automatically the size the column to 20px.\n\n# Header Options\n\n - {@link #cfg!text #text}: Sets the header text for the column\n - {@link #cfg!sortable #sortable}: Specifies whether the column can be sorted by clicking the header\n   or using the column menu\n\n# Data Options\n\n - {@link #cfg!dataIndex #dataIndex}: The dataIndex is the field in the underlying {@link Ext.data.Store}\n   to use as the value for the column.\n - {@link #cfg!renderer #renderer}: Allows the underlying store value to be transformed before being\n   displayed in the grid.\n"
 },
 {
  "name": "Ext.grid.column.Column",
  "xtype": "column",
  "text": "This class specifies the definition for a column inside a {@link Ext.grid.Grid}. It\nencompasses both the grid header configuration as well as displaying data within the\ngrid itself.\n\nIn general an array of column configurations will be passed to the grid:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'grid',\n    title: 'Tree Grid Demo',\n    itemConfig: {\n        viewModel: true\n    },\n    store: {\n         data: [\n             {firstname:\"Michael\", lastname:\"Scott\", seniority:7, department:\"Management\", hired:\"01/10/2004\"},\n             {firstname:\"Dwight\", lastname:\"Schrute\", seniority:2, department:\"Sales\", hired:\"04/01/2004\"},\n             {firstname:\"Jim\", lastname:\"Halpert\", seniority:3, department:\"Sales\", hired:\"02/22/2006\"},\n             {firstname:\"Kevin\", lastname:\"Malone\", seniority:4, department:\"Accounting\", hired:\"06/10/2007\"},\n             {firstname:\"Angela\", lastname:\"Martin\", seniority:5, department:\"Accounting\", hired:\"10/21/2008\"}\n         ]\n    },\n    columns: [\n        {text: 'First Name',  dataIndex:'firstname'},\n        {text: 'Last Name',  dataIndex:'lastname'},\n        {text: 'Hired Month',  dataIndex:'hired'},\n        {\n            text: 'Department',\n            width: 200,\n            cell: {\n               bind: '{record.department} ({record.seniority})'\n            }\n        }\n    ],\n    width: 500,\n    fullscreen: true\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container width=\"100%\" height=\"100%\">\n    <ext-grid shadow=\"true\" height=\"100%\" onready=\"columnGrid.onGridReady\">\n        <ext-column text=\"Name\" dataIndex=\"name\" flex=\"1\"></ext-column>\n        <ext-column text=\"Email\" dataIndex=\"email\" flex=\"1\"></ext-column>\n        <ext-column text=\"Phone\" dataIndex=\"phone\" flex=\"1\"></ext-column>\n    </ext-grid>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-grid.component';\nimport '@sencha/ext-web-components/dist/ext-column.component';\n\nexport default class ColumnGridComponent {\n    constructor() {\n       this.store = new Ext.data.Store({\n          data: [\n              { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n              { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n              { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n              { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n          ]\n       });\n    }\n\n    onGridReady(event) {\n        this.basicGridCmp = event.detail.cmp;\n        this.basicGridCmp.setStore(this.store);\n    }\n}\n\nwindow.columnGrid = new ColumnGridComponent();\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtGrid, ExtColumn, ExtPanel } from '@sencha/ext-modern';\n\nexport default class MyExample extends Component {\n    render() {\n        this.store = new Ext.data.Store({\n            data: [\n                { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n                { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n                { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n                { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n            ]\n        });\n        return (\n           <ExtPanel width=\"100%\" height=\"100%\">\n                <ExtGrid shadow=\"true\" height=\"100%\" store={this.store}>\n                    <ExtColumn text=\"Name\" dataIndex=\"name\" flex=\"1\"></ExtColumn>\n                    <ExtColumn text=\"Email\" dataIndex=\"email\" flex=\"1\"></ExtColumn>\n                    <ExtColumn text=\"Phone\" dataIndex=\"phone\" flex=\"1\"></ExtColumn>\n                </ExtGrid>\n            </ExtPanel>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'column-component',\n    styles: [``],\n    template: `\n      <ExtPanel [width]=\"400\" [height]=\"400\">\n           <ExtGrid shadow=\"true\" [height]=\"400\" [store]=\"store\">\n               <ExtColumn [text]=\"'Name'\" dataIndex=\"name\" flex=\"1\"></ExtColumn>\n               <ExtColumn [text]=\"'Email'\" dataIndex=\"email\" flex=\"1\"></ExtColumn>\n               <ExtColumn [text]=\"'Phone'\" dataIndex=\"phone\" flex=\"1\"></ExtColumn>\n           </ExtGrid>\n       </ExtPanel>`\n  })\nexport class ColumnComponent  {\n   store = new Ext.data.Store({\n   data: [\n       { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n       { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n       { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n       { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n   ]\n   });\n}\n```\n\n# Convenience Subclasses\n\nThere are several column subclasses that provide default rendering for various data types\n\n - {@link Ext.grid.column.Boolean}: Renders for boolean values\n - {@link Ext.grid.column.Date}: Renders for date values\n - {@link Ext.grid.column.Number}: Renders for numeric values\n\nFor more information about configuring cell content, see {@link Ext.grid.Grid}.\n\n# Setting Sizes\n\nThe columns can be only be given an explicit width value. If no width is specified the\ngrid will automatically the size the column to 20px.\n\n# Header Options\n\n - {@link #cfg!text #text}: Sets the header text for the column\n - {@link #cfg!sortable #sortable}: Specifies whether the column can be sorted by clicking the header\n   or using the column menu\n\n# Data Options\n\n - {@link #cfg!dataIndex #dataIndex}: The dataIndex is the field in the underlying {@link Ext.data.Store}\n   to use as the value for the column.\n - {@link #cfg!renderer #renderer}: Allows the underlying store value to be transformed before being\n   displayed in the grid.\n"
 },
 {
  "name": "Ext.grid.column.Column",
  "xtype": "templatecolumn",
  "text": "This class specifies the definition for a column inside a {@link Ext.grid.Grid}. It\nencompasses both the grid header configuration as well as displaying data within the\ngrid itself.\n\nIn general an array of column configurations will be passed to the grid:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'grid',\n    title: 'Tree Grid Demo',\n    itemConfig: {\n        viewModel: true\n    },\n    store: {\n         data: [\n             {firstname:\"Michael\", lastname:\"Scott\", seniority:7, department:\"Management\", hired:\"01/10/2004\"},\n             {firstname:\"Dwight\", lastname:\"Schrute\", seniority:2, department:\"Sales\", hired:\"04/01/2004\"},\n             {firstname:\"Jim\", lastname:\"Halpert\", seniority:3, department:\"Sales\", hired:\"02/22/2006\"},\n             {firstname:\"Kevin\", lastname:\"Malone\", seniority:4, department:\"Accounting\", hired:\"06/10/2007\"},\n             {firstname:\"Angela\", lastname:\"Martin\", seniority:5, department:\"Accounting\", hired:\"10/21/2008\"}\n         ]\n    },\n    columns: [\n        {text: 'First Name',  dataIndex:'firstname'},\n        {text: 'Last Name',  dataIndex:'lastname'},\n        {text: 'Hired Month',  dataIndex:'hired'},\n        {\n            text: 'Department',\n            width: 200,\n            cell: {\n               bind: '{record.department} ({record.seniority})'\n            }\n        }\n    ],\n    width: 500,\n    fullscreen: true\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container width=\"100%\" height=\"100%\">\n    <ext-grid shadow=\"true\" height=\"100%\" onready=\"columnGrid.onGridReady\">\n        <ext-column text=\"Name\" dataIndex=\"name\" flex=\"1\"></ext-column>\n        <ext-column text=\"Email\" dataIndex=\"email\" flex=\"1\"></ext-column>\n        <ext-column text=\"Phone\" dataIndex=\"phone\" flex=\"1\"></ext-column>\n    </ext-grid>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-grid.component';\nimport '@sencha/ext-web-components/dist/ext-column.component';\n\nexport default class ColumnGridComponent {\n    constructor() {\n       this.store = new Ext.data.Store({\n          data: [\n              { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n              { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n              { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n              { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n          ]\n       });\n    }\n\n    onGridReady(event) {\n        this.basicGridCmp = event.detail.cmp;\n        this.basicGridCmp.setStore(this.store);\n    }\n}\n\nwindow.columnGrid = new ColumnGridComponent();\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtGrid, ExtColumn, ExtPanel } from '@sencha/ext-modern';\n\nexport default class MyExample extends Component {\n    render() {\n        this.store = new Ext.data.Store({\n            data: [\n                { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n                { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n                { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n                { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n            ]\n        });\n        return (\n           <ExtPanel width=\"100%\" height=\"100%\">\n                <ExtGrid shadow=\"true\" height=\"100%\" store={this.store}>\n                    <ExtColumn text=\"Name\" dataIndex=\"name\" flex=\"1\"></ExtColumn>\n                    <ExtColumn text=\"Email\" dataIndex=\"email\" flex=\"1\"></ExtColumn>\n                    <ExtColumn text=\"Phone\" dataIndex=\"phone\" flex=\"1\"></ExtColumn>\n                </ExtGrid>\n            </ExtPanel>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'column-component',\n    styles: [``],\n    template: `\n      <ExtPanel [width]=\"400\" [height]=\"400\">\n           <ExtGrid shadow=\"true\" [height]=\"400\" [store]=\"store\">\n               <ExtColumn [text]=\"'Name'\" dataIndex=\"name\" flex=\"1\"></ExtColumn>\n               <ExtColumn [text]=\"'Email'\" dataIndex=\"email\" flex=\"1\"></ExtColumn>\n               <ExtColumn [text]=\"'Phone'\" dataIndex=\"phone\" flex=\"1\"></ExtColumn>\n           </ExtGrid>\n       </ExtPanel>`\n  })\nexport class ColumnComponent  {\n   store = new Ext.data.Store({\n   data: [\n       { \"name\": \"Lisa\", \"email\": \"lisa@simpsons.com\", \"phone\": \"555-111-1224\" },\n       { \"name\": \"Bart\", \"email\": \"bart@simpsons.com\", \"phone\": \"555-222-1234\" },\n       { \"name\": \"Homer\", \"email\": \"home@simpsons.com\", \"phone\": \"555-222-1244\" },\n       { \"name\": \"Marge\", \"email\": \"marge@simpsons.com\", \"phone\": \"555-222-1254\" }\n   ]\n   });\n}\n```\n\n# Convenience Subclasses\n\nThere are several column subclasses that provide default rendering for various data types\n\n - {@link Ext.grid.column.Boolean}: Renders for boolean values\n - {@link Ext.grid.column.Date}: Renders for date values\n - {@link Ext.grid.column.Number}: Renders for numeric values\n\nFor more information about configuring cell content, see {@link Ext.grid.Grid}.\n\n# Setting Sizes\n\nThe columns can be only be given an explicit width value. If no width is specified the\ngrid will automatically the size the column to 20px.\n\n# Header Options\n\n - {@link #cfg!text #text}: Sets the header text for the column\n - {@link #cfg!sortable #sortable}: Specifies whether the column can be sorted by clicking the header\n   or using the column menu\n\n# Data Options\n\n - {@link #cfg!dataIndex #dataIndex}: The dataIndex is the field in the underlying {@link Ext.data.Store}\n   to use as the value for the column.\n - {@link #cfg!renderer #renderer}: Allows the underlying store value to be transformed before being\n   displayed in the grid.\n"
 },
 {
  "name": "Ext.grid.column.Date",
  "xtype": "datecolumn",
  "text": "A Column definition class which renders a passed date according to the default locale,\nor a configured {@link #cfg!format #format}.\n\n    @example\n    var store = Ext.create('Ext.data.Store', {\n        fields:[\n            { name: 'symbol', type: 'string' },\n            { name: 'date',   type: 'date' },\n            { name: 'change', type: 'number' },\n            { name: 'volume', type: 'number' },\n            { name: 'topday', type: 'date' }\n        ],\n        data:[\n            { symbol: \"msft\",\n              date: '2011/04/22',\n              change: 2.43,\n              volume: 61606325,\n              topday: '04/01/2010'\n            },\n            { symbol: \"goog\",\n              date: '2011/04/22',\n              change: 0.81,\n              volume: 3053782,\n               topday: '04/11/2010'\n            },\n            { symbol: \"apple\",\n              date: '2011/04/22',\n              change: 1.35,\n              volume: 24484858,\n              topday: '04/28/2010'\n            },\n            { symbol: \"sencha\",\n              date: '2011/04/22',\n              change: 8.85,\n              volume: 5556351,\n              topday: '04/22/2010'\n            }\n        ]\n    });\n\n    Ext.create('Ext.grid.Grid', {\n        title: 'Date Column Demo',\n        store: store,\n        columns: [\n            { text: 'Symbol',   dataIndex: 'symbol', flex: 1 },\n            { text: 'Date',     dataIndex: 'date',   xtype: 'datecolumn',   format:'Y-m-d' },\n            { text: 'Change',   dataIndex: 'change', xtype: 'numbercolumn', format:'0.00' },\n            { text: 'Volume',   dataIndex: 'volume', xtype: 'numbercolumn', format:'0,000' },\n            { text: 'Top Day',  dataIndex: 'topday', xtype: 'datecolumn',   format:'l' }\n        ],\n        height: 200,\n        width: 450\n    });\n"
 },
 {
  "name": "Ext.grid.column.Drag",
  "xtype": "dragcolumn",
  "text": "A grid column used by the {@link Ext.grid.plugin.RowDragDrop} plugin.\n\nThis class should not be directly instantiated. Instances are created automatically\nwhen using a {@link Ext.grid.plugin.RowDragDrop} plugin.\n"
 },
 {
  "name": "Ext.grid.column.Number",
  "xtype": "numbercolumn",
  "text": "A Column type for rendering numeric data field according to a {@link #cfg!format #format} string.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.data.Store', {\n   storeId:'sampleStore',\n   fields:[\n       { name: 'symbol', type: 'string' },\n       { name: 'price',  type: 'number' },\n       { name: 'change', type: 'number' },\n       { name: 'volume', type: 'number' }\n   ],\n   data:[\n       { symbol: \"msft\",   price: 25.76,  change: 2.43, volume: 61606325 },\n       { symbol: \"goog\",   price: 525.73, change: 0.81, volume: 3053782  },\n       { symbol: \"apple\",  price: 342.41, change: 1.35, volume: 24484858 },\n       { symbol: \"sencha\", price: 142.08, change: 8.85, volume: 5556351  }\n   ]\n});\n\nExt.create('Ext.grid.Grid', {\n    title: 'Number Column Demo',\n    store: Ext.data.StoreManager.lookup('sampleStore'),\n    columns: [\n        { text: 'Symbol', dataIndex: 'symbol', width: 100},\n        { text: 'Price',  dataIndex: 'price',  formatter: 'usMoney' },\n        { text: 'Change', dataIndex: 'change', xtype: 'numbercolumn', format:'0.00' },\n        { text: 'Volume', dataIndex: 'volume', xtype: 'numbercolumn', format:'0,000' }\n    ],\n    height: 200,\n    width: 400\n});\n```\n"
 },
 {
  "name": "Ext.grid.column.RowNumberer",
  "xtype": "rownumberer",
  "text": "This {@link Ext.grid.column.Column} displays the row number in its cells. This\ncolumn is automatically created by the {@link Ext.grid.Grid#cfg!rowNumbers}\nconfig and is not normally created directly.\n"
 },
 {
  "name": "Ext.grid.column.Selection",
  "xtype": "selectioncolumn",
  "text": "A grid column used by the {@link Ext.grid.plugin.RowOperations} plugin.\n\nThis class should not be directly instantiated. Instances are created automatically\nwhen using a {@link Ext.grid.plugin.RowOperations} plugin.\n"
 },
 {
  "name": "Ext.grid.column.Text",
  "xtype": "textcolumn",
  "text": "A column for simple {@link Ext.grid.cell.Text}s.\n"
 },
 {
  "name": "Ext.grid.column.Tree",
  "xtype": "treecolumn",
  "text": "This column renders the hierarchy column of a tree or tree grid.\n"
 },
 {
  "name": "Ext.grid.Grid",
  "xtype": "grid",
  "text": "Grids are an excellent way of showing large amounts of tabular data on the client side.\nEssentially a supercharged `<table>`, Grid makes it easy to fetch, sort and filter large\namounts of data.\n\nGrids are composed of two main pieces - a {@link Ext.data.Store} full of data and\na set of columns to render.\n\n## A Basic Grid\n\n    var store = Ext.create('Ext.data.Store', {\n        fields: ['name', 'email', 'phone'],\n        data: [\n            { 'name': 'Lisa',  \"email\":\"lisa@simpsons.com\",  \"phone\":\"555-111-1224\"  },\n            { 'name': 'Bart',  \"email\":\"bart@simpsons.com\",  \"phone\":\"555-222-1234\" },\n            { 'name': 'Homer', \"email\":\"home@simpsons.com\",  \"phone\":\"555-222-1244\"  },\n            { 'name': 'Marge', \"email\":\"marge@simpsons.com\", \"phone\":\"555-222-1254\"  }\n        ]\n    });\n\n    Ext.create('Ext.grid.Grid', {\n        title: 'Simpsons',\n\n        store: store,\n\n        columns: [\n            { text: 'Name',  dataIndex: 'name', width: 200 },\n            { text: 'Email', dataIndex: 'email', width: 250 },\n            { text: 'Phone', dataIndex: 'phone', width: 120 }\n        ],\n\n        height: 200,\n        layout: 'fit',\n        fullscreen: true\n    });\n\nThe code above produces a simple grid with three columns. We specified a Store which will\nload JSON data inline. In most apps we would be placing the grid inside another container\nand wouldn't need to provide the {@link #cfg!height #height}, {@link #cfg!width #width} and\n{@link #cfg!fullscreen #cfg-fullscreen} options but they are included here to for demonstration.\n\nThe grid we created above will contain a header bar with a title ('Simpsons'), a row of\ncolumn headers directly underneath and finally the grid rows under the headers.\n\n## Columns\n\nBy default, each {@link Ext.grid.column.Column} is sortable and toggles between\nascending and descending sorting when you click on its header. There are several basic\nconfigs that can be applied to columns to change these behaviors. For example:\n\n    columns: [\n        {\n            text: 'Name',\n            dataIndex: 'name',\n            sortable: false,  // column cannot be sorted\n            width: 250\n        },\n        {\n            text: 'Email',\n            dataIndex: 'email',\n            hidden: true  // column is initially hidden\n        },\n        {\n            text: 'Phone',\n            dataIndex: 'phone',\n            width: 100\n        }\n    ]\n\nWe turned off sorting on the 'Name' column so clicking its header now has no effect. We\nalso made the Email column hidden by default (it can be shown again by using the\n{@link Ext.grid.plugin.ViewOptions} plugin). See the\n{@link Ext.grid.column.Column} for more details.\n\nA top-level column definition may contain a `{@link #cfg!columns columns}` configuration. This means that the\nresulting header will be a group header, and will contain the child columns.\n\n## Rows and Cells\n\nGrid extends the `{@link Ext.dataview.List}` component and connects records in the\nstore to `{@link Ext.grid.Row}` for the list's items. The Row component\nutilizes the configs of the grid's {@link Ext.grid.column.Column} to create the\nappropriate type of {@link Ext.grid.cell.Base}. Essentially, a Row is a container\nfor {@link Ext.Widget}.\n\nFor the most part, configuring a grid is about configuring the columns and their cells.\nThere are several built-in column types to display specific types of data:\n\n - {@link Ext.grid.column.Boolean} for true/false values.\n - {@link Ext.grid.column.Date} for date/time values.\n - {@link Ext.grid.column.Number} for numeric values.\n\nThese columns specify (via their {@link Ext.grid.column.Column#cfg!cell cell config}) one\nof these basic cell widget types:\n\n - {@link Ext.grid.cell.Boolean}\n - {@link Ext.grid.cell.Date}\n - {@link Ext.grid.cell.Number}\n\nIn addition to the above basic cell types, there are two other useful cell types to\nknow about:\n\n - {@link Ext.grid.cell.Text} is the base class for the boolean, date and number cell\n   classes. It is useful when a cell contains only text.\n - {@link Ext.grid.cell.Widget} is a cell class that manages a single child item (either\n   a {@link Ext.Component} or a {@link Ext.Widget}). The child item is\n   configured using the `{@link Ext.grid.cell.Widget#cfg!widget widget config}`. The most\n   important part of this config is the `{@link #cfg!xtype xtype}` of the child item to create.\n\n## Cells and Binding\n\nOne technique to controll cell content and styling is to use data binding to target\ncell configs like {@link Ext.grid.cell.Base#cfg!cls Ext.grid.cell.Base#cls} and {@link Ext.grid.cell.Base#cfg!bodyCls Ext.grid.cell.Base#bodyCls}.\nThis is done by assigning a {@link Ext.app.ViewModel} to each Row like so:\n\n     itemConfig: {\n         viewModel: true  // create default ViewModel for each item (i.e., Row)\n     }\n\nNow that each Row has a ViewModel, cells can bind to the fields of the associated record\nlike so:\n\n     columns: [{\n         ...\n         cell: {\n             bind: {\n                 cls: '{record.someCls}'\n             }\n         }\n     }]\n\nThe \"record\" property in the ViewModel is managed by the Row. As Row instances are\nrecycled due to buffered rendering, the associated record instance simply changes over\ntime.\n\n### Cell Widgets\n\nWhen using {@link Ext.grid.cell.Widget}, the contained widgets can also use binding to\nconfigure themsleves using properties of the associated record.\n\n     columns: [{\n         ...\n         cell: {\n             xtype: 'widgetcell',\n             widget: {\n                 xtype: 'button',\n                 bind: {\n                     text: 'Update {record.firstName}'\n                 }\n             }\n         }\n     }]\n\n### Row ViewModels\n\nIn some cases a custom ViewModel could be useful, for example to provide useful values\nvia {@link Ext.app.ViewModel#cfg!formulas formulas}.\n\n     itemConfig: {\n         viewModel: {\n             type: 'rowViewModel'\n         }\n     }\n\n## Renderers and Templates\n\nColumns provide two other mechanisms to format their cell content:\n\n - {@link Ext.grid.column.Column#cfg!renderer Ext.grid.column.Column#renderer}\n - {@link Ext.grid.column.Column#cfg!tpl Ext.grid.column.Column#tpl}\n\nThese column configs are processed by the {@link Ext.grid.column.Cell default cell type}\nfor a column. These configs have some downsides compared to data binding but are provided\nfor compatibility with previous releases.\n\n - Renderers and templates must update the cell content when _any_ field changes. They\n   cannot assume that only changes to the dataIndex will affect the rendering. Using\n   data binding, only the configs affected by the changed data will be updated.\n - Updates are processed synchronously in response to the record update notification.\n   Contrast to ViewModels which provide a buffered update mechanism.\n - Constructing HTML blocks in code (even in a template) is a common cause of security\n   problems such as XSS attacks.\n\n## Sorting & Filtering\n\nEvery grid is attached to a {@link Ext.data.Store}, which provides multi-sort and\nfiltering capabilities. It's easy to set up a grid to be sorted from the start:\n\n    var myGrid = Ext.create('Ext.grid.Panel', {\n        store: {\n            fields: ['name', 'email', 'phone'],\n            sorters: ['name', 'phone']\n        },\n        columns: [\n            { text: 'Name',  dataIndex: 'name' },\n            { text: 'Email', dataIndex: 'email' }\n        ]\n    });\n\nSorting at run time is easily accomplished by simply clicking each column header. If you\nneed to perform sorting on more than one field at run time it's easy to do so by adding\nnew sorters to the store:\n\n    myGrid.store.sort([\n        { property: 'name',  direction: 'ASC' },\n        { property: 'email', direction: 'DESC' }\n    ]);\n\nSee {@link Ext.data.Store} for examples of filtering.\n\n## Plugins\n\nGrid supports addition of extra functionality through plugins:\n\n- {@link Ext.grid.plugin.ViewOptions} - adds the ability to show/hide\n  columns and reorder them.\n\n- {@link Ext.grid.plugin.ColumnResizing} - allows for the ability to\n  resize columns.\n\n- {@link Ext.grid.plugin.Editable} - editing grid contents one row at a time.\n\n- {@link Ext.grid.plugin.RowOperations} - selecting and performing tasks\n  on severalrows at a time (e.g. deleting them).\n\n- {@link Ext.grid.plugin.PagingToolbar} - adds a toolbar at the bottom of\n  the grid that allows you to quickly navigate to another page of data.\n\n- {@link Ext.grid.plugin.Summary SummaryRow} - adds and pins an additional row to the\n  top of the grid that enables you to display summary data.\n"
 },
 {
  "name": "Ext.grid.HeaderContainer",
  "xtype": "headercontainer",
  "text": "This class is used to contain grid columns at the top-level of a grid as well as a\nbase class for `{@link Ext.grid.column.Column}`.\n"
 },
 {
  "name": "Ext.grid.locked.Grid",
  "xtype": "lockedgrid",
  "text": "The `lockedgrid` component manages one or more child `grid`s that independently scroll\nin the horizontal axis but are vertically synchronized. The end-user can, using column\nmenus or drag-drop, control which of these {@link #cfg!regions} contain which\ncolumns.\n\n## Locked Regions\n\nThe `lockedgrid` always has a `{@link #method!center center}` {@link Ext.grid.locked.Region} and by\ndefault a `{@link #cfg!left left}` and `{@link #cfg!right right}` region. These regions are derivatives of `{@link Ext.panel.Panel}`\n(to allow them to be resized and collapsed) and contain normal `grid` with a subset of\nthe overall set of `{@link #cfg!columns columns}`. All keys in the `{@link #cfg!regions regions}` config object are valid values\nfor a {@link Ext.grid.column.Column}'s `locked` config. The values of each of\nthe properties of the `{@link #cfg!regions regions}` config are configurations for the locked region itself.\n\nThe layout of the locked regions is a simple `hbox` with the `{@link #method!center center}` assigned `flex:1`\nand the non-center regions assigned a width based on the columns contained in that\nregion. The order of items in the container is determined by the `{@link #cfg!weight weight}` assigned to\neach region. Regions to the left of center have negative `{@link #cfg!weight weight}` values, while regions\nto the right of center have positive `{@link #cfg!weight weight}` values. This distinction is important\nprimarily to determine the side of the region on which to display the resizer as well\nas setting the direction of collapse for the region.\n\n## Config and Event Delegation\n\nThe `lockedgrid` mimics the config properties and events fired by a normal `grid`. It\ndoes this in some cases by delegating configs to each child grid. The `{@link #cfg!regions regions}` config\nshould be used to listen to events or configure a child grid independently when this\nisn't desired.\n"
 },
 {
  "name": "Ext.grid.locked.Grid",
  "xtype": "lockedgrid",
  "text": "The `lockedgrid` component manages one or more child `grid`s that independently scroll\nin the horizontal axis but are vertically synchronized. The end-user can, using column\nmenus or drag-drop, control which of these {@link #cfg!regions} contain which\ncolumns.\n\n## Locked Regions\n\nThe `lockedgrid` always has a `{@link #method!center center}` {@link Ext.grid.locked.Region} and by\ndefault a `{@link #cfg!left left}` and `{@link #cfg!right right}` region. These regions are derivatives of `{@link Ext.panel.Panel}`\n(to allow them to be resized and collapsed) and contain normal `grid` with a subset of\nthe overall set of `{@link #cfg!columns columns}`. All keys in the `{@link #cfg!regions regions}` config object are valid values\nfor a {@link Ext.grid.column.Column}'s `locked` config. The values of each of\nthe properties of the `{@link #cfg!regions regions}` config are configurations for the locked region itself.\n\nThe layout of the locked regions is a simple `hbox` with the `{@link #method!center center}` assigned `flex:1`\nand the non-center regions assigned a width based on the columns contained in that\nregion. The order of items in the container is determined by the `{@link #cfg!weight weight}` assigned to\neach region. Regions to the left of center have negative `{@link #cfg!weight weight}` values, while regions\nto the right of center have positive `{@link #cfg!weight weight}` values. This distinction is important\nprimarily to determine the side of the region on which to display the resizer as well\nas setting the direction of collapse for the region.\n\n## Config and Event Delegation\n\nThe `lockedgrid` mimics the config properties and events fired by a normal `grid`. It\ndoes this in some cases by delegating configs to each child grid. The `{@link #cfg!regions regions}` config\nshould be used to listen to events or configure a child grid independently when this\nisn't desired.\n"
 },
 {
  "name": "Ext.grid.locked.Region",
  "xtype": "lockedgridregion",
  "text": "This class is used by the {@link Ext.grid.locked.Grid} component to wrap each\nchild grid. Being a `panel`, regions can be `{@link #cfg!resizable resizable}` and `{@link #cfg!collapsible collapsible}`.\nIn collapsed state, the region will also display a `{@link #cfg!title title}`.\n\nThe `{@link #cfg!weight weight}` config is used to configure the {@link Ext.panel.Resizer} and\n{@link Ext.panel.Collapser} panel properties.\n"
 },
 {
  "name": "Ext.grid.locked.Region",
  "xtype": "lockedgridregion",
  "text": "This class is used by the {@link Ext.grid.locked.Grid} component to wrap each\nchild grid. Being a `panel`, regions can be `{@link #cfg!resizable resizable}` and `{@link #cfg!collapsible collapsible}`.\nIn collapsed state, the region will also display a `{@link #cfg!title title}`.\n\nThe `{@link #cfg!weight weight}` config is used to configure the {@link Ext.panel.Resizer} and\n{@link Ext.panel.Collapser} panel properties.\n"
 },
 {
  "name": "Ext.grid.menu.Columns",
  "xtype": "gridcolumnsmenu",
  "text": "This class is created by `{@link Ext.grid.Grid}` to display the columns in a menu.\n"
 },
 {
  "name": "Ext.grid.menu.GroupByThis",
  "xtype": "gridgroupbythismenuitem",
  "text": "This class is used in the column menu of a `{@link Ext.grid.Grid}`.\n"
 },
 {
  "name": "Ext.grid.menu.ShowInGroups",
  "xtype": "gridshowingroupsmenuitem",
  "text": "This class is used in the column menu of a `{@link Ext.grid.Grid}`.\n"
 },
 {
  "name": "Ext.grid.menu.SortAsc",
  "xtype": "gridsortascmenuitem",
  "text": "The menu item shown in a grid column's menu that when clicked\ntriggers ascending sorting on that column.\n"
 },
 {
  "name": "Ext.grid.menu.SortDesc",
  "xtype": "gridsortdescmenuitem",
  "text": "The menu item shown in a grid column's menu that when clicked\ntriggers descending sorting on that column.\n"
 },
 {
  "name": "Ext.grid.PagingToolbar",
  "xtype": "pagingtoolbar",
  "text": "A toolbar used for paging in grids.  Do not instantiate this class directly.  Use\nthe {@link Ext.grid.plugin.PagingToolbar} config of the Paging Toolbar grid\nplugin to configure its options\n"
 },
 {
  "name": "Ext.grid.Row",
  "xtype": "gridrow",
  "text": "This class is created by a {@link Ext.grid.Grid} to manage each record. Rows act\nas containers for {@link Ext.grid.cell.Base}.\n\nRow does not extend {@link Ext.Container} to keep overhead to a minimum. Application\ncode should not need to create instances of this class directly. Rows are created by\nthe {@link Ext.dataview.List} base as configured by {@link Ext.grid.Grid}.\n"
 },
 {
  "name": "Ext.grid.RowBody",
  "xtype": "rowbody",
  "text": "A body component to be used with Grid Rows. This component should not be used directly.\nAlways use the Grid row's {@link Ext.grid.Row#cfg!body body} config to create a row body.\n\nTypically used together with a {@link Ext.grid.plugin.RowExpander}\n"
 },
 {
  "name": "Ext.grid.rowedit.Bar",
  "xtype": "roweditorbar"
 },
 {
  "name": "Ext.grid.rowedit.Cell",
  "xtype": "roweditorcell"
 },
 {
  "name": "Ext.grid.rowedit.Editor",
  "xtype": "roweditor",
  "text": "The component used by the {@link Ext.grid.rowedit.Plugin} plugin.\n"
 },
 {
  "name": "Ext.grid.rowedit.Gap",
  "xtype": "roweditorgap"
 },
 {
  "name": "Ext.grid.RowHeader",
  "xtype": "rowheader",
  "text": "A simple header component for grouped grids.  Grid row headers are created automatically\nby {@link Ext.grid.Grid} and should not be directly instantiated.\n"
 },
 {
  "name": "Ext.grid.SummaryRow",
  "xtype": "gridsummaryrow"
 },
 {
  "name": "Ext.grid.Tree",
  "xtype": "tree",
  "text": "The TreeGrid provides a tree-structured UI representation of tree-structured data.\nTreeGrids must be bound to a {@link Ext.data.TreeStore}.\n\nTreeGrid supports multiple columns through the {@link #cfg!columns #columns} configuration.\n\nBy default a TreeGrid contains a single column that uses the `text` field of\nthe store's nodes.\n\nHere is a simple TreeGrid using inline data:\n\n    @example\n    var ts = Ext.create('Ext.data.TreeStore', {\n        root: {\n            text: 'Genre',\n            expanded: true,\n            children: [\n                {\n                    text: 'Comedy',\n                    children: [\n                        { leaf: true, text: '30 Rock' },\n                        { leaf: true, text: 'Arrested Development' },\n                        { leaf: true, text: 'Bob\\'s Burgers' },\n                        { leaf: true, text: 'Curb your Enthusiasm' },\n                        { leaf: true, text: 'Futurama' }\n                    ]\n                },\n                {\n                    text: 'Drama',\n                    children: [\n                        { leaf: true, text: 'Breaking Bad', },\n                        { leaf: true, text: 'Game of Thrones' },\n                        { leaf: true, text: 'Lost' },\n                        { leaf: true, text: 'Preacher' },\n                        { leaf: true, text: 'The Wire' }\n                    ]\n                },\n                {\n                    text: 'Science Fiction',\n                    children: [\n                        { leaf: true, text: 'Black Mirror' },\n                        { leaf: true, text: 'Doctor Who' },\n                        { leaf: true, text: 'Eureka' },\n                        { leaf: true, text: 'Futurama' },\n                        { leaf: true, text: 'The Twilight Zone' },\n                        { leaf: true, text: 'X-Files' }\n                    ]\n                }\n            ]\n        }\n    });\n\n    Ext.create({\n        fullscreen: true,\n        xtype: 'panel',\n\n        items: [{\n            xtype: 'tree',\n            height: 600,\n            width: 400,\n            store: ts,\n            title: 'Favorite Shows by Genre'\n        }]\n    });\n"
 },
 {
  "name": "Ext.grid.Tree",
  "xtype": "tree",
  "text": "The TreeGrid provides a tree-structured UI representation of tree-structured data.\nTreeGrids must be bound to a {@link Ext.data.TreeStore}.\n\nTreeGrid supports multiple columns through the {@link #cfg!columns #columns} configuration.\n\nBy default a TreeGrid contains a single column that uses the `text` field of\nthe store's nodes.\n\nHere is a simple TreeGrid using inline data:\n\n    @example\n    var ts = Ext.create('Ext.data.TreeStore', {\n        root: {\n            text: 'Genre',\n            expanded: true,\n            children: [\n                {\n                    text: 'Comedy',\n                    children: [\n                        { leaf: true, text: '30 Rock' },\n                        { leaf: true, text: 'Arrested Development' },\n                        { leaf: true, text: 'Bob\\'s Burgers' },\n                        { leaf: true, text: 'Curb your Enthusiasm' },\n                        { leaf: true, text: 'Futurama' }\n                    ]\n                },\n                {\n                    text: 'Drama',\n                    children: [\n                        { leaf: true, text: 'Breaking Bad', },\n                        { leaf: true, text: 'Game of Thrones' },\n                        { leaf: true, text: 'Lost' },\n                        { leaf: true, text: 'Preacher' },\n                        { leaf: true, text: 'The Wire' }\n                    ]\n                },\n                {\n                    text: 'Science Fiction',\n                    children: [\n                        { leaf: true, text: 'Black Mirror' },\n                        { leaf: true, text: 'Doctor Who' },\n                        { leaf: true, text: 'Eureka' },\n                        { leaf: true, text: 'Futurama' },\n                        { leaf: true, text: 'The Twilight Zone' },\n                        { leaf: true, text: 'X-Files' }\n                    ]\n                }\n            ]\n        }\n    });\n\n    Ext.create({\n        fullscreen: true,\n        xtype: 'panel',\n\n        items: [{\n            xtype: 'tree',\n            height: 600,\n            width: 400,\n            store: ts,\n            title: 'Favorite Shows by Genre'\n        }]\n    });\n"
 },
 {
  "name": "Ext.Img",
  "xtype": "image",
  "text": "This is a simple way to add an image of any size to your application and have it participate in\nthe layout system like any other component. This component typically takes between 1 and 3\nconfigurations - a {@link #cfg!src #src}, and optionally a {@link #cfg!height #height} and a {@link #cfg!width #width}:\n\n```javascript\n@example({ framework: 'extjs' })\nvar img = Ext.create('Ext.Img', {\n    src: 'http://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n    height: 64,\n    width: 64\n});\nExt.Viewport.add(img);\n```\n\nIt's also easy to add an image into a panel or other container using its xtype:\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Panel', {\n    fullscreen: true,\n    layout: 'hbox',\n    items: [\n        {\n            xtype: 'image',\n            src: 'http://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n            flex: 1\n        },\n        {\n            xtype: 'panel',\n            flex: 2,\n            html: 'Sencha Inc.<br/>1700 Seaport Boulevard Suite 120, Redwood City, CA'\n        }\n    ]\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-panel shadow=\"true\" layout=\"fit\">\n    <ext-image\n        width=\"64\"\n        height=\"64\"\n        src=\"http://www.sencha.com/assets/images/sencha-avatar-64x64.png\"\n    >\n    </ext-image>\n</ext-panel>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-panel.component';\nimport '@sencha/ext-web-components/dist/ext-image.component';\n\nexport default class ImageFieldComponent {}\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtPanel, ExtImage } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtPanel shadow layout=\"fit\">\n                <ExtImage\n                    height=\"64\"\n                    width=\"64\"\n                    src=\"http://www.sencha.com/assets/images/sencha-avatar-64x64.png\"\n                />\n            </ExtPanel>\n        );\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [`\n             `],\n     template: `\n             <ExtPanel shadow=\"true\" layout=\"fit\">\n                 <ExtImage\n                     height=\"64\"\n                     width=\"64\"\n                     src=\"http://www.sencha.com/assets/images/sencha-avatar-64x64.png\"\n                 ></ExtImage>\n             </ExtPanel>\n             `\n })\n export class AppComponent {\n\n }\n```\n\nHere we created a panel which contains an image (a profile picture in this case) and a text area\nto allow the user to enter profile information about themselves. In this case we used an\n{@link Ext.layout.HBox} and flexed the image to take up one third of the width and\nthe text area to take two thirds of the width. See the {@link Ext.layout.HBox} for\nmore information on flexing items.\n"
 },
 {
  "name": "Ext.Img",
  "xtype": "img",
  "text": "This is a simple way to add an image of any size to your application and have it participate in\nthe layout system like any other component. This component typically takes between 1 and 3\nconfigurations - a {@link #cfg!src #src}, and optionally a {@link #cfg!height #height} and a {@link #cfg!width #width}:\n\n```javascript\n@example({ framework: 'extjs' })\nvar img = Ext.create('Ext.Img', {\n    src: 'http://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n    height: 64,\n    width: 64\n});\nExt.Viewport.add(img);\n```\n\nIt's also easy to add an image into a panel or other container using its xtype:\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Panel', {\n    fullscreen: true,\n    layout: 'hbox',\n    items: [\n        {\n            xtype: 'image',\n            src: 'http://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n            flex: 1\n        },\n        {\n            xtype: 'panel',\n            flex: 2,\n            html: 'Sencha Inc.<br/>1700 Seaport Boulevard Suite 120, Redwood City, CA'\n        }\n    ]\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-panel shadow=\"true\" layout=\"fit\">\n    <ext-image\n        width=\"64\"\n        height=\"64\"\n        src=\"http://www.sencha.com/assets/images/sencha-avatar-64x64.png\"\n    >\n    </ext-image>\n</ext-panel>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-panel.component';\nimport '@sencha/ext-web-components/dist/ext-image.component';\n\nexport default class ImageFieldComponent {}\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtPanel, ExtImage } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtPanel shadow layout=\"fit\">\n                <ExtImage\n                    height=\"64\"\n                    width=\"64\"\n                    src=\"http://www.sencha.com/assets/images/sencha-avatar-64x64.png\"\n                />\n            </ExtPanel>\n        );\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [`\n             `],\n     template: `\n             <ExtPanel shadow=\"true\" layout=\"fit\">\n                 <ExtImage\n                     height=\"64\"\n                     width=\"64\"\n                     src=\"http://www.sencha.com/assets/images/sencha-avatar-64x64.png\"\n                 ></ExtImage>\n             </ExtPanel>\n             `\n })\n export class AppComponent {\n\n }\n```\n\nHere we created a panel which contains an image (a profile picture in this case) and a text area\nto allow the user to enter profile information about themselves. In this case we used an\n{@link Ext.layout.HBox} and flexed the image to take up one third of the width and\nthe text area to take two thirds of the width. See the {@link Ext.layout.HBox} for\nmore information on flexing items.\n"
 },
 {
  "name": "Ext.Img",
  "xtype": "image",
  "text": "This is a simple way to add an image of any size to your application and have it participate in\nthe layout system like any other component. This component typically takes between 1 and 3\nconfigurations - a {@link #cfg!src #src}, and optionally a {@link #cfg!height #height} and a {@link #cfg!width #width}:\n\n```javascript\n@example({ framework: 'extjs' })\nvar img = Ext.create('Ext.Img', {\n    src: 'http://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n    height: 64,\n    width: 64\n});\nExt.Viewport.add(img);\n```\n\nIt's also easy to add an image into a panel or other container using its xtype:\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Panel', {\n    fullscreen: true,\n    layout: 'hbox',\n    items: [\n        {\n            xtype: 'image',\n            src: 'http://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n            flex: 1\n        },\n        {\n            xtype: 'panel',\n            flex: 2,\n            html: 'Sencha Inc.<br/>1700 Seaport Boulevard Suite 120, Redwood City, CA'\n        }\n    ]\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-panel shadow=\"true\" layout=\"fit\">\n    <ext-image\n        width=\"64\"\n        height=\"64\"\n        src=\"http://www.sencha.com/assets/images/sencha-avatar-64x64.png\"\n    >\n    </ext-image>\n</ext-panel>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-panel.component';\nimport '@sencha/ext-web-components/dist/ext-image.component';\n\nexport default class ImageFieldComponent {}\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtPanel, ExtImage } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtPanel shadow layout=\"fit\">\n                <ExtImage\n                    height=\"64\"\n                    width=\"64\"\n                    src=\"http://www.sencha.com/assets/images/sencha-avatar-64x64.png\"\n                />\n            </ExtPanel>\n        );\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [`\n             `],\n     template: `\n             <ExtPanel shadow=\"true\" layout=\"fit\">\n                 <ExtImage\n                     height=\"64\"\n                     width=\"64\"\n                     src=\"http://www.sencha.com/assets/images/sencha-avatar-64x64.png\"\n                 ></ExtImage>\n             </ExtPanel>\n             `\n })\n export class AppComponent {\n\n }\n```\n\nHere we created a panel which contains an image (a profile picture in this case) and a text area\nto allow the user to enter profile information about themselves. In this case we used an\n{@link Ext.layout.HBox} and flexed the image to take up one third of the width and\nthe text area to take two thirds of the width. See the {@link Ext.layout.HBox} for\nmore information on flexing items.\n"
 },
 {
  "name": "Ext.Img",
  "xtype": "img",
  "text": "This is a simple way to add an image of any size to your application and have it participate in\nthe layout system like any other component. This component typically takes between 1 and 3\nconfigurations - a {@link #cfg!src #src}, and optionally a {@link #cfg!height #height} and a {@link #cfg!width #width}:\n\n```javascript\n@example({ framework: 'extjs' })\nvar img = Ext.create('Ext.Img', {\n    src: 'http://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n    height: 64,\n    width: 64\n});\nExt.Viewport.add(img);\n```\n\nIt's also easy to add an image into a panel or other container using its xtype:\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Panel', {\n    fullscreen: true,\n    layout: 'hbox',\n    items: [\n        {\n            xtype: 'image',\n            src: 'http://www.sencha.com/assets/images/sencha-avatar-64x64.png',\n            flex: 1\n        },\n        {\n            xtype: 'panel',\n            flex: 2,\n            html: 'Sencha Inc.<br/>1700 Seaport Boulevard Suite 120, Redwood City, CA'\n        }\n    ]\n});\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-panel shadow=\"true\" layout=\"fit\">\n    <ext-image\n        width=\"64\"\n        height=\"64\"\n        src=\"http://www.sencha.com/assets/images/sencha-avatar-64x64.png\"\n    >\n    </ext-image>\n</ext-panel>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-panel.component';\nimport '@sencha/ext-web-components/dist/ext-image.component';\n\nexport default class ImageFieldComponent {}\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtPanel, ExtImage } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtPanel shadow layout=\"fit\">\n                <ExtImage\n                    height=\"64\"\n                    width=\"64\"\n                    src=\"http://www.sencha.com/assets/images/sencha-avatar-64x64.png\"\n                />\n            </ExtPanel>\n        );\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [`\n             `],\n     template: `\n             <ExtPanel shadow=\"true\" layout=\"fit\">\n                 <ExtImage\n                     height=\"64\"\n                     width=\"64\"\n                     src=\"http://www.sencha.com/assets/images/sencha-avatar-64x64.png\"\n                 ></ExtImage>\n             </ExtPanel>\n             `\n })\n export class AppComponent {\n\n }\n```\n\nHere we created a panel which contains an image (a profile picture in this case) and a text area\nto allow the user to enter profile information about themselves. In this case we used an\n{@link Ext.layout.HBox} and flexed the image to take up one third of the width and\nthe text area to take two thirds of the width. See the {@link Ext.layout.HBox} for\nmore information on flexing items.\n"
 },
 {
  "name": "Ext.Indicator",
  "xtype": "indicator",
  "text": "A component to show indication of an active item.\n"
 },
 {
  "name": "Ext.Label",
  "xtype": "label",
  "text": "A simple label component which allows you to insert content using {@link #cfg!html #html} configuration.\n\n    @example\n    Ext.Viewport.add({\n        xtype: 'label',\n        html: 'My label!'\n    });\n"
 },
 {
  "name": "Ext.list.Tree",
  "xtype": "treelist",
  "text": "A lightweight component to display data in a simple tree structure using a\n{@link Ext.data.TreeStore}.\n\nSimple Treelist using inline data:\n\n    @example\n    Ext.create({\n        xtype: 'treelist',\n        store: {\n            root: {\n            expanded: true,\n                children: [{\n                    text: 'detention',\n                    leaf: true,\n                    iconCls: 'x-fa fa-frown-o'\n                }, {\n                    text: 'homework',\n                    expanded: true,\n                    iconCls: 'x-fa fa-folder',\n                    children: [{\n                        text: 'book report',\n                        leaf: true,\n                        iconCls: 'x-fa fa-book'\n                    }, {\n                        text: 'algebra',\n                        leaf: true,\n                        iconCls: 'x-fa fa-graduation-cap'\n                    }]\n                }, {\n                    text: 'buy lottery tickets',\n                    leaf: true,\n                    iconCls: 'x-fa fa-usd'\n                }]\n            }\n        },\n        renderTo: Ext.getBody()\n    });\n\nTo collapse the Treelist for use in a smaller navigation view see {@link #cfg!micro #micro}.\nParent Treelist node expansion may be refined using the {@link #cfg!singleExpand #singleExpand} and\n{@link #cfg!expanderOnly #expanderOnly} config options.  Treelist nodes will be selected when clicked /\ntapped excluding clicks on the expander unless {@link #cfg!selectOnExpander #selectOnExpander} is set to\n`true`.\n"
 },
 {
  "name": "Ext.list.TreeItem",
  "xtype": "treelistitem",
  "text": "This file contains the base variables for styling a treelist.\n"
 },
 {
  "name": "Ext.LoadMask",
  "xtype": "loadmask",
  "text": "A simple class used to mask any {@link Ext.Container}.\n\nThis should rarely be used directly, instead look at the {@link Ext.Container#cfg!masked Ext.Container#masked}\nconfiguration.\n\n## Example\n\n```javascript\n@example({ framework: 'extjs' })\n  Ext.Viewport.add({\n        masked: {\n           xtype: 'loadmask'\n        }\n    });\n```\n\nYou can customize the loading {@link #cfg!message #message} and whether or not you want to show the\n{@link #cfg!indicator #indicator}:\n\n    @example\n    Ext.Viewport.add({\n        masked: {\n           xtype: 'loadmask',\n           message: 'A message..',\n           indicator: false\n        }\n    });\n"
 },
 {
  "name": "Ext.Mask",
  "xtype": "mask",
  "text": "A simple class used to mask any {@link Ext.Container}.\n\nThis should rarely be used directly, instead look at the {@link Ext.Container#cfg!masked Ext.Container#masked}\nconfiguration.\n\n## Example\n\n```javascript\n@example({framework: 'extjs'})\nvar container = Ext.create('Ext.Container', {\n   html: 'My container!'\n});\n\n// Add the container to the Viewport\nExt.Viewport.add(container);\n\n// Mask the container\ncontainer.setMasked(true);\n```\n"
 },
 {
  "name": "Ext.Media",
  "xtype": "media",
  "text": "Provides a base class for audio/visual controls. Should not be used directly.\n\nPlease see the {@link Ext.Audio} and {@link Ext.Video} classes for more information.\n"
 },
 {
  "name": "Ext.menu.CheckItem",
  "xtype": "menucheckitem",
  "text": "A menu item that contains a togglable checkbox by default, but that can also be\na part of a radio group.\n\n```javascript\n @example({ framework: 'extjs' })\n     Ext.create({\n         xtype: 'menu',\n         renderTo: Ext.getBody(),\n         width: 100,\n         items: [{\n             xtype: 'menucheckitem',\n             text: 'select all'\n         },{\n             xtype: 'menucheckitem',\n             text: 'select specific'\n         },{\n             iconCls: 'add16',\n             text: 'icon item'\n         },{\n             text: 'regular item'\n         }]\n     });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtButton, ExtContainer, ExtMenu, ExtMenuCheckItem } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n           <ExtContainer>\n               <ExtButton text=\"Menu\">\n                   <ExtMenu rel=\"menu\" >\n                       <ExtMenuCheckItem text=\"Mobile\" name=\"ui-type\" />\n                       <ExtMenuCheckItem text=\"Desktop\" name=\"ui-type\"/>\n                   </ExtMenu>\n               </ExtButton>\n           </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\nselector: 'app-root',\nstyles: [``],\ntemplate: `\n      <ExtContainer>\n           <ExtButton text=\"Menu\">\n               <ExtMenu rel=\"menu\" >\n                   <ExtMenuCheckItem text=\"Mobile\" name=\"ui-type\" >\n                   </ExtMenuCheckItem>\n                   <ExtMenuCheckItem text=\"Desktop\" name=\"ui-type\">\n                   </ExtMenuCheckItem>\n               </ExtMenu>\n           </ExtButton>\n       </ExtContainer>\n`\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container>\n   <ext-button text=\"Menu\">\n       <ext-menu rel=\"menu\" >\n           <ext-menucheckitem text=\"Mobile\" name=\"ui-type\"></ext-menucheckitem>\n           <ext-menucheckitem text=\"Desktop\" name=\"ui-type\"></ext-menucheckitem>\n       </ext-menu>\n   </ext-button>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-button.component';\nimport '@sencha/ext-web-components/dist/ext-menu.component';\nimport '@sencha/ext-web-components/dist/ext-menucheckitem.component';\n\nexport default class CheckItemComponent {}\n```\n"
 },
 {
  "name": "Ext.menu.Item",
  "xtype": "menuitem",
  "text": "A base class for all menu items that require menu-related functionality such as click handling,\nsub-menus, icons, etc.\n\n```javascript\n@example({ framework: 'extjs' })\n    var mainPanel = Ext.create('Ext.Panel', {\n        fullscreen: true,\n\n        items: {\n            xtype: 'menu',\n            floated: false,\n            docked: 'left',\n            items: [{\n                text: 'regular item 1'\n            },{\n                text: 'regular item 2'\n            },{\n                text: 'regular item 3'\n            }]\n        }\n    });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtButton, ExtContainer, ExtMenu, ExtMenuItem } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer>\n               <ExtButton text=\"Menu\">\n                   <ExtMenu rel=\"menu\" >\n                       <ExtMenuItem text=\"Mobile\" name=\"ui-type\" />\n                       <ExtMenuItem text=\"Desktop\" name=\"ui-type\"/>\n                   </ExtMenu>\n               </ExtButton>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root',\n    styles: [``],\n    template: `\n        <ExtContainer>\n            <ExtButton text=\"Menu\">\n                <ExtMenu rel=\"menu\" >\n                    <ExtMenuItem text=\"Mobile\" name=\"ui-type\" ></ExtMenuItem>\n                    <ExtMenuItem text=\"Desktop\" name=\"ui-type\"></ExtMenuItem>\n                </ExtMenu>\n            </ExtButton>\n        </ExtContainer>\n   `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n *<ext-container>\n   <ext-button text=\"Menu\">\n       <ext-menu rel=\"menu\" >\n           <ext-menuitem text=\"Mobile\" name=\"ui-type\"></ext-menuitem>\n           <ext-menuitem text=\"Desktop\" name=\"ui-type\"/></ext-menuitem>\n       </ext-menu>\n   </ext-button>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-button.component';\nimport '@sencha/ext-web-components/dist/ext-menu.component';\nimport '@sencha/ext-web-components/dist/ext-menuitem.component';\n\nexport default class ItemComponent{}\n```\n"
 },
 {
  "name": "Ext.menu.Item",
  "xtype": "menuitem",
  "text": "A base class for all menu items that require menu-related functionality such as click handling,\nsub-menus, icons, etc.\n\n```javascript\n@example({ framework: 'extjs' })\n    var mainPanel = Ext.create('Ext.Panel', {\n        fullscreen: true,\n\n        items: {\n            xtype: 'menu',\n            floated: false,\n            docked: 'left',\n            items: [{\n                text: 'regular item 1'\n            },{\n                text: 'regular item 2'\n            },{\n                text: 'regular item 3'\n            }]\n        }\n    });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtButton, ExtContainer, ExtMenu, ExtMenuItem } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer>\n               <ExtButton text=\"Menu\">\n                   <ExtMenu rel=\"menu\" >\n                       <ExtMenuItem text=\"Mobile\" name=\"ui-type\" />\n                       <ExtMenuItem text=\"Desktop\" name=\"ui-type\"/>\n                   </ExtMenu>\n               </ExtButton>\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root',\n    styles: [``],\n    template: `\n        <ExtContainer>\n            <ExtButton text=\"Menu\">\n                <ExtMenu rel=\"menu\" >\n                    <ExtMenuItem text=\"Mobile\" name=\"ui-type\" ></ExtMenuItem>\n                    <ExtMenuItem text=\"Desktop\" name=\"ui-type\"></ExtMenuItem>\n                </ExtMenu>\n            </ExtButton>\n        </ExtContainer>\n   `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n *<ext-container>\n   <ext-button text=\"Menu\">\n       <ext-menu rel=\"menu\" >\n           <ext-menuitem text=\"Mobile\" name=\"ui-type\"></ext-menuitem>\n           <ext-menuitem text=\"Desktop\" name=\"ui-type\"/></ext-menuitem>\n       </ext-menu>\n   </ext-button>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-button.component';\nimport '@sencha/ext-web-components/dist/ext-menu.component';\nimport '@sencha/ext-web-components/dist/ext-menuitem.component';\n\nexport default class ItemComponent{}\n```\n"
 },
 {
  "name": "Ext.menu.Menu",
  "xtype": "menu",
  "text": "A menu object. This is the container to which you may add {@link Ext.menu.Item}.\n\nMenus may contain either {@link Ext.menu.Item}, or general\n{@link Ext.Component}. Menus may also contain docked items because it\nextends {@link Ext.Panel}.\n\nBy default, Menus are absolutely positioned, floated Components. By configuring a\nMenu with `{@link #cfg!floated #cfg-floated}: false`, a Menu may be used as a child of a\n{@link Ext.Container}.\n\n```javascript\n @example({ framework: 'extjs' })\n    var mainPanel = Ext.create('Ext.Panel', {\n        fullscreen: true,\n\n        items: {\n            xtype: 'menu',\n            floated: false,\n            docked: 'left',\n            items: [{\n                text: 'regular item 1'\n            },{\n                text: 'regular item 2'\n            },{\n                text: 'regular item 3'\n            }]\n        }\n    });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtButton, ExtContainer, ExtMenu, ExtMenuItem } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n           <ExtContainer>\n               <ExtButton text=\"Menu\">\n                   <ExtMenu rel=\"menu\" >\n                       <ExtMenuItem text=\"Mobile\" name=\"ui-type\" />\n                       <ExtMenuItem text=\"Desktop\" name=\"ui-type\"/>\n                   </ExtMenu>\n               </ExtButton>\n           </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n@Component({\n    selector: 'app-root',\n    styles: [``],\n    template: `\n        <ExtContainer>\n            <ExtButton text=\"Menu\">\n                <ExtMenu rel=\"menu\" >\n                    <ExtMenuItem text=\"Mobile\" name=\"ui-type\" ></ExtMenuItem>\n                    <ExtMenuItem text=\"Desktop\" name=\"ui-type\"></ExtMenuItem>\n                </ExtMenu>\n            </ExtButton>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n@example({tab: 1})\n<ext-container>\n   <ext-button text=\"Menu\">\n       <ext-menu rel=\"menu\" >\n           <ext-menuitem text=\"Mobile\" name=\"ui-type\"></ext-menuitem>\n           <ext-menuitem text=\"Desktop\" name=\"ui-type\"></ext-menuitem>\n       </ext-menu>\n   </ext-button>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-button.component';\nimport '@sencha/ext-web-components/dist/ext-menu.component';\nimport '@sencha/ext-web-components/dist/ext-menuitem.component';\n\nexport default class MenuComponent {}\n"
 },
 {
  "name": "Ext.menu.RadioItem",
  "xtype": "menuradioitem",
  "text": "A checkable menu item that participates in a `{@link #cfg!group group}` of mutually exclusive items.\n\nRadio items must be a assigned to a `{@link #cfg!group}` and only one member of\nthat group is allowed to be checked. The owning `{@link Ext.menu.Menu}` provides\nthe `{@link Ext.menu.Menu#cfg!groups}` config to assist in managing the state\nof its radio items.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.Viewport.add({\n    xtype: 'container',\n    items: [{\n        xtype: 'button',\n        bind: 'Call {menuGroups.option}',\n\n        viewModel: {\n            data: {\n                menuGroups: {\n                    option: 'home'\n                }\n            }\n        },\n\n        menu: {\n            bind: {\n                groups: '{menuGroups}'\n            },\n            items: [{\n                text: 'Home',\n                group: 'option',  // causes Menu to create this class of item\n                value: 'home'\n            }, {\n                text: 'Work',\n                group: 'option',\n                value: 'work'\n            }, {\n                text: 'Mobile',\n                group: 'option',\n                value: 'mobile'\n            }]\n        }\n    }]\n});\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtButton, ExtContainer, ExtMenu, ExtMenuRadioItem } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n           <ExtContainer>\n               <ExtButton text=\"Menu\">\n                   <ExtMenu rel=\"menu\" >\n                       <ExtMenuRadioItem text=\"Mobile\" name=\"ui-type\" />\n                       <ExtMenuRadioItem text=\"Desktop\" name=\"ui-type\"/>\n                   </ExtMenu>\n               </ExtButton>\n           </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n@Component({\n   selector: 'app-root',\n   styles: [``],\n   template: `\n      <ExtContainer>\n          <ExtButton text=\"Menu\">\n              <ExtMenu rel=\"menu\" >\n                  <ExtMenuRadioItem text=\"Mobile\" name=\"ui-type\"\n                     group=\"group1\">\n                  </ExtMenuRadioItem>\n                  <ExtMenuRadioItem text=\"Desktop\" name=\"ui-type\"\n                     group=\"group1\">\n                  </ExtMenuRadioItem>\n              </ExtMenu>\n          </ExtButton>\n      </ExtContainer>\n   `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container>\n   <ext-button text=\"Menu\">\n       <ext-menu rel=\"menu\" >\n           <ext-menuradioitem text=\"Mobile\" group=\"options\" name=\"ui-type\" ></ext-menuradioitem>\n           <ext-menuradioitem text=\"Desktop\" group=\"options\" name=\"ui-type\"><ext-menuradioitem>\n       </ext-menu>\n   </ext-button>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-button.component';\nimport '@sencha/ext-web-components/dist/ext-menu.component';\nimport '@sencha/ext-web-components/dist/ext-menuradioitem.component';\n\nexport default class RadioItemComponent {}\n"
 },
 {
  "name": "Ext.menu.Separator",
  "xtype": "menuseparator",
  "text": "This component renders a simple line to separate menu items.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Panel', {\n    fullscreen: true,\n\n    items: {\n        xtype: 'menu',\n        floated: false,\n        docked: 'top',\n        items: [{\n            text: 'Galactus'\n        },{\n            xtype: 'menuseparator'\n        },{\n            text: 'Darkseid'\n        },{\n            text: 'Thanos'\n        }]\n    }\n});\n```\n"
 },
 {
  "name": "Ext.MessageBox",
  "xtype": "messagebox",
  "text": "Utility class for generating different styles of message boxes. The framework provides a global\nsingleton {@link Ext.Msg} for common usage which you should use in most cases.\n\nIf you want to use {@link Ext.MessageBox} directly, just think of it as a modal\n{@link Ext.Container}.\n\nNote that the MessageBox is asynchronous. Unlike a regular JavaScript `{@link #method!alert alert}` (which will halt\nbrowser execution), showing a MessageBox will not cause the code to stop. For this reason, if\nyou have code that should only run _after_ some user feedback from the MessageBox, you must use\na callback function (see the `fn` configuration option parameter for the\n{@link #method!show show} method for more details).\n\n```javascript\n@example({ framework: 'extjs' })\n    Ext.Msg.alert('Title', 'The quick brown fox jumped over the lazy dog.', Ext.emptyFn);\n```\n\nCheckout {@link Ext.Msg} for more examples.\n"
 },
 {
  "name": "Ext.navigation.View",
  "xtype": "navigationview",
  "text": "NavigationView is basically a {@link Ext.Container} with a {@link Ext.layout.Card} layout,\nso only one view can be visible at a time. However, NavigationView also adds extra functionality\non top of this to allow you to `push` and `pop` views at any time. When you do this, your\nNavigationView will automatically animate between your current active view, and the new view you\nwant to `push`, or the previous view you want to `pop`.\n\nUsing the NavigationView is very simple. Here is a basic example of it in action:\n\n```javascript\n@example({ framework: 'extjs' })\nvar view = Ext.create('Ext.NavigationView', {\n   fullscreen: true,\n\n   items: [{\n       title: 'First',\n       items: [{\n           xtype: 'button',\n           text: 'Push a new view!',\n           handler: function() {\n               // use the push() method to push another view. It works much like\n               // add() or setActiveItem(). it accepts a view instance, or you can give it\n               // a view config.\n               view.push({\n                   title: 'Second',\n                   html: 'Second view!'\n               });\n           }\n       }]\n   }]\n});\n```\n\nNow, here comes the fun part: you can push any view/item into the NavigationView, at any time,\nand it will automatically handle the animations between the two views, including adding a\nback button (if necessary) and showing the new title.\n\n    view.push({\n        title: 'A new view',\n        html: 'Some new content'\n    });\n\nAs you can see, it is as simple as calling the {@link #method!push #method-push} method, with a new view\n(instance or object). Done.\n\nYou can also `pop` a view at any time. This will remove the top-most view from the\nNavigationView,  and animate back to the previous view. You can do this using the\n{@link #method!pop #method-pop} method (which requires no arguments).\n\n    view.pop();\n\nApplications that need compatibility with ##Older Android## devices will want to see\nthe {@link #cfg!layout #layout} config for details on disabling navigation view animations as these devices\nhave poor animation support and performance.\n"
 },
 {
  "name": "Ext.navigation.View",
  "xtype": "navigationview",
  "text": "NavigationView is basically a {@link Ext.Container} with a {@link Ext.layout.Card} layout,\nso only one view can be visible at a time. However, NavigationView also adds extra functionality\non top of this to allow you to `push` and `pop` views at any time. When you do this, your\nNavigationView will automatically animate between your current active view, and the new view you\nwant to `push`, or the previous view you want to `pop`.\n\nUsing the NavigationView is very simple. Here is a basic example of it in action:\n\n```javascript\n@example({ framework: 'extjs' })\nvar view = Ext.create('Ext.NavigationView', {\n   fullscreen: true,\n\n   items: [{\n       title: 'First',\n       items: [{\n           xtype: 'button',\n           text: 'Push a new view!',\n           handler: function() {\n               // use the push() method to push another view. It works much like\n               // add() or setActiveItem(). it accepts a view instance, or you can give it\n               // a view config.\n               view.push({\n                   title: 'Second',\n                   html: 'Second view!'\n               });\n           }\n       }]\n   }]\n});\n```\n\nNow, here comes the fun part: you can push any view/item into the NavigationView, at any time,\nand it will automatically handle the animations between the two views, including adding a\nback button (if necessary) and showing the new title.\n\n    view.push({\n        title: 'A new view',\n        html: 'Some new content'\n    });\n\nAs you can see, it is as simple as calling the {@link #method!push #method-push} method, with a new view\n(instance or object). Done.\n\nYou can also `pop` a view at any time. This will remove the top-most view from the\nNavigationView,  and animate back to the previous view. You can do this using the\n{@link #method!pop #method-pop} method (which requires no arguments).\n\n    view.pop();\n\nApplications that need compatibility with ##Older Android## devices will want to see\nthe {@link #cfg!layout #layout} config for details on disabling navigation view animations as these devices\nhave poor animation support and performance.\n"
 },
 {
  "name": "Ext.Panel",
  "xtype": "panel",
  "text": " Panels are {@link Ext.Container} with an optional\n {@link Ext.panel.Header} that can be positioned using the\n {@link #cfg!headerPosition headerPosition} config option.\n\n Panels add extra functionality by providing various options for configuring a header\n that is docked inside the panel.  Setting any of the following panel config options\n will automatically create a header:\n - {@link #cfg!title title}\n - {@link #cfg!iconCls iconCls}\n - {@link #cfg!icon icon}\n - {@link #cfg!tools tools}\n - {@link #cfg!closable closable}\n\n It is also possible to configure the header directly using the {@link #cfg!header #header}\n configuration. See {@link Ext.panel.Header} for more information.\n\n ### Simple Panel Example (with body text / html)\n\n Usually, Panels are used as constituents within an\n {@link Ext.app.Application}, in which case, they\n would be used as child items of {@link Ext.Container}, and would themselves\n use {@link Ext.Component} as child {@link #cfg!items items}. However,\n to illustrate simply rendering a Panel into the document, here's how to do it:\n\n ```javascript\n @example({ framework: 'extjs' })\n     Ext.create({\n         xtype: 'panel',\n         title: 'Panel Title',\n         iconCls: 'x-fa fa-html5',\n         height: 400,\n         width: 400,\n         bodyPadding: 12,\n         html: 'Sample HTML text',\n         renderTo: Ext.getBody()\n     });\n ```\n\n ### Panel Example (with child items)\n\n Panels are, by virtue of their inheritance from {@link Ext.Container}, capable of\n being configured with a {@link Ext.Container#cfg!layout layout}, and containing child\n {@link Ext.Component}.\n\n ```javascript\n @example({ framework: 'extjs' })\n     Ext.create({\n         xtype: 'panel',\n         bodyPadding: true, // don't want content to crunch against the borders\n         width: 300,\n         title: 'Filters',\n         items: [{\n             xtype: 'datefield',\n             label: 'Start date'\n         }, {\n             xtype: 'datefield',\n             label: 'End date'\n         }],\n         renderTo: Ext.getBody()\n     });\n ```\n\n Panel also provides built-in {@link #cfg!collapsible collapsible, expandable}, and\n {@link #cfg!closable closable} behavior. Panels can be easily dropped into any\n {@link Ext.Container} or layout, and the layout and rendering pipeline\n is {@link Ext.Container#method!add completely managed by the framework}.\n\n ### Floating Panels\n\n Panels are also useful as Overlays - containers that float over your application.\n If configured with `{@link #cfg!anchor anchor}` set to `true`, when you\n {@link #method!showBy showBy} another component, there will be an anchor arrow\n pointing to the reference component.\n\n ```javascript\n @example({ framework: 'extjs' })\n     var panel = Ext.create({\n         xtype: 'panel',\n         title: 'Floated',\n         bodyPadding: true,\n         html: 'context panel text',\n         // the panel will be hidden until shown\n         floated: true,\n         // adds the close tool in the panel header\n         closable: true,\n         // hides, rather than destroys the closed panel\n         closeAction: 'hide',\n         anchor: true\n     });\n\n     Ext.create({\n         xtype: 'button',\n         text: 'Show Popup',\n         margin: 20,\n         // shows the floated panel next to the button\n         handler: function () {\n             panel.showBy(this, 'tl-bl');\n         },\n         renderTo: Ext.getBody()\n     });\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtContainer, ExtPanel, ExtButton } from '@sencha/ext-react';\n Ext.require('Ext.Toast');\n\n export default class MyExample extends Component {\n \t    render() {\n \t        function toolHandler(owner, tool) {\n \t            Ext.toast(`You clicked ${tool.config.type}`);\n\t        }\n\t        return (\n\t            <ExtContainer>\n\t                <ExtPanel\n\t                    shadow\n\t                    title=\"Panel\"\n\t                    height={300}\n\t                    width={500}\n\t                    tools={[\n\t                        { type: 'minimize', handler: toolHandler },\n\t                        { type: 'refresh', handler: toolHandler },\n\t                        { type: 'save', handler: toolHandler },\n\t                        { type: 'search', handler: toolHandler },\n\t                        { type: 'close', handler: toolHandler }\n\t                    ]}\n\t                >\n\t                    <p>Panel Body</p>\n\t                </ExtPanel>\n\t                <ExtButton ui=\"action\" handler={() => this.modal.cmp.show()}\n                       margin=\"20 0 0 0\" text=\"Show Modal\"/>\n\t                <ExtPanel\n\t                    ref={modal => this.modal = modal}\n\t                    title=\"Floated Panel\"\n\t                    modal\n\t                    floated\n\t                    centered\n\t                    hideOnMaskTap\n\t                    width={Ext.filterPlatform('ie10') ? '100%' :\n                            (Ext.os.deviceType == 'Phone') ? 260 : 400}\n\t                    maxHeight={Ext.filterPlatform('ie10') ? '30%' :\n                          (Ext.os.deviceType == 'Phone') ? 220 : 400}\n\t                    showAnimation={{\n\t                        type: 'popIn',\n\t                        duration: 250,\n\t                        easing: 'ease-out'\n\t                    }}\n\t                    hideAnimation={{\n\t                        type: 'popOut',\n\t                        duration: 250,\n\t                        easing: 'ease-out'\n\t                    }}\n\t                >\n\t                    <p>\n\t                        This is a modal, centered and floated panel.\n                          hideOnMaskTap is true by default so we can tap anywhere\n                          outside the overlay to hide it.\n                      </p>\n\t                </ExtPanel>\n\t            </ExtContainer>\n\t        )\n\t    }\n\t}\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n declare var Ext: any;\n import {Component} from '@angular/core';\n Ext.require('Ext.Toast');\n\n @Component({\n\t\t  selector: 'app-component',\n\t\t  template: `<ExtContainer>\n\t\t    <ExtPanel\n\t\t        [shadow]=\"true\"\n\t\t        title=\"Panel\"\n\t\t        [height]=\"300\"\n\t\t        [width]=\"500\"\n\t\t        (ready)=\"this.onMainPanelReady($event)\"\n\t\t        [html]= \"'<p>Panel Body</p>'\"\n\t\t    >\n\t\t    </ExtPanel>\n\t\t    <ExtButton [ui]=\"'action'\" (tap)=\"modalClick()\"\n              margin=\"20 0 0 0\" text=\"Show Modal\">\n        </ExtButton>\n\t\t    <ExtPanel\n\t\t        title=\"Floated Panel\"\n\t\t        [modal]=\"true\"\n\t\t        [floated]=\"true\"\n\t\t        [centered]=\"true\"\n\t\t        hideOnMaskTap=\"true\"\n\t\t        [width]=\"400\"\n\t\t        maxHeight=\"400\"\n\t\t        (ready)=\"this.onModalPanelReady($event)\"\n\t\t        [showAnimation]=\"{\n\t\t        type: 'popIn',\n\t\t        duration: 250,\n\t\t        easing: 'ease-out'\n\t\t        }\"\n\t\t        [hideAnimation]=\"{\n\t\t        type: 'popOut',\n\t\t        duration: 250,\n\t\t        easing: 'ease-out'\n\t\t        }\"\n\t\t        [html]=\"'<p>This is a modal, centered and floated panel.\n              hideOnMaskTap is true by default so we can tap anywhere\n              outside the overlay to hide it.</p>'\"\n\t\t    >\n\t\t    </ExtPanel>\n\t\t  </ExtContainer>`,\n\t\t  styles: [``]\n\t\t})\n\n\t\t  export class AppComponent  {\n\t\t  mainPanel:any;\n\t\t  modalPanelCmp:any;\n\t\t  toolHandler = (owner, tool) => {\n\t\t     Ext.toast(`You clicked ${tool.config.type}`);\n\t\t  }\n\n\t\t  onMainPanelReady = (event) => {\n\t\t    this.mainPanel = event.detail.cmp;\n\t\t    this.mainPanel.setTools([\n\t\t      { type: \"minimize\", handler: this.toolHandler.bind(this) },\n\t\t      { type: \"refresh\", handler: this.toolHandler.bind(this) },\n\t\t      { type: \"save\", handler: this.toolHandler.bind(this) },\n\t\t      { type: \"search\", handler: this.toolHandler.bind(this) },\n\t\t      { type: \"close\", handler: this.toolHandler.bind(this) }\n\t\t    ]);\n\t\t  }\n\n\t\t  onModalPanelReady = (event) => {\n\t\t    this.modalPanelCmp = event.detail.cmp;\n\t\t  }\n\n\t\t  modalClick = (owner, tool) => {\n\t\t    this.modalPanelCmp.show();\n\t\t  }\n\t\t}\n ```\n ```html\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n <ext-container>\n    <ext-panel\n        shadow=\"true\"\n        title=\"Panel\"\n        height=\"300\"\n        width=\"500\"\n        onready=\"mainPanel.onMainPanelReady\"\n    >\n        <p>Panel Body</p>\n    </ext-panel>\n    <ext-button ui=\"action\" ontap=\"mainPanel.modalClick\"\n      margin=\"20 0 0 0\" text=\"Show Modal\"></ext-button>\n    <ext-panel\n        title=\"Floated Panel\"\n        modal=\"true\"\n        floated=\"true\"\n        centered=\"true\"\n        hideOnMaskTap=\"true\"\n        width=\"400\"\n        maxHeight=\"400\"\n        onready=\"mainPanel.onModalPanelReady\"\n        showAnimation='{\n             \"type\": \"popIn\",\n             \"duration\": 250,\n             \"easing\": \"ease-out\"\n        }'\n        hideAnimation='{\n             \"type\": \"popOut\",\n             \"duration\": 250,\n             \"easing\": \"ease-out\"\n        }'\n    >\n        <p>This is a modal, centered and floated panel.\n          hideOnMaskTap is true by default so\n          we can tap anywhere outside the overlay to hide it.</p>\n    </ext-panel>\n </ext-container>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-container.component';\n import '@sencha/ext-web-components/dist/ext-button.component';\n import '@sencha/ext-web-components/dist/ext-panel.component';\n\n Ext.require('Ext.Toast');\n\n export default class MainPanelComponent {\n   toolHandler = (owner, tool) => {\n      Ext.toast(`You clicked ${tool.config.type}`);\n   }\n\n   onMainPanelReady = (event) => {\n       this.mainPanel = event.detail.cmp;\n       this.mainPanel.setTools([\n          { type: \"minimize\", handler: this.toolHandler.bind(this) },\n          { type: \"refresh\", handler: this.toolHandler.bind(this) },\n          { type: \"save\", handler: this.toolHandler.bind(this) },\n          { type: \"search\", handler: this.toolHandler.bind(this) },\n          { type: \"close\", handler: this.toolHandler.bind(this) }\n       ]);\n   }\n\n   onModalPanelReady = (event) => {\n      this.modalPanelCmp = event.detail.cmp;\n   }\n\n   modalClick = (owner, tool) => {\n      this.modalPanelCmp.show();\n   }\n }\n window.mainPanel = new MainPanelComponent();\n ```\n\n **Note:** By default, the `{@link #cfg!closable close}` header tool _destroys_ the\n Panel resulting in removal of the Panel and the destruction of any descendant\n Components. This makes the Panel object, and all its descendants **unusable**. To\n enable the close tool to simply _hide_ a Panel for later re-use, configure the Panel\n with `{@link #cfg!closeAction closeAction}: 'hide'`.\n"
 },
 {
  "name": "Ext.Panel",
  "xtype": "panel",
  "text": " Panels are {@link Ext.Container} with an optional\n {@link Ext.panel.Header} that can be positioned using the\n {@link #cfg!headerPosition headerPosition} config option.\n\n Panels add extra functionality by providing various options for configuring a header\n that is docked inside the panel.  Setting any of the following panel config options\n will automatically create a header:\n - {@link #cfg!title title}\n - {@link #cfg!iconCls iconCls}\n - {@link #cfg!icon icon}\n - {@link #cfg!tools tools}\n - {@link #cfg!closable closable}\n\n It is also possible to configure the header directly using the {@link #cfg!header #header}\n configuration. See {@link Ext.panel.Header} for more information.\n\n ### Simple Panel Example (with body text / html)\n\n Usually, Panels are used as constituents within an\n {@link Ext.app.Application}, in which case, they\n would be used as child items of {@link Ext.Container}, and would themselves\n use {@link Ext.Component} as child {@link #cfg!items items}. However,\n to illustrate simply rendering a Panel into the document, here's how to do it:\n\n ```javascript\n @example({ framework: 'extjs' })\n     Ext.create({\n         xtype: 'panel',\n         title: 'Panel Title',\n         iconCls: 'x-fa fa-html5',\n         height: 400,\n         width: 400,\n         bodyPadding: 12,\n         html: 'Sample HTML text',\n         renderTo: Ext.getBody()\n     });\n ```\n\n ### Panel Example (with child items)\n\n Panels are, by virtue of their inheritance from {@link Ext.Container}, capable of\n being configured with a {@link Ext.Container#cfg!layout layout}, and containing child\n {@link Ext.Component}.\n\n ```javascript\n @example({ framework: 'extjs' })\n     Ext.create({\n         xtype: 'panel',\n         bodyPadding: true, // don't want content to crunch against the borders\n         width: 300,\n         title: 'Filters',\n         items: [{\n             xtype: 'datefield',\n             label: 'Start date'\n         }, {\n             xtype: 'datefield',\n             label: 'End date'\n         }],\n         renderTo: Ext.getBody()\n     });\n ```\n\n Panel also provides built-in {@link #cfg!collapsible collapsible, expandable}, and\n {@link #cfg!closable closable} behavior. Panels can be easily dropped into any\n {@link Ext.Container} or layout, and the layout and rendering pipeline\n is {@link Ext.Container#method!add completely managed by the framework}.\n\n ### Floating Panels\n\n Panels are also useful as Overlays - containers that float over your application.\n If configured with `{@link #cfg!anchor anchor}` set to `true`, when you\n {@link #method!showBy showBy} another component, there will be an anchor arrow\n pointing to the reference component.\n\n ```javascript\n @example({ framework: 'extjs' })\n     var panel = Ext.create({\n         xtype: 'panel',\n         title: 'Floated',\n         bodyPadding: true,\n         html: 'context panel text',\n         // the panel will be hidden until shown\n         floated: true,\n         // adds the close tool in the panel header\n         closable: true,\n         // hides, rather than destroys the closed panel\n         closeAction: 'hide',\n         anchor: true\n     });\n\n     Ext.create({\n         xtype: 'button',\n         text: 'Show Popup',\n         margin: 20,\n         // shows the floated panel next to the button\n         handler: function () {\n             panel.showBy(this, 'tl-bl');\n         },\n         renderTo: Ext.getBody()\n     });\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtContainer, ExtPanel, ExtButton } from '@sencha/ext-react';\n Ext.require('Ext.Toast');\n\n export default class MyExample extends Component {\n \t    render() {\n \t        function toolHandler(owner, tool) {\n \t            Ext.toast(`You clicked ${tool.config.type}`);\n\t        }\n\t        return (\n\t            <ExtContainer>\n\t                <ExtPanel\n\t                    shadow\n\t                    title=\"Panel\"\n\t                    height={300}\n\t                    width={500}\n\t                    tools={[\n\t                        { type: 'minimize', handler: toolHandler },\n\t                        { type: 'refresh', handler: toolHandler },\n\t                        { type: 'save', handler: toolHandler },\n\t                        { type: 'search', handler: toolHandler },\n\t                        { type: 'close', handler: toolHandler }\n\t                    ]}\n\t                >\n\t                    <p>Panel Body</p>\n\t                </ExtPanel>\n\t                <ExtButton ui=\"action\" handler={() => this.modal.cmp.show()}\n                       margin=\"20 0 0 0\" text=\"Show Modal\"/>\n\t                <ExtPanel\n\t                    ref={modal => this.modal = modal}\n\t                    title=\"Floated Panel\"\n\t                    modal\n\t                    floated\n\t                    centered\n\t                    hideOnMaskTap\n\t                    width={Ext.filterPlatform('ie10') ? '100%' :\n                            (Ext.os.deviceType == 'Phone') ? 260 : 400}\n\t                    maxHeight={Ext.filterPlatform('ie10') ? '30%' :\n                          (Ext.os.deviceType == 'Phone') ? 220 : 400}\n\t                    showAnimation={{\n\t                        type: 'popIn',\n\t                        duration: 250,\n\t                        easing: 'ease-out'\n\t                    }}\n\t                    hideAnimation={{\n\t                        type: 'popOut',\n\t                        duration: 250,\n\t                        easing: 'ease-out'\n\t                    }}\n\t                >\n\t                    <p>\n\t                        This is a modal, centered and floated panel.\n                          hideOnMaskTap is true by default so we can tap anywhere\n                          outside the overlay to hide it.\n                      </p>\n\t                </ExtPanel>\n\t            </ExtContainer>\n\t        )\n\t    }\n\t}\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n declare var Ext: any;\n import {Component} from '@angular/core';\n Ext.require('Ext.Toast');\n\n @Component({\n\t\t  selector: 'app-component',\n\t\t  template: `<ExtContainer>\n\t\t    <ExtPanel\n\t\t        [shadow]=\"true\"\n\t\t        title=\"Panel\"\n\t\t        [height]=\"300\"\n\t\t        [width]=\"500\"\n\t\t        (ready)=\"this.onMainPanelReady($event)\"\n\t\t        [html]= \"'<p>Panel Body</p>'\"\n\t\t    >\n\t\t    </ExtPanel>\n\t\t    <ExtButton [ui]=\"'action'\" (tap)=\"modalClick()\"\n              margin=\"20 0 0 0\" text=\"Show Modal\">\n        </ExtButton>\n\t\t    <ExtPanel\n\t\t        title=\"Floated Panel\"\n\t\t        [modal]=\"true\"\n\t\t        [floated]=\"true\"\n\t\t        [centered]=\"true\"\n\t\t        hideOnMaskTap=\"true\"\n\t\t        [width]=\"400\"\n\t\t        maxHeight=\"400\"\n\t\t        (ready)=\"this.onModalPanelReady($event)\"\n\t\t        [showAnimation]=\"{\n\t\t        type: 'popIn',\n\t\t        duration: 250,\n\t\t        easing: 'ease-out'\n\t\t        }\"\n\t\t        [hideAnimation]=\"{\n\t\t        type: 'popOut',\n\t\t        duration: 250,\n\t\t        easing: 'ease-out'\n\t\t        }\"\n\t\t        [html]=\"'<p>This is a modal, centered and floated panel.\n              hideOnMaskTap is true by default so we can tap anywhere\n              outside the overlay to hide it.</p>'\"\n\t\t    >\n\t\t    </ExtPanel>\n\t\t  </ExtContainer>`,\n\t\t  styles: [``]\n\t\t})\n\n\t\t  export class AppComponent  {\n\t\t  mainPanel:any;\n\t\t  modalPanelCmp:any;\n\t\t  toolHandler = (owner, tool) => {\n\t\t     Ext.toast(`You clicked ${tool.config.type}`);\n\t\t  }\n\n\t\t  onMainPanelReady = (event) => {\n\t\t    this.mainPanel = event.detail.cmp;\n\t\t    this.mainPanel.setTools([\n\t\t      { type: \"minimize\", handler: this.toolHandler.bind(this) },\n\t\t      { type: \"refresh\", handler: this.toolHandler.bind(this) },\n\t\t      { type: \"save\", handler: this.toolHandler.bind(this) },\n\t\t      { type: \"search\", handler: this.toolHandler.bind(this) },\n\t\t      { type: \"close\", handler: this.toolHandler.bind(this) }\n\t\t    ]);\n\t\t  }\n\n\t\t  onModalPanelReady = (event) => {\n\t\t    this.modalPanelCmp = event.detail.cmp;\n\t\t  }\n\n\t\t  modalClick = (owner, tool) => {\n\t\t    this.modalPanelCmp.show();\n\t\t  }\n\t\t}\n ```\n ```html\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n <ext-container>\n    <ext-panel\n        shadow=\"true\"\n        title=\"Panel\"\n        height=\"300\"\n        width=\"500\"\n        onready=\"mainPanel.onMainPanelReady\"\n    >\n        <p>Panel Body</p>\n    </ext-panel>\n    <ext-button ui=\"action\" ontap=\"mainPanel.modalClick\"\n      margin=\"20 0 0 0\" text=\"Show Modal\"></ext-button>\n    <ext-panel\n        title=\"Floated Panel\"\n        modal=\"true\"\n        floated=\"true\"\n        centered=\"true\"\n        hideOnMaskTap=\"true\"\n        width=\"400\"\n        maxHeight=\"400\"\n        onready=\"mainPanel.onModalPanelReady\"\n        showAnimation='{\n             \"type\": \"popIn\",\n             \"duration\": 250,\n             \"easing\": \"ease-out\"\n        }'\n        hideAnimation='{\n             \"type\": \"popOut\",\n             \"duration\": 250,\n             \"easing\": \"ease-out\"\n        }'\n    >\n        <p>This is a modal, centered and floated panel.\n          hideOnMaskTap is true by default so\n          we can tap anywhere outside the overlay to hide it.</p>\n    </ext-panel>\n </ext-container>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-container.component';\n import '@sencha/ext-web-components/dist/ext-button.component';\n import '@sencha/ext-web-components/dist/ext-panel.component';\n\n Ext.require('Ext.Toast');\n\n export default class MainPanelComponent {\n   toolHandler = (owner, tool) => {\n      Ext.toast(`You clicked ${tool.config.type}`);\n   }\n\n   onMainPanelReady = (event) => {\n       this.mainPanel = event.detail.cmp;\n       this.mainPanel.setTools([\n          { type: \"minimize\", handler: this.toolHandler.bind(this) },\n          { type: \"refresh\", handler: this.toolHandler.bind(this) },\n          { type: \"save\", handler: this.toolHandler.bind(this) },\n          { type: \"search\", handler: this.toolHandler.bind(this) },\n          { type: \"close\", handler: this.toolHandler.bind(this) }\n       ]);\n   }\n\n   onModalPanelReady = (event) => {\n      this.modalPanelCmp = event.detail.cmp;\n   }\n\n   modalClick = (owner, tool) => {\n      this.modalPanelCmp.show();\n   }\n }\n window.mainPanel = new MainPanelComponent();\n ```\n\n **Note:** By default, the `{@link #cfg!closable close}` header tool _destroys_ the\n Panel resulting in removal of the Panel and the destruction of any descendant\n Components. This makes the Panel object, and all its descendants **unusable**. To\n enable the close tool to simply _hide_ a Panel for later re-use, configure the Panel\n with `{@link #cfg!closeAction closeAction}: 'hide'`.\n"
 },
 {
  "name": "Ext.panel.Accordion",
  "xtype": "accordion",
  "text": " This container manages child panels in an expandable accordion style. By default, only\n one child panel can be expanded at a time. Set {@link #cfg!openable #openable} to a different value\n to allow multiple panels to be expanded.\n\n Note: Only `{@link Ext.Panel}` and its subclasses will be explicitly managed. All other items\n will be treated normally.\n\n ```javascript\n @example({ framework: 'extjs' })\n Ext.create({\n     xtype: 'accordion',\n     title: 'Accordion',\n     fullscreen: true,\n\n     defaults: {\n         // applied to each contained panel\n         xtype: 'panel',\n         bodyPadding: 10\n     },\n\n     openable: 2,\n\n     items: [{\n         title: 'Panel 1',\n         html: 'Panel content!'\n     }, {\n         title: 'Panel 2',\n         html: 'Panel content!'\n     }, {\n         title: 'Panel 3',\n         html: 'Panel content!'\n     }]\n });\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react'\n import { ExtAccordion, ExtPanel } from '@sencha/ext-react';\n\n\texport default class MyExample extends Component {\n\t   render() {\n\t       return (\n\t            <ExtAccordion\n\t                title=\"Accordion\"\n\t                fullscreen=\"true\"\n\t                openable=\"2\"\n\t            >\n\t                <ExtPanel\n\t                    bodyPadding=\"10\"\n\t                    title=\"Panel 1\"\n\t                    html=\"Panel Content!\"\n\t                >\n\t                </ExtPanel>\n\t                <ExtPanel\n\t                    bodyPadding=\"10\"\n\t                    title=\"Panel 2\"\n\t                    html=\"Panel Content!\"\n\t                >\n\t                </ExtPanel>\n\t                <ExtPanel\n\t                    bodyPadding=\"10\"\n\t                    title=\"Panel 3\"\n\t                    html=\"Panel Content!\"\n \t                >\n\t                </ExtPanel>\n\t           </ExtAccordion>\n\t        )\n\t    }\n\t}\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core';\n import {ExtPanel, ExtAccordion} from '@sencha/ext-react';\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [``],\n     template: `\n         <ExtAccordion\n             title=\"Accordion\"\n             fullscreen=\"true\"\n             openable=\"2\"\n         >\n             <ExtPanel\n                 bodyPadding=\"10\"\n                 title=\"Panel 1\"\n                 html=\"Panel Content!\"\n             >\n             </ExtPanel>\n             <ExtPanel\n                 bodyPadding=\"10\"\n                 title=\"Panel 2\"\n                 html=\"Panel Content!\"\n             >\n             </ExtPanel>\n             <ExtPanel\n                 bodyPadding=\"10\"\n                 title=\"Panel 3\"\n                 html=\"Panel Content!\"\n             >\n             </ExtPanel>\n          </ExtAccordion>\n     `\n })\n export class AppComponent {}\n ```\n ```html\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n <ext-accordion\n     title=\"Accordion\"\n     fullscreen=\"true\"\n     openable=\"2\"\n >\n     <ext-panel\n         bodyPadding=\"10\"\n         title=\"Panel 1\"\n         html=\"Panel Content!\"\n     >\n     </ext-panel>\n     <ext-panel\n         bodyPadding=\"10\"\n         title=\"Panel 2\"\n         html=\"Panel Content!\"\n     >\n     </ext-panel>\n     <ext-panel\n         bodyPadding=\"10\"\n         title=\"Panel 3\"\n         html=\"Panel Content!\"\n     >\n     </ext-panel>\n </ext-accordion>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-accordion.component';\n import '@sencha/ext-web-components/dist/ext-panel.component';\n\n export default class AccordionComponent {}\n ```\n"
 },
 {
  "name": "Ext.panel.Date",
  "xtype": "datepanel",
  "text": "This component presents a month calendar and allows the user to browse and select a valid\ndate. It is used as a `{@link #cfg!floated floated}` popup by {@link Ext.field.Date} but can be created\nand used directly.\n"
 },
 {
  "name": "Ext.panel.DateTitle",
  "xtype": "datetitle"
 },
 {
  "name": "Ext.panel.Header",
  "xtype": "panelheader",
  "text": "This container is used to manage the items (such as title and tools) for `{@link Ext.Panel}`.\n"
 },
 {
  "name": "Ext.panel.Time",
  "xtype": "timepanel",
  "text": "This component presents a time selection view with different interaction modes\ndepending on the device and configuration options. Default time view is analog\nclock face.\n\nTime panel is mostly used as a picker by {@link Ext.field.Time} but can also be\ncreated and used directly.\n\n\nExample usage:\n\n```javascript\n@example({ framework: 'extjs' })\n     Ext.create('Ext.form.Panel', {\n          fullscreen: true,\n          items: [\n              {\n                  xtype: 'timepanel',\n                  shadow: true\n              }\n          ]\n      });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport { ExtContainer, ExtTimePanel } from '@sencha/ext-react';\nimport React, { Component } from 'react';\nexport default class TimeExample extends Component {\n    render() {\n        return (\n           <ExtContainer padding={10} layout={'auto'}>\n              <ExtTimePanel shadow/>\n           </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n       <ExtContainer [padding]=\"10\" [layout]=\"'auto'\">\n           <ExtTimePanel shadow=\"true\"></ExtTimePanel>\n       </ExtContainer>\n    `\n})\nexport class AppComponent {}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container padding={10} layout='{\"auto\"}'>\n   <ext-timepanel shadow></ext-timepanel>\n </ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-timepanel.component';\n\nexport default class TimeComponent {}\n"
 },
 {
  "name": "Ext.panel.Title",
  "xtype": "paneltitle",
  "text": "A basic title component for a Panel Header.\n"
 },
 {
  "name": "Ext.panel.YearPicker",
  "xtype": "yearpicker",
  "text": "A year picker for the {@link Ext.panel.Date}. This component cannot\nbe used standalone, only in conjunction with the {@link Ext.panel.Date} config.\n"
 },
 {
  "name": "Ext.picker.Date",
  "xtype": "datepicker",
  "text": " A date picker component which shows a Date Picker on the screen. This class extends from\n {@link Ext.picker.Picker} and {@link Ext.Sheet} so it is a popup.\n\n This component has no required configurations.\n\n ## Examples\n\n ```javascript\n @example({ framework: 'extjs' })\n     var datePicker = Ext.create('Ext.picker.Date');\n     Ext.Viewport.add(datePicker);\n     datePicker.show();\n ```\n\n You may want to adjust the {@link #cfg!yearFrom #yearFrom} and {@link #cfg!yearTo #yearTo} properties:\n\n ```javascript\n @example({ framework: 'extjs' })\n     var datePicker = Ext.create('Ext.picker.Date', {\n         yearFrom: 2000,\n         yearTo  : 2015\n     });\n     Ext.Viewport.add(datePicker);\n     datePicker.show();\n ```\n\n You can set the value of the {@link Ext.picker.Date} to the current date using `new Date()`:\n\n ```javascript\n @example({ framework: 'extjs' })\n     var datePicker = Ext.create('Ext.picker.Date', {\n         value: new Date()\n     });\n     Ext.Viewport.add(datePicker);\n     datePicker.show();\n ```\n\n And you can hide the titles from each of the slots by using the {@link #cfg!useTitles #useTitles} configuration:\n\n ```javascript\n @example({ framework: 'extjs' })\n     var datePicker = Ext.create('Ext.picker.Date', {\n         useTitles: false\n     });\n     Ext.Viewport.add(datePicker);\n     datePicker.show();\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtContainer, ExtDatePicker, ExtButton } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     showPicker = () => this.picker.show();\n     render() {\n         return (\n             <ExtContainer>\n                 <ExtButton ui=\"action\" handler={this.showPicker} text=\"Show Picker\"/>\n                 <ExtDatePicker\n                     ref={picker => this.picker = picker}\n                 />\n             </ExtContainer>\n         )\n     }\n }\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [``],\n     template: `\n         <ExtContainer>\n             <ExtButton ui=\"action\" [handler]=\"this.showPicker\"\n                   text=\"Show Picker\"></ExtButton>\n             <ExtDatePicker\n                 (ready)=\"onPickerReady($event)\"\n             ></ExtDatePicker>\n         </ExtContainer>\n     `\n })\n export class AppComponent {\n    pickerComp;\n\n    onPickerReady = (event) => {\n        this.pickerComp = event.detail.cmp;\n    }\n\n    showPicker = () => {\n        this.pickerComp.show();\n    }\n }\n ```\n ```html\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n <ext-container>\n     <ext-button ui=\"action\" ontap=\"date.showPicker\" text=\"Show Picker\"></ext-button>\n     <ext-datepicker\n         onready=\"datepickerCmp.datepickerReady\"\n     >\n     </ext-datepicker>\n </ext-container>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n\n import '@sencha/ext-web-components/dist/ext-container.component';\n import '@sencha/ext-web-components/dist/ext-datepicker.component';\n import '@sencha/ext-web-components/dist/ext-button.component';\n\n export default class DatePickerComponent {\n     datepickerReady = (event) => {\n         this.pickerCmp = event.detail.cmp;\n     }\n\n     showPicker = () => {\n         this.pickerCmp.show();\n     }\n }\n window.datepickerCmp = new DatePickerComponent();\n```\n"
 },
 {
  "name": "Ext.picker.Date",
  "xtype": "datepicker",
  "text": " A date picker component which shows a Date Picker on the screen. This class extends from\n {@link Ext.picker.Picker} and {@link Ext.Sheet} so it is a popup.\n\n This component has no required configurations.\n\n ## Examples\n\n ```javascript\n @example({ framework: 'extjs' })\n     var datePicker = Ext.create('Ext.picker.Date');\n     Ext.Viewport.add(datePicker);\n     datePicker.show();\n ```\n\n You may want to adjust the {@link #cfg!yearFrom #yearFrom} and {@link #cfg!yearTo #yearTo} properties:\n\n ```javascript\n @example({ framework: 'extjs' })\n     var datePicker = Ext.create('Ext.picker.Date', {\n         yearFrom: 2000,\n         yearTo  : 2015\n     });\n     Ext.Viewport.add(datePicker);\n     datePicker.show();\n ```\n\n You can set the value of the {@link Ext.picker.Date} to the current date using `new Date()`:\n\n ```javascript\n @example({ framework: 'extjs' })\n     var datePicker = Ext.create('Ext.picker.Date', {\n         value: new Date()\n     });\n     Ext.Viewport.add(datePicker);\n     datePicker.show();\n ```\n\n And you can hide the titles from each of the slots by using the {@link #cfg!useTitles #useTitles} configuration:\n\n ```javascript\n @example({ framework: 'extjs' })\n     var datePicker = Ext.create('Ext.picker.Date', {\n         useTitles: false\n     });\n     Ext.Viewport.add(datePicker);\n     datePicker.show();\n ```\n ```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtContainer, ExtDatePicker, ExtButton } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     showPicker = () => this.picker.show();\n     render() {\n         return (\n             <ExtContainer>\n                 <ExtButton ui=\"action\" handler={this.showPicker} text=\"Show Picker\"/>\n                 <ExtDatePicker\n                     ref={picker => this.picker = picker}\n                 />\n             </ExtContainer>\n         )\n     }\n }\n ```\n ```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [``],\n     template: `\n         <ExtContainer>\n             <ExtButton ui=\"action\" [handler]=\"this.showPicker\"\n                   text=\"Show Picker\"></ExtButton>\n             <ExtDatePicker\n                 (ready)=\"onPickerReady($event)\"\n             ></ExtDatePicker>\n         </ExtContainer>\n     `\n })\n export class AppComponent {\n    pickerComp;\n\n    onPickerReady = (event) => {\n        this.pickerComp = event.detail.cmp;\n    }\n\n    showPicker = () => {\n        this.pickerComp.show();\n    }\n }\n ```\n ```html\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n <ext-container>\n     <ext-button ui=\"action\" ontap=\"date.showPicker\" text=\"Show Picker\"></ext-button>\n     <ext-datepicker\n         onready=\"datepickerCmp.datepickerReady\"\n     >\n     </ext-datepicker>\n </ext-container>\n ```\n ```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n\n import '@sencha/ext-web-components/dist/ext-container.component';\n import '@sencha/ext-web-components/dist/ext-datepicker.component';\n import '@sencha/ext-web-components/dist/ext-button.component';\n\n export default class DatePickerComponent {\n     datepickerReady = (event) => {\n         this.pickerCmp = event.detail.cmp;\n     }\n\n     showPicker = () => {\n         this.pickerCmp.show();\n     }\n }\n window.datepickerCmp = new DatePickerComponent();\n```\n"
 },
 {
  "name": "Ext.picker.Picker",
  "xtype": "picker",
  "text": "A general picker class. {@link Ext.picker.Slot}s are used to organize multiple scrollable\nslots into a single picker. {@link #cfg!slots #slots} is the only necessary configuration.\n\nThe {@link #cfg!slots #slots} configuration with a few key values:\n\n- `{@link #cfg!name name}`: The name of the slot (will be the key when using {@link #method!getValues #getValues} in this\n {@link Ext.picker.Picker}).\n- `{@link #cfg!title title}`: The title of this slot (if {@link #cfg!useTitles #useTitles} is set to `true`).\n- `{@link #cfg!data data}`/`store`: The data or store to use for this slot.\n\nRemember, {@link Ext.picker.Slot} class extends from {@link Ext.dataview.DataView}.\n\n## Examples\n\n```javascript\n@example({ framework: 'extjs' })\nvar picker = Ext.create('Ext.Picker', {\n    slots: [\n        {\n      name : 'limit_speed',\n      title: 'Speed',\n      data : [\n          {text: '50 KB/s', value: 50},\n          {text: '100 KB/s', value: 100},\n          {text: '200 KB/s', value: 200},\n          {text: '300 KB/s', value: 300}\n      ]\n        }\n    ]\n});\nExt.Viewport.add(picker);\npicker.show();\n```\n\nYou can also customize the top toolbar on the {@link Ext.picker.Picker} by changing the\n{@link #cfg!doneButton #doneButton} and {@link #cfg!cancelButton #cancelButton} configurations:\n\n```javascript\n@example({ framework: 'extjs' })\nvar picker = Ext.create('Ext.Picker', {\n    doneButton: 'I\\'m done!',\n    cancelButton: false,\n    slots: [\n        {\n      name : 'limit_speed',\n      title: 'Speed',\n      data : [\n          {text: '50 KB/s', value: 50},\n          {text: '100 KB/s', value: 100},\n          {text: '200 KB/s', value: 200},\n          {text: '300 KB/s', value: 300}\n      ]\n        }\n    ]\n});\nExt.Viewport.add(picker);\npicker.show();\n```\n\nOr by passing a custom {@link #cfg!toolbar #toolbar} configuration:\n\n```javascript\n@example({ framework: 'extjs' })\nvar picker = Ext.create('Ext.Picker', {\n    doneButton: false,\n    cancelButton: false,\n    toolbar: {\n        ui: 'light',\n        title: 'My Picker!'\n    },\n    slots: [\n        {\n      name : 'limit_speed',\n      title: 'Speed',\n      data : [\n          {text: '50 KB/s', value: 50},\n          {text: '100 KB/s', value: 100},\n          {text: '200 KB/s', value: 200},\n          {text: '300 KB/s', value: 300}\n      ]\n        }\n    ]\n});\nExt.Viewport.add(picker);\npicker.show();\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtPicker, ExtButton } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\nshowPicker = () => this.picker.show();\nrender() {\n    return (\n        <ExtContainer>\n            <ExtButton ui=\"action\" handler={this.showPicker} text=\"Show Picker\"/>\n            <ExtPicker\n                ref={picker => this.picker = picker}\n                slots={[\n                    {\n                        name: 'limit_speed',\n                        title: 'Speed',\n                        data: [\n                            {text: '50 KB/s', value: 50},\n                            {text: '100 KB/s', value: 100},\n                            {text: '200 KB/s', value: 200},\n                            {text: '300 KB/s', value: 300}\n                        ]\n                    }\n                ]}\n            />\n      </ExtContainer>\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer>\n            <ExtButton\n                ui=\"action\"\n                [handler]=\"this.showPicker\"\n                text=\"Show Picker\"\n            >\n            </ExtButton>\n            <ExtPicker\n                (ready)='this.onPickerReady($event)'\n                [slots]=\"[\n                    {\n                        name: 'limit_speed',\n                        title: 'Speed',\n                        data: [\n                            {text: '50 KB/s', value: 50},\n                            {text: '100 KB/s', value: 100},\n                            {text: '200 KB/s', value: 200},\n                            {text: '300 KB/s', value: 300}\n                        ]\n                     }\n                ]\"\n            >\n            </ExtPicker>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {\n  pickerComp;\n\n  onPickerReady = (event) => {\n      this.pickerComp = event.detail.cmp;\n  }\n\n  showPicker = () => {\n      this.pickerComp.show();\n  }\n}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n@example({tab: 1})\n<ext-container>\n<ext-button ui=\"action\" ontap=\"picker.showPicker\" text=\"Show Picker\"></ext-button>\n<ext-picker\n    onready=\"picker.pickerReady\"\n        slots='[{\n          \"name\": \"limit_speed\",\n          \"title\": \"Speed\",\n          \"data\": [\n                      {\"text\": \"50 KB/s\", \"value\": \"50\"},\n                      {\"text\": \"100 KB/s\", \"value\": \"100\"},\n                      {\"text\": \"200 KB/s\", \"value\": \"200\"},\n                      {\"text\": \"300 KB/s\", \"value\": \"300\"}\n                  ]\n          }]'\n >\n   </ext-picker>\n</ext-container>\n```\n\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-button.component';\nimport '@sencha/ext-web-components/dist/ext-picker.component';\n\nexport default class PickerComponent {\npickerReady = (event) => {\n    this.pickerCmp = event.detail.cmp;\n}\n\nshowPicker = () => {\n     this.pickerCmp.show();\n}\n}\nwindow.picker = new PickerComponent();\n```\n"
 },
 {
  "name": "Ext.picker.Picker",
  "xtype": "picker",
  "text": "A general picker class. {@link Ext.picker.Slot}s are used to organize multiple scrollable\nslots into a single picker. {@link #cfg!slots #slots} is the only necessary configuration.\n\nThe {@link #cfg!slots #slots} configuration with a few key values:\n\n- `{@link #cfg!name name}`: The name of the slot (will be the key when using {@link #method!getValues #getValues} in this\n {@link Ext.picker.Picker}).\n- `{@link #cfg!title title}`: The title of this slot (if {@link #cfg!useTitles #useTitles} is set to `true`).\n- `{@link #cfg!data data}`/`store`: The data or store to use for this slot.\n\nRemember, {@link Ext.picker.Slot} class extends from {@link Ext.dataview.DataView}.\n\n## Examples\n\n```javascript\n@example({ framework: 'extjs' })\nvar picker = Ext.create('Ext.Picker', {\n    slots: [\n        {\n      name : 'limit_speed',\n      title: 'Speed',\n      data : [\n          {text: '50 KB/s', value: 50},\n          {text: '100 KB/s', value: 100},\n          {text: '200 KB/s', value: 200},\n          {text: '300 KB/s', value: 300}\n      ]\n        }\n    ]\n});\nExt.Viewport.add(picker);\npicker.show();\n```\n\nYou can also customize the top toolbar on the {@link Ext.picker.Picker} by changing the\n{@link #cfg!doneButton #doneButton} and {@link #cfg!cancelButton #cancelButton} configurations:\n\n```javascript\n@example({ framework: 'extjs' })\nvar picker = Ext.create('Ext.Picker', {\n    doneButton: 'I\\'m done!',\n    cancelButton: false,\n    slots: [\n        {\n      name : 'limit_speed',\n      title: 'Speed',\n      data : [\n          {text: '50 KB/s', value: 50},\n          {text: '100 KB/s', value: 100},\n          {text: '200 KB/s', value: 200},\n          {text: '300 KB/s', value: 300}\n      ]\n        }\n    ]\n});\nExt.Viewport.add(picker);\npicker.show();\n```\n\nOr by passing a custom {@link #cfg!toolbar #toolbar} configuration:\n\n```javascript\n@example({ framework: 'extjs' })\nvar picker = Ext.create('Ext.Picker', {\n    doneButton: false,\n    cancelButton: false,\n    toolbar: {\n        ui: 'light',\n        title: 'My Picker!'\n    },\n    slots: [\n        {\n      name : 'limit_speed',\n      title: 'Speed',\n      data : [\n          {text: '50 KB/s', value: 50},\n          {text: '100 KB/s', value: 100},\n          {text: '200 KB/s', value: 200},\n          {text: '300 KB/s', value: 300}\n      ]\n        }\n    ]\n});\nExt.Viewport.add(picker);\npicker.show();\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtPicker, ExtButton } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\nshowPicker = () => this.picker.show();\nrender() {\n    return (\n        <ExtContainer>\n            <ExtButton ui=\"action\" handler={this.showPicker} text=\"Show Picker\"/>\n            <ExtPicker\n                ref={picker => this.picker = picker}\n                slots={[\n                    {\n                        name: 'limit_speed',\n                        title: 'Speed',\n                        data: [\n                            {text: '50 KB/s', value: 50},\n                            {text: '100 KB/s', value: 100},\n                            {text: '200 KB/s', value: 200},\n                            {text: '300 KB/s', value: 300}\n                        ]\n                    }\n                ]}\n            />\n      </ExtContainer>\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer>\n            <ExtButton\n                ui=\"action\"\n                [handler]=\"this.showPicker\"\n                text=\"Show Picker\"\n            >\n            </ExtButton>\n            <ExtPicker\n                (ready)='this.onPickerReady($event)'\n                [slots]=\"[\n                    {\n                        name: 'limit_speed',\n                        title: 'Speed',\n                        data: [\n                            {text: '50 KB/s', value: 50},\n                            {text: '100 KB/s', value: 100},\n                            {text: '200 KB/s', value: 200},\n                            {text: '300 KB/s', value: 300}\n                        ]\n                     }\n                ]\"\n            >\n            </ExtPicker>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {\n  pickerComp;\n\n  onPickerReady = (event) => {\n      this.pickerComp = event.detail.cmp;\n  }\n\n  showPicker = () => {\n      this.pickerComp.show();\n  }\n}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n@example({tab: 1})\n<ext-container>\n<ext-button ui=\"action\" ontap=\"picker.showPicker\" text=\"Show Picker\"></ext-button>\n<ext-picker\n    onready=\"picker.pickerReady\"\n        slots='[{\n          \"name\": \"limit_speed\",\n          \"title\": \"Speed\",\n          \"data\": [\n                      {\"text\": \"50 KB/s\", \"value\": \"50\"},\n                      {\"text\": \"100 KB/s\", \"value\": \"100\"},\n                      {\"text\": \"200 KB/s\", \"value\": \"200\"},\n                      {\"text\": \"300 KB/s\", \"value\": \"300\"}\n                  ]\n          }]'\n >\n   </ext-picker>\n</ext-container>\n```\n\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-button.component';\nimport '@sencha/ext-web-components/dist/ext-picker.component';\n\nexport default class PickerComponent {\npickerReady = (event) => {\n    this.pickerCmp = event.detail.cmp;\n}\n\nshowPicker = () => {\n     this.pickerCmp.show();\n}\n}\nwindow.picker = new PickerComponent();\n```\n"
 },
 {
  "name": "Ext.picker.SelectPicker",
  "xtype": "selectpicker",
  "text": "This is used by {@link Ext.field.Select} as an `'edge'` picker.\n\nIt implements parts the interface of {@link Ext.dataview.BoundList} which Select uses\nto operate the picker without having to know whether it's floated or edge.\n"
 },
 {
  "name": "Ext.picker.Slot",
  "xtype": "pickerslot",
  "text": "A general {@link Ext.picker.Picker} slot class.  Slots are used to organize multiple\nscrollable slots into a single {@link Ext.picker.Picker}.\n\n    {\n        name : 'limit_speed',\n        title: 'Speed Limit',\n        data : [\n            {text: '50 KB/s', value: 50},\n            {text: '100 KB/s', value: 100},\n            {text: '200 KB/s', value: 200},\n            {text: '300 KB/s', value: 300}\n        ]\n    }\n\nSee the {@link Ext.picker.Picker} documentation on how to use slots.\n"
 },
 {
  "name": "Ext.picker.Tablet",
  "xtype": "tabletpicker"
 },
 {
  "name": "Ext.pivot.cell.Cell",
  "xtype": "pivotgridcell",
  "text": "This class is used internally by the pivot grid component.\n"
 },
 {
  "name": "Ext.pivot.cell.Group",
  "xtype": "pivotgridgroupcell",
  "text": "This class is used internally by the pivot grid component.\n"
 },
 {
  "name": "Ext.pivot.d3.Container",
  "xtype": "pivotd3container",
  "text": "This container can host D3 components that need a pivot configurator\nplugin.\n"
 },
 {
  "name": "Ext.pivot.d3.HeatMap",
  "xtype": "pivotheatmap",
  "text": "This component extends the D3 HeatMap to work with a pivot matrix.\n\nBasically this component needs a pivot matrix to be configured. The values\ncalculated by the pivot matrix are distributed as following:\n\n - `leftAxis` maps to HeatMap `{@link #cfg!xAxis xAxis}`\n - `topAxis` maps to HeatMap `{@link #cfg!yAxis yAxis}`\n - `aggregate` maps to HeatMap `{@link #cfg!colorAxis colorAxis}`\n\nThe pivot matrix should be configured with maximum one dimension per\n`leftAxis`, `topAxis` or `aggregate`.\n"
 },
 {
  "name": "Ext.pivot.d3.TreeMap",
  "xtype": "pivottreemap",
  "text": "This component extends the D3 TreeMap to work with a pivot matrix.\n\nBasically this component needs a pivot matrix to be configured. The values\ncalculated by the pivot matrix are distributed as following:\n\n - `leftAxis` maps to TreeMap `{@link #cfg!colorAxis colorAxis}`\n - `aggregate` maps to TreeMap `{@link #cfg!nodeValue nodeValue}`\n\nMultiple dimensions can be configured on `leftAxis` but only one dimension\non the `aggregate`. `topAxis` dimensions are ignored.\n"
 },
 {
  "name": "Ext.pivot.Grid",
  "xtype": "pivotgrid",
  "text": "The pivot grid helps you analyze your data.\n\nCalculations can be done either in your browser using a {@link Ext.pivot.matrix.Local}\nmatrix or remotely on the server using a {@link Ext.pivot.matrix.Remote} matrix.\n\nExample usage:\n\n     {\n         xtype:  'pivotgrid',\n         matrix: {\n             type: 'local',\n             store: 'yourStoreId',    // or a store instance\n             rowGrandTotalsPosition: 'first',\n             leftAxis: [{\n                 dataIndex: 'country',\n                 direction: 'DESC',\n                 header: 'Countries',\n                 width: 150\n             }],\n             topAxis: [{\n                 dataIndex: 'year',\n                 direction: 'ASC'\n             }],\n             aggregate: [{\n                 dataIndex: 'value',\n                 header: 'Total',\n                 aggregator: 'sum',\n                 width: 120\n             }]\n         }\n     }\n\n\nThe modern pivot grid could be styled using data binding as following:\n\n## ViewModel on rows\n\nLet's have a look at this example:\n\n     {\n         xtype: 'pivotgrid',\n         itemConfig: {\n             viewModel: {\n                 type: 'pivot-row-model'\n             },\n             bind: {\n                 userCls: '{rowStyle}'\n                 // or you can define a template\n                 //userCls: '{record.isRowGroupHeader:pick(\"\",\"pivotRowHeader\")}'\n             }\n         }\n         // ... more configs\n     }\n\nIn the ViewModel we would declare a formula that will use the record data. The record\nhas all values that are displayed for that row and the following additional fields:\n\n- isRowGroupHeader\n- isRowGroupTotal\n- isRowGrandTotal\n- leftAxisKey: This is either the grand total key or a key that identifies the left axis item\n\nAll these properties can help us style the entire row without knowing anything about\nthe generated columns.\n\nIn some case we may want to style positive and negative values generated in the pivot grid.\nThis can be done as following.\n\n     {\n         xtype: 'pivotgrid',\n         itemConfig: {\n             viewModel: {\n                 type: 'default'\n             }\n         },\n         topAxisCellConfig: {\n             bind: {\n                 userCls: '{value:sign(\"pivotCellNegative\",\"pivotCellPositive\")}'\n             }\n         }\n         // ... more configs\n     }\n\nThe following data is available for use in the bind template:\n\n- column\n     - isColGroupTotal: this tells us that the column for that specific cell is a group total\n     - isColGrandTotal: this tells us that the column for that specific cell is a grand total\n\n- value: cell value\n\n**Note:** In such cases you cannot use formulas because the column and value are generated\ndynamically and can't be replaced in formulas.\n\n\nIt is also possible to style a specific dimension from left axis or aggregate:\n\n     {\n         xtype: 'pivotgrid',\n         itemConfig: {\n             viewModel: {\n                 type: 'default'\n             }\n         },\n         matrix: {\n             aggregate: [{\n                 dataIndex:  'value',\n                 aggregator: 'sum',\n                 align:      'right',\n\n                 cellConfig: {\n                     bind: {\n                         userCls: '{value:sign(\"pivotCellNegative\",\"pivotCellPositive\")}'\n                     }\n                 }\n             },{\n                 dataIndex:  'value',\n                 aggregator: 'count'\n             }],\n             leftAxis: [{\n                 dataIndex:  'person',\n                 // This is used only when `viewLayoutType` is `outline`\n                 cellConfig: {\n                     bind: {\n                         userCls: '{record.isRowGroupHeader::pick(\"\",\"pivotRowHeader\")}'\n                     }\n                 }\n             },{\n                 dataIndex:  'country'\n             }]\n             // ... more configs\n         }\n     }\n\n\n## ViewModel on cells\n\nThis scenario allows you to define formulas to use in cell binding. Be careful that this means\nthat each cell will have an own ViewModel and this may decrease the pivot grid performance.\nUse it only if necessary.\n\n     {\n         xtype: 'pivotgrid',\n         leftAxisCellConfig: {\n             viewModel: {\n                 type: 'default'\n             },\n             bind: {\n                 userCls: '{record.isRowGroupHeader::pick(\"\",\"pivotRowHeader\")}'\n             }\n         },\n         topAxisCellConfig: {\n             viewModel: {\n                 type: 'pivot-cell-model' // to be able to define your own formulas\n             },\n             bind: {\n                 userCls: '{value:sign(\"pivotCellNegative\",\"pivotCellPositive\")}'\n                 //userCls: '{column.isColGrandTotal:pick(null,\"pivotCellGrandTotal\")}'\n                 //userCls: '{cellCls}\n             }\n         }\n         // ... more configs\n     }\n\nThis approach lets you use record, column and value in both bind templates and formulas.\n\n\nIf multiple aggregate dimensions are available and you want to style one of them you can define\nthe binding on that dimension like this:\n\n     {\n         xtype: 'pivotgrid',\n         matrix: {\n             aggregate: [{\n                 dataIndex:  'value',\n                 aggregator: 'sum',\n                 align:      'right',\n\n                 cellConfig: {\n                     viewModel: {\n                         type: 'pivot-cell-model'\n                     },\n                     bind: {\n                         userCls: '{value:sign(\"pivotCellNegative\",\"pivotCellPositive\")}'\n                         //userCls: '{column.isColGrandTotal:pick(null,\"pivotCellGrandTotal\")}'\n                         //userCls: '{cellCls}\n                     }\n                 }\n             },{\n                 dataIndex:  'value',\n                 aggregator: 'count'\n             }]\n             // ... more configs\n         }\n     }\n"
 },
 {
  "name": "Ext.pivot.plugin.configurator.Column",
  "xtype": "pivotconfigfield",
  "text": "This class is used for creating a configurator field component.\n"
 },
 {
  "name": "Ext.pivot.plugin.configurator.Container",
  "xtype": "pivotconfigcontainer",
  "text": "This is a container that holds configurator fields.\n"
 },
 {
  "name": "Ext.pivot.plugin.configurator.Form",
  "xtype": "pivotconfigform",
  "text": "This class implements the form that allows changing the field settings.\n"
 },
 {
  "name": "Ext.pivot.plugin.configurator.Panel",
  "xtype": "pivotconfigpanel",
  "text": "This class implements the configurator panel.\n"
 },
 {
  "name": "Ext.pivot.plugin.configurator.Settings",
  "xtype": "pivotsettings",
  "text": "This class implements the form that allows changing the pivot matrix settings.\n"
 },
 {
  "name": "Ext.pivot.plugin.rangeeditor.Panel",
  "xtype": "pivotrangeeditor"
 },
 {
  "name": "Ext.pivot.Row",
  "xtype": "pivotgridrow",
  "text": "This class is used internally by the pivot grid component.\n"
 },
 {
  "name": "Ext.Progress",
  "xtype": "progress",
  "text": "\n    @example\n    Ext.create({\n        xtype: 'grid',\n        title: 'Simpsons',\n        store: {\n            data: [\n                { name: 'Lisa', progress: .159 },\n                { name: 'Bart', progress: .216 },\n                { name: 'Homer', progress: .55 },\n                { name: 'Maggie', progress: .167 },\n                { name: 'Marge', progress: .145 }\n            ]\n        },\n        columns: [\n            { text: 'Name',  dataIndex: 'name' },\n            {\n                text: 'Progress',\n                width: 120,\n                dataIndex: 'progress',\n                cell: {\n                    xtype: 'widgetcell',\n                    widget: {\n                        xtype: 'progress'\n                    }\n                }\n            }\n        ],\n        height: 200,\n        width: 400,\n        fullscreen: true\n    });\n"
 },
 {
  "name": "Ext.Progress",
  "xtype": "progressbarwidget",
  "text": "\n    @example\n    Ext.create({\n        xtype: 'grid',\n        title: 'Simpsons',\n        store: {\n            data: [\n                { name: 'Lisa', progress: .159 },\n                { name: 'Bart', progress: .216 },\n                { name: 'Homer', progress: .55 },\n                { name: 'Maggie', progress: .167 },\n                { name: 'Marge', progress: .145 }\n            ]\n        },\n        columns: [\n            { text: 'Name',  dataIndex: 'name' },\n            {\n                text: 'Progress',\n                width: 120,\n                dataIndex: 'progress',\n                cell: {\n                    xtype: 'widgetcell',\n                    widget: {\n                        xtype: 'progress'\n                    }\n                }\n            }\n        ],\n        height: 200,\n        width: 400,\n        fullscreen: true\n    });\n"
 },
 {
  "name": "Ext.Progress",
  "xtype": "progress",
  "text": "\n    @example\n    Ext.create({\n        xtype: 'grid',\n        title: 'Simpsons',\n        store: {\n            data: [\n                { name: 'Lisa', progress: .159 },\n                { name: 'Bart', progress: .216 },\n                { name: 'Homer', progress: .55 },\n                { name: 'Maggie', progress: .167 },\n                { name: 'Marge', progress: .145 }\n            ]\n        },\n        columns: [\n            { text: 'Name',  dataIndex: 'name' },\n            {\n                text: 'Progress',\n                width: 120,\n                dataIndex: 'progress',\n                cell: {\n                    xtype: 'widgetcell',\n                    widget: {\n                        xtype: 'progress'\n                    }\n                }\n            }\n        ],\n        height: 200,\n        width: 400,\n        fullscreen: true\n    });\n"
 },
 {
  "name": "Ext.Progress",
  "xtype": "progressbarwidget",
  "text": "\n    @example\n    Ext.create({\n        xtype: 'grid',\n        title: 'Simpsons',\n        store: {\n            data: [\n                { name: 'Lisa', progress: .159 },\n                { name: 'Bart', progress: .216 },\n                { name: 'Homer', progress: .55 },\n                { name: 'Maggie', progress: .167 },\n                { name: 'Marge', progress: .145 }\n            ]\n        },\n        columns: [\n            { text: 'Name',  dataIndex: 'name' },\n            {\n                text: 'Progress',\n                width: 120,\n                dataIndex: 'progress',\n                cell: {\n                    xtype: 'widgetcell',\n                    widget: {\n                        xtype: 'progress'\n                    }\n                }\n            }\n        ],\n        height: 200,\n        width: 400,\n        fullscreen: true\n    });\n"
 },
 {
  "name": "Ext.SegmentedButton",
  "xtype": "segmentedbutton",
  "text": "SegmentedButton is a container for a group of {@link Ext.Button}s. Generally a SegmentedButton\nwould be a child of a {@link Ext.Toolbar} and would be used to switch between different views.\n\n## Example usage:\n\n```javascript\n@example({ framework: 'extjs' })\nvar segmentedButton = Ext.create('Ext.SegmentedButton', {\n    allowMultiple: true,\n    items: [\n        {\n            text: 'Option 1'\n        },\n        {\n            text: 'Option 2',\n            pressed: true\n        },\n        {\n            text: 'Option 3'\n        }\n    ],\n    listeners: {\n        toggle: function(container, button, pressed){\n            alert(\"User toggled the '\" + button.getText() + \"' button: \" +\n            (pressed ? 'on' : 'off'));\n        }\n    }\n});\nExt.Viewport.add({ xtype: 'container', padding: 10, items: [segmentedButton] });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtPicker, ExtButton } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    showPicker = () => this.picker.show();\n    render() {\n        return (\n             <ExtContainer>\n                 <ExtButton ui=\"action\" handler={this.showPicker} text=\"Show Picker\"/>\n                  <ExtPicker\n                     ref={picker => this.picker = picker}\n                     slots={[\n                         {\n                             name: 'limit_speed',\n                             title: 'Speed',\n                             data: [\n                                 {text: '50 KB/s', value: 50},\n                                 {text: '100 KB/s', value: 100},\n                                 {text: '200 KB/s', value: 200},\n                                 {text: '300 KB/s', value: 300}\n                             ]\n                         }\n                     ]}\n                />\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer>\n            <ExtButton ui=\"action\" [handler]=\"this.showPicker\"\n                   text=\"Show Picker\"></ExtButton>\n            <ExtPicker\n                (ready)='this.onPickerReady($event)'\n                [slots]=\"[\n                    {\n                        name: 'limit_speed',\n                        title: 'Speed',\n                        data: [\n                            {text: '50 KB/s', value: 50},\n                            {text: '100 KB/s', value: 100},\n                            {text: '200 KB/s', value: 200},\n                            {text: '300 KB/s', value: 300}\n                        ]\n                    }\n                ]\"\n            >\n            </ExtPicker>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {\n        pickerComp;\n\n        onPickerReady = (event) => {\n            this.pickerComp = event.detail.cmp;\n        }\n\n        showPicker = () => {\n            this.pickerComp.show();\n        }\n}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n @example({tab: 1})\n<ext-container>\n    <ext-button ui=\"action\" ontap=\"picker.showPicker\" text=\"Show Picker\"></ext-button>\n    <ext-picker\n        onready=\"picker.pickerReady\"\n        slots='[{\n                \"name\": \"limit_speed\",\n                \"title\": \"Speed\",\n                \"data\": [\n                            {\"text\": \"50 KB/s\", \"value\": \"50\"},\n                            {\"text\": \"100 KB/s\", \"value\": \"100\"},\n                            {\"text\": \"200 KB/s\", \"value\": \"200\"},\n                            {\"text\": \"300 KB/s\", \"value\": \"300\"}\n                        ]\n                }]'\n    >\n    </ext-picker>\n</ext-container>\n```\n\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-button.component';\nimport '@sencha/ext-web-components/dist/ext-picker.component';\n\nexport default class PickerComponent {\n    pickerReady = (event) => {\n        this.pickerCmp = event.detail.cmp;\n    }\n\n    showPicker = () => {\n         this.pickerCmp.show();\n    }\n}\nwindow.picker = new PickerComponent();\n```\n"
 },
 {
  "name": "Ext.SegmentedButton",
  "xtype": "segmentedbutton",
  "text": "SegmentedButton is a container for a group of {@link Ext.Button}s. Generally a SegmentedButton\nwould be a child of a {@link Ext.Toolbar} and would be used to switch between different views.\n\n## Example usage:\n\n```javascript\n@example({ framework: 'extjs' })\nvar segmentedButton = Ext.create('Ext.SegmentedButton', {\n    allowMultiple: true,\n    items: [\n        {\n            text: 'Option 1'\n        },\n        {\n            text: 'Option 2',\n            pressed: true\n        },\n        {\n            text: 'Option 3'\n        }\n    ],\n    listeners: {\n        toggle: function(container, button, pressed){\n            alert(\"User toggled the '\" + button.getText() + \"' button: \" +\n            (pressed ? 'on' : 'off'));\n        }\n    }\n});\nExt.Viewport.add({ xtype: 'container', padding: 10, items: [segmentedButton] });\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtPicker, ExtButton } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    showPicker = () => this.picker.show();\n    render() {\n        return (\n             <ExtContainer>\n                 <ExtButton ui=\"action\" handler={this.showPicker} text=\"Show Picker\"/>\n                  <ExtPicker\n                     ref={picker => this.picker = picker}\n                     slots={[\n                         {\n                             name: 'limit_speed',\n                             title: 'Speed',\n                             data: [\n                                 {text: '50 KB/s', value: 50},\n                                 {text: '100 KB/s', value: 100},\n                                 {text: '200 KB/s', value: 200},\n                                 {text: '300 KB/s', value: 300}\n                             ]\n                         }\n                     ]}\n                />\n            </ExtContainer>\n        )\n    }\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [``],\n    template: `\n        <ExtContainer>\n            <ExtButton ui=\"action\" [handler]=\"this.showPicker\"\n                   text=\"Show Picker\"></ExtButton>\n            <ExtPicker\n                (ready)='this.onPickerReady($event)'\n                [slots]=\"[\n                    {\n                        name: 'limit_speed',\n                        title: 'Speed',\n                        data: [\n                            {text: '50 KB/s', value: 50},\n                            {text: '100 KB/s', value: 100},\n                            {text: '200 KB/s', value: 200},\n                            {text: '300 KB/s', value: 300}\n                        ]\n                    }\n                ]\"\n            >\n            </ExtPicker>\n        </ExtContainer>\n    `\n})\nexport class AppComponent {\n        pickerComp;\n\n        onPickerReady = (event) => {\n            this.pickerComp = event.detail.cmp;\n        }\n\n        showPicker = () => {\n            this.pickerComp.show();\n        }\n}\n```\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n @example({tab: 1})\n<ext-container>\n    <ext-button ui=\"action\" ontap=\"picker.showPicker\" text=\"Show Picker\"></ext-button>\n    <ext-picker\n        onready=\"picker.pickerReady\"\n        slots='[{\n                \"name\": \"limit_speed\",\n                \"title\": \"Speed\",\n                \"data\": [\n                            {\"text\": \"50 KB/s\", \"value\": \"50\"},\n                            {\"text\": \"100 KB/s\", \"value\": \"100\"},\n                            {\"text\": \"200 KB/s\", \"value\": \"200\"},\n                            {\"text\": \"300 KB/s\", \"value\": \"300\"}\n                        ]\n                }]'\n    >\n    </ext-picker>\n</ext-container>\n```\n\n```javascript\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-button.component';\nimport '@sencha/ext-web-components/dist/ext-picker.component';\n\nexport default class PickerComponent {\n    pickerReady = (event) => {\n        this.pickerCmp = event.detail.cmp;\n    }\n\n    showPicker = () => {\n         this.pickerCmp.show();\n    }\n}\nwindow.picker = new PickerComponent();\n```\n"
 },
 {
  "name": "Ext.Sheet",
  "xtype": "sheet",
  "text": "A floated panel which animates in and out from the side of the screen when shown.\nUsed as the base class for {@link Ext.ActionSheet} and\n{@link Ext.picker.Picker}\n"
 },
 {
  "name": "Ext.slider.Slider",
  "xtype": "slider",
  "text": "The slider component utilized by `{@link Ext.field.Slider}`.\n\nThe slider is a way to allow the user to select a value from a given numerical range.\nYou might use it for choosing a percentage, combine two of them to get min and max\nvalues, or use three of them to specify the hex values for a color.\n\nEach slider contains a single 'thumb' that can be dragged along the slider's length to\nchange the value.\n\n## Simple Slider\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'container',\n    fullscreen: true,\n    padding: 20,\n\n    items: [{\n        xtype: 'slider',\n        value: 42\n    }]\n});\n```\n\n## Slider with Bound Value\n\nThis slider does not incorporate two-way binding by default.  Please utilize `{@link #cfg!publishes publishes}` or\n`{@link #cfg!twoWayBindable twoWayBindable}` in order to publish bound values.  You can also use Ext.field.Slider\ndirectly for a more feature-rich component.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'container',\n    fullscreen: true,\n    padding: 20,\n\n    layout: {\n        type: 'hbox',\n        pack: 'center'\n    },\n\n    viewModel: {\n        data: {\n            value: 42\n        }\n    },\n\n    items: [{\n        xtype: 'slider',\n        value: '{value}'\n    }, {\n        xtype: 'label',\n        bind: '{value}'\n    }]\n})\n```\n"
 },
 {
  "name": "Ext.slider.Thumb",
  "xtype": "thumb",
  "text": "Utility class used by Ext.slider.Slider - should never need to be used directly.\n"
 },
 {
  "name": "Ext.slider.Toggle",
  "xtype": "toggleslider",
  "text": "Toggle switch component used by Ext.field.Toggle\n"
 },
 {
  "name": "Ext.Spacer",
  "xtype": "spacer",
  "text": "The {@link Ext.Spacer} component is generally used to put space between items in\n{@link Ext.Toolbar} components.\n## Examples\n\nBy default the {@link #cfg!flex #flex} configuration is set to 1:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Container', {\n    fullscreen: true,\n    items: [\n        {\n            xtype : 'toolbar',\n            docked: 'top',\n            items: [\n                {\n                    xtype: 'button',\n                    text : 'Button One'\n                },\n                {\n                    xtype: 'spacer'\n                },\n                {\n                    xtype: 'button',\n                    text : 'Button Two'\n                }\n            ]\n        }\n    ]\n});\n```\n\nAlternatively you can just set the {@link #cfg!width #width} configuration which will get the\n{@link Ext.Spacer} a fixed width:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Container', {\n    fullscreen: true,\n    layout: {\n        type: 'vbox',\n        pack: 'center',\n        align: 'stretch'\n    },\n    items: [\n        {\n            xtype : 'toolbar',\n            docked: 'top',\n            items: [\n                {\n                    xtype: 'button',\n                    text : 'Button One'\n                },\n                {\n                    xtype: 'spacer',\n                    width: 50\n                },\n                {\n                    xtype: 'button',\n                    text : 'Button Two'\n                }\n            ]\n        },\n        {\n            xtype: 'container',\n            items: [\n                {\n                    xtype: 'button',\n                    text : 'Change Ext.Spacer width',\n                    handler: function() {\n                        //get the spacer using ComponentQuery\n                        var spacer = Ext.ComponentQuery.query('spacer')[0],\n                            from = 10,\n                            to = 250;\n\n                        //set the width to a random number\n                        spacer.setWidth(Math.floor(Math.random() * (to - from + 1) + from));\n                    }\n                }\n            ]\n        }\n    ]\n});\n```\n\nYou can also insert multiple {@link Ext.Spacer}'s:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Container', {\n    fullscreen: true,\n    items: [\n        {\n            xtype : 'toolbar',\n            docked: 'top',\n            items: [\n                {\n                    xtype: 'button',\n                    text : 'Button One'\n                },\n                {\n                    xtype: 'spacer'\n                },\n                {\n                    xtype: 'button',\n                    text : 'Button Two'\n                },\n                {\n                    xtype: 'spacer',\n                    width: 20\n                },\n                {\n                    xtype: 'button',\n                    text : 'Button Three'\n                }\n            ]\n        }\n    ]\n});\n```\n"
 },
 {
  "name": "Ext.sparkline.Bar",
  "xtype": "sparklinebar",
  "text": "\nPlots a bar chart of the values in the passed {@link #cfg!values #values} array.\n\nSee {@link Ext.sparkline.Base} for a simple example.\n"
 },
 {
  "name": "Ext.sparkline.Base",
  "xtype": "sparkline",
  "text": "\n The base class for ExtJS SparkLines. SparkLines are small, inline graphs used to visually\n display small amounts of data. For large datasets, use the\n {@link Ext.chart.AbstractChart}.\n\n The SparkLine subclasses accept an {@link #cfg!values array of values}, and present the data\n in different visualizations.\n\n     @example\n     new Ext.Panel({\n         height: 300,\n         width: 600,\n         frame: true,\n         title: 'Test Sparklines',\n         renderTo:document.body,\n         bodyPadding: 10,\n\n         // Named listeners will resolve to methods in this Panel\n         defaultListenerScope: true,\n\n         // Named references will be collected, and can be access from this Panel\n         referenceHolder: true,\n\n         items: [{\n             reference: 'values',\n             xtype: 'textfield',\n             fieldLabel: 'Values',\n             validator: function(v) {\n                 var result = [];\n\n                 v = v.replace(/\\s/g, '');\n                 v = v.replace(/,$/, '');\n                 v = v.split(',');\n                 for (var i = 0; i < v.length; i++) {\n                     if (!Ext.isNumeric(v[i])) {\n                         return 'Value must be a comma separated array of numbers';\n                     }\n                     result.push(parseInt(v[i], 10));\n                 }\n                 this.values = result;\n                 return true;\n             },\n             listeners: {\n                 change: 'onTypeChange',\n                 buffer: 500,\n                 afterrender: {\n                     fn: 'afterTypeRender',\n                     single: true\n                 }\n             }\n         }, {\n             reference: 'type',\n             xtype: 'combobox',\n             fieldLabel: 'Type',\n             store: [\n                 ['sparklineline',     'Line'],\n                 ['sparklinebox',      'Box'],\n                 ['sparklinebullet',   'Bullet'],\n                 ['sparklinediscrete', 'Discrete'],\n                 ['sparklinepie',      'Pie'],\n                 ['sparklinetristate', 'TriState']\n             ],\n             value: 'sparklineline',\n             listeners: {\n                 change: 'onTypeChange',\n                 buffer: 500\n             }\n         }],\n\n         // Start with a line plot.\n         afterTypeRender: function(typeField) {\n             typeField.setValue('6,10,4,-3,7,2');\n         },\n\n         onTypeChange: function() {\n             var me = this,\n                 refs = me.getReferences(),\n                 config;\n\n             if (me.sparkLine) {\n                 me.remove(me.sparkLine, true);\n             }\n             config = {\n                 xtype: refs.type.getValue(),\n                 values: refs.values.values,\n                 height: 25,\n                 width: 100\n             };\n\t           me.sparkLine = Ext.create(config);\n             me.add(me.sparkLine);\n\n             // Put under fields\n             me.sparkLine.el.dom.style.marginLeft = refs.type.labelEl.getWidth() + 'px';\n         }\n     });\n"
 },
 {
  "name": "Ext.sparkline.Box",
  "xtype": "sparklinebox",
  "text": "Generates a box plot graph from the provided {@link #cfg!values #values} array.\n\nSee <a href=\"http://en.wikipedia.org/wiki/Box_plot\">Wikipedia Box Plots</a>\n\nSee {@link Ext.sparkline.Base} for a simple example.\n"
 },
 {
  "name": "Ext.sparkline.Bullet",
  "xtype": "sparklinebullet",
  "text": "\nPlots a bullet graph based upon the input {@link #cfg!values #values} array.\n\nSee <a href=\"http://en.wikipedia.org/wiki/Bullet_graph\">Bullet graphs Wikipedia Page</a>\nfor more information.\n\nThe first value should be the target value. If there is no target value, it should be `null`.\nThe second value should be the performance value. If there is no performance value, it should be\nspecified as `null`.\n\nAn example value:\n\n    // Target 10\n    // Performance 12\n    // Ranges 12,9,7\n    [10, 12, 12, 9, 7]\n\nSee {@link Ext.sparkline.Base} for a simple example.\n"
 },
 {
  "name": "Ext.sparkline.Discrete",
  "xtype": "sparklinediscrete",
  "text": "\nPlots a series of thin vertical lines based upon the input {@link #cfg!values #values} array.\n\nSee {@link Ext.sparkline.Base} for a simple example.\n"
 },
 {
  "name": "Ext.sparkline.Line",
  "xtype": "sparklineline",
  "text": "\nPlots a line graph based upon the input {@link #cfg!values #values} array.\n\nSee {@link Ext.sparkline.Base} for a simple example.\n"
 },
 {
  "name": "Ext.sparkline.Pie",
  "xtype": "sparklinepie",
  "text": "\nPlots a pie chart based upon the input {#values} array.\n\nSee {@link Ext.sparkline.Base} for a simple example.\n"
 },
 {
  "name": "Ext.sparkline.TriState",
  "xtype": "sparklinetristate",
  "text": "\nPlots bars based upon \"win\"/\"draw\" or \"lose\" status of the input {@link #cfg!values #values} array.\nPositive values mean a win, zero a draw, and negative a lose.\n\nSee {@link Ext.sparkline.Base} for a simple example.\n"
 },
 {
  "name": "Ext.SplitButton",
  "xtype": "splitbutton",
  "text": "A split button that provides a built-in dropdown arrow that can fire an event separately from\nthe default click event of the button. Typically this would be used to display a dropdown menu\nthat provides additional options to the primary button action, but any custom handler can\nprovide the arrowclick implementation.  Example usage:\n\n```javascript\n@example({ framework: 'extjs' })\n// display a dropdown menu:\nExt.create('Ext.SplitButton', {\n    renderTo: Ext.getBody(),\n    text: 'Options',\n    // handle a click on the button itself\n    handler: function() {\n        alert(\"The button was clicked\");\n    },\n    menu: new Ext.menu.Menu({\n        items: [\n            // these will render as dropdown menu items when the arrow is clicked:\n            {text: 'Item 1', handler: function(){ alert(\"Item 1 clicked\"); }},\n            {text: 'Item 2', handler: function(){ alert(\"Item 2 clicked\"); }}\n        ]\n    })\n});\n```\n\nProvide custom handling to the split button when the dropdown arrow is clicked:\n\n    Ext.create('Ext.SplitButton', {\n        renderTo: 'button-ct',\n        text: 'Options',\n        handler: optionsHandler,\n        arrowHandler: myCustomHandler\n    });\n\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container padding=\"10\" layout=\"vbox\">\n    <ext-splitbutton\n         text=\"SplitButton\"\n         ontap=\"splitbutton.sayHello\"\n         ui=\"action alt\"\n         iconCls=\"x-fa fa-heart\"\n         margin=\"10\"\n         onready=\"splitbutton.splitButtonReady\"\n     >\n     </ext-splitbutton>\n</ext-container>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\n\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-splitbutton.component';\n\nexport default class SplitButtonComponent {\n     splitButtonReady = (event) => {\n         const splitButtonCmp = event.detail.cmp;\n         splitButtonCmp.setMenu([{\n             text: \"Menu Item 1\",\n             handler: () => { alert(\"Item 1 clicked\"); }\n         }, {\n             text: \"Menu Item 2\",\n             handler: () => {alert(\"Item 2 clicked\"); }\n         }]);\n     }\n\n     sayHello = () => {\n         alert(\"Hello! The button was clicked\");\n     }\n}\n\nwindow.splitbutton = new SplitButtonComponent();\n```\n\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtSplitButton } from '@sencha/ext-react';\n\nexport default class SplitButtonExample extends Component {\n\n    render() {\n        return (\n            <ExtContainer padding=\"10\" layout=\"vbox\">\n                <ExtSplitButton\n                    text=\"SplitButton\"\n                    handler={this.sayHello}\n                    ui=\"action alt\"\n                    iconCls=\"x-fa fa-heart\"\n                    {...menuProps} margin=\"10\"\n                />\n            </ExtContainer>\n        )\n    }\n    sayHello = () => {\n        alert(\"Hello! The button was clicked\");\n    }\n}\nconst menuProps ={\n    menu: [{\n        text: 'Menu Item 1',\n        handler: function(){ alert(\"Item 1 clicked\"); }\n    }, {\n        text: 'Menu Item 2',\n        handler: function(){ alert(\"Item 2 clicked\"); }\n    }]\n}\n```\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [`\n             `],\n     template: `\n             <ExtContainer padding=\"10\" layout=\"vbox\">\n                 <ExtSplitButton\n                     text=\"SplitButton\"\n                     [handler]=\"this.sayHello\"\n                     ui=\"action alt\"\n                     iconCls=\"x-fa fa-heart\"\n                     margin=\"10\"\n                     [menu]=\"this.menu\"\n                  ></ExtSplitButton>\n             </ExtContainer>\n             `\n })\n export class AppComponent {\n\n     sayHello = () => {\n         alert(\"Hello! The button was clicked\");\n     }\n\n     menu = [{\n         text: 'Menu Item 1',\n         handler: function(){ alert(\"Item 1 clicked\"); }\n     }, {\n         text: 'Menu Item 2',\n         handler: function(){ alert(\"Item 2 clicked\"); }\n     }];\n }\n```\n"
 },
 {
  "name": "Ext.tab.Bar",
  "xtype": "tabbar",
  "text": "Ext.tab.Bar is used internally by {@link Ext.tab.Panel} to create the bar of tabs that appears\nat the top of the tab panel. It can also be used as a standalone component to\nrecreate the look and feel of tabs.\n"
 },
 {
  "name": "Ext.tab.Bar",
  "xtype": "tabbar",
  "text": "Ext.tab.Bar is used internally by {@link Ext.tab.Panel} to create the bar of tabs that appears\nat the top of the tab panel. It can also be used as a standalone component to\nrecreate the look and feel of tabs.\n"
 },
 {
  "name": "Ext.tab.Panel",
  "xtype": "tabpanel",
  "text": "Tab Panels are a great way to allow the user to switch between several\npages that are all full screen. Each\nComponent in the Tab Panel gets its own Tab, which shows the Component when tapped on.\nTabs can be positioned at the top or the bottom of the Tab Panel,\nand can optionally accept title and icon configurations\n(see {@link Ext.Button#cfg!iconCls iconCls} for additional information).\n\nHere's how we can set up a simple Tab Panel with tabs at the bottom.\nUse the controls at the top left of the example\nto toggle between code mode and live preview mode\n(you can also edit the code and see your changes in the live\npreview):\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.TabPanel', {\n    fullscreen: true,\n    tabBarPosition: 'bottom',\n\n    items: [\n        {\n            title: 'Home',\n            iconCls: 'home',\n            html: 'Home Screen'\n        },\n        {\n            title: 'Contact',\n            iconCls: 'user',\n            html: 'Contact Screen'\n        }\n    ]\n});\n```\nOne tab was created for each of the {@link Ext.Panel} defined in the items array.\nEach tab automatically uses the title and icon defined on the item configuration,\nand switches to that item when tapped on. We can also position\nthe tab bar at the top, which makes our Tab Panel look like this:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.TabPanel', {\n    fullscreen: true,\n\n    items: [\n        {\n            title: 'Home',\n            html: 'Home Screen'\n        },\n        {\n            title: 'Contact',\n            html: 'Contact Screen'\n        }\n    ]\n});\n```\n\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n <ext-tabpanel\n  flex=\"1\"\n  shadow=\"true\"\n  height=\"100%\"\n  defaults='{\"cls\": \"card\",\"layout\": \"center\"}'\n >\n     <ext-panel title=\"Tab 1\" layout=\"center\">\n         <ext-container\n             flex=\"1\"\n             html=\"By default, tabs are aligned to the top of a view.\"\n         >\n         </ext-container>\n     </ext-panel>\n     <ext-panel flex=\"1\" title=\"Tab 2\" layout=\"center\">\n         <ext-container\n           flex=\"1\"\n           html=\n             \"A TabPanel can use different animations by setting <code>layout.animation.</code>\"\n         >\n         </ext-container>\n     </ext-panel>\n     <ext-panel title=\"Tab 3\" layout=\"center\">\n         <ext-container cls=\"action\" html=\"User tapped Tab 3\"></ext-container>\n     </ext-panel>\n </ext-tabpanel>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-tabpanel.component';\n\nexport default class PanelComponent {}\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtContainer, ExtTabPanel } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtTabPanel>\n                <ExtContainer title=\"Tab 1\">\n                    This is content for Tab 1!\n                </ExtContainer>\n                <ExtContainer title=\"Tab 2\">\n                    This is content for Tab 2!\n                </ExtContainer>\n                <ExtContainer title=\"Tab 3\">\n                    This is content for Tab 3!\n                </ExtContainer>\n            </ExtTabPanel>\n        )\n    }\n}\n```\n\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [`\n            `],\n    template: `\n            <ExtTabPanel shadow=\"true\">\n                <ExtContainer [title]=\"'Tab 1'\">\n                    This is content for Tab 1!\n                </ExtContainer>\n                <ExtContainer [title]=\"'Tab 2'\">\n                    This is content for Tab 2!\n                </ExtContainer>\n                <ExtContainer [title]=\"'Tab 3'\">\n                    This is content for Tab 3!\n                </ExtContainer>\n            </ExtTabPanel>\n            `\n})\nexport class AppComponent {\n}\n```\n"
 },
 {
  "name": "Ext.tab.Panel",
  "xtype": "tabpanel",
  "text": "Tab Panels are a great way to allow the user to switch between several\npages that are all full screen. Each\nComponent in the Tab Panel gets its own Tab, which shows the Component when tapped on.\nTabs can be positioned at the top or the bottom of the Tab Panel,\nand can optionally accept title and icon configurations\n(see {@link Ext.Button#cfg!iconCls iconCls} for additional information).\n\nHere's how we can set up a simple Tab Panel with tabs at the bottom.\nUse the controls at the top left of the example\nto toggle between code mode and live preview mode\n(you can also edit the code and see your changes in the live\npreview):\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.TabPanel', {\n    fullscreen: true,\n    tabBarPosition: 'bottom',\n\n    items: [\n        {\n            title: 'Home',\n            iconCls: 'home',\n            html: 'Home Screen'\n        },\n        {\n            title: 'Contact',\n            iconCls: 'user',\n            html: 'Contact Screen'\n        }\n    ]\n});\n```\nOne tab was created for each of the {@link Ext.Panel} defined in the items array.\nEach tab automatically uses the title and icon defined on the item configuration,\nand switches to that item when tapped on. We can also position\nthe tab bar at the top, which makes our Tab Panel look like this:\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.TabPanel', {\n    fullscreen: true,\n\n    items: [\n        {\n            title: 'Home',\n            html: 'Home Screen'\n        },\n        {\n            title: 'Contact',\n            html: 'Contact Screen'\n        }\n    ]\n});\n```\n\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n <ext-tabpanel\n  flex=\"1\"\n  shadow=\"true\"\n  height=\"100%\"\n  defaults='{\"cls\": \"card\",\"layout\": \"center\"}'\n >\n     <ext-panel title=\"Tab 1\" layout=\"center\">\n         <ext-container\n             flex=\"1\"\n             html=\"By default, tabs are aligned to the top of a view.\"\n         >\n         </ext-container>\n     </ext-panel>\n     <ext-panel flex=\"1\" title=\"Tab 2\" layout=\"center\">\n         <ext-container\n           flex=\"1\"\n           html=\n             \"A TabPanel can use different animations by setting <code>layout.animation.</code>\"\n         >\n         </ext-container>\n     </ext-panel>\n     <ext-panel title=\"Tab 3\" layout=\"center\">\n         <ext-container cls=\"action\" html=\"User tapped Tab 3\"></ext-container>\n     </ext-panel>\n </ext-tabpanel>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-tabpanel.component';\n\nexport default class PanelComponent {}\n```\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtContainer, ExtTabPanel } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtTabPanel>\n                <ExtContainer title=\"Tab 1\">\n                    This is content for Tab 1!\n                </ExtContainer>\n                <ExtContainer title=\"Tab 2\">\n                    This is content for Tab 2!\n                </ExtContainer>\n                <ExtContainer title=\"Tab 3\">\n                    This is content for Tab 3!\n                </ExtContainer>\n            </ExtTabPanel>\n        )\n    }\n}\n```\n\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [`\n            `],\n    template: `\n            <ExtTabPanel shadow=\"true\">\n                <ExtContainer [title]=\"'Tab 1'\">\n                    This is content for Tab 1!\n                </ExtContainer>\n                <ExtContainer [title]=\"'Tab 2'\">\n                    This is content for Tab 2!\n                </ExtContainer>\n                <ExtContainer [title]=\"'Tab 3'\">\n                    This is content for Tab 3!\n                </ExtContainer>\n            </ExtTabPanel>\n            `\n})\nexport class AppComponent {\n}\n```\n"
 },
 {
  "name": "Ext.tab.Tab",
  "xtype": "tab",
  "text": "Used in the {@link Ext.tab.Bar} component. This shouldn't be used directly, instead use\n{@link Ext.tab.Bar} or {@link Ext.tab.Panel}.\n"
 },
 {
  "name": "Ext.tab.Tab",
  "xtype": "tab",
  "text": "Used in the {@link Ext.tab.Bar} component. This shouldn't be used directly, instead use\n{@link Ext.tab.Bar} or {@link Ext.tab.Panel}.\n"
 },
 {
  "name": "Ext.tip.ToolTip",
  "xtype": "tooltip",
  "text": "This class provides extra contextual information for components/elements by\nattaching to a {@link #cfg!target #target}. The tip will show based on mouseover (or touch,\ndepending on the environment) and {@link #cfg!align #align} itself to the {@link #cfg!target #target}.\n\nTypically, tooltips will be created via {@link Ext.Component#cfg!tooltip components}, however\nit is possible to create instances directly.\n\n    new Ext.tip.ToolTip({\n        target: myComponent,\n        html: 'Here is some help text about this!'\n    });\n\n# Shared instance\nNew instances of tooltips do not need to be created for every item that requires\na tooltip. In most cases it is sufficient to use a single shared instance across\nthe application, which provides a performance benefit. See {@link Ext.tip.Manager}\nfor an explanation of how shared tips are used.\n\n# Delegation\n\nIt is common to want to show a tooltip for a repeated view and dynamically update\nthe content based on the current item within this view. This can be achieved using\nthe {@link #cfg!delegate #delegate} configuration. This means that the tip will only activate\nwhen over an item inside the target that matches the {@link #cfg!delegate #delegate}. After this,\nthe {@link #property!currentTarget #currentTarget} can be interrogated to get contextual information about which\ndelegate item triggered the show.\n\n    var el = Ext.getBody().createChild({\n        html: '<div data-num=\"1\" class=\"item\">Foo</div>' +\n              '<div data-num=\"2\" class=\"item\">Bar</div>' +\n              '<div data-num=\"3\" class=\"item\">Baz</div>' +\n              '<div class=\"notip\">No tip here</div>'\n    });\n\n    new Ext.tip.ToolTip({\n        target: el,\n        delegate: '.item',\n        listeners: {\n            beforeshow: function(tip) {\n                var current = tip.currentTarget.dom;\n                tip.setHtml('Item #' + current.getAttribute('data-num'));\n            }\n        }\n    });\n\n# Alignment\n\nThe following configuration properties allow control over how the ToolTip is aligned relative to\nthe target element and/or mouse pointer:\n\n- {@link #cfg!anchor #anchor}\n- {@link #cfg!anchorToTarget #anchorToTarget}\n- {@link #cfg!trackMouse #trackMouse}\n- {@link #cfg!mouseOffset #mouseOffset}\n\n# Showing/Hiding\n\nThe following configuration properties allow control over how and when the ToolTip is\nautomatically shown and hidden:\n\n- {@link #cfg!autoHide #autoHide}\n- {@link #cfg!showDelay #showDelay}\n- {@link #cfg!hideDelay #hideDelay}\n- {@link #cfg!dismissDelay #dismissDelay}\n"
 },
 {
  "name": "Ext.Title",
  "xtype": "title",
  "text": "{@link Ext.Title} is used for the {@link Ext.Toolbar#cfg!title Ext.Toolbar#title} configuration in the\n{@link Ext.Toolbar} component.\n"
 },
 {
  "name": "Ext.TitleBar",
  "xtype": "titlebar",
  "text": "{@link Ext.TitleBar}'s are most commonly used as a docked item within an {@link Ext.Container}.\n\nThe main difference between a {@link Ext.TitleBar} and an {@link Ext.Toolbar} is that\nthe {@link #cfg!title #title} configuration.\n\nYou can also give items of a {@link Ext.TitleBar} an `align` configuration of `{@link #cfg!left left}` or `{@link #cfg!right right}`\nwhich will dock them to the `{@link #cfg!left left}` or `{@link #cfg!right right}` of the bar.\n\n## Examples\n\n```javascript\n@example({ framework: 'extjs' })\n Ext.Viewport.add({\n     xtype: 'titlebar',\n     docked: 'top',\n     title: 'Navigation',\n     items: [\n         {\n             iconCls: 'add',\n             align: 'left'\n         },\n         {\n             iconCls: 'home',\n             align: 'right'\n         }\n     ]\n });\n```\n\n    Ext.Viewport.setHtml('This shows the title being centered and buttons using align\n    <i>left</i> and <i>right</i>.');\n\n<br />\n\n```javascript\n@example({ framework: 'extjs' })\n Ext.Viewport.add({\n     xtype: 'titlebar',\n     docked: 'top',\n     title: 'Navigation',\n     items: [\n         {\n             align: 'left',\n             text: 'This button has a super long title'\n         },\n         {\n             iconCls: 'home',\n             align: 'right'\n         }\n     ]\n });\n```\n\n    Ext.Viewport.setHtml('This shows how the title is automatically moved to the right when one\n    of the aligned buttons is very wide.');\n\n<br />\n\n```javascript\n@example({ framework: 'extjs' })\n Ext.Viewport.add({\n     xtype: 'titlebar',\n     docked: 'top',\n     title: 'A very long title',\n     items: [\n         {\n             align: 'left',\n             text: 'This button has a super long title'\n         },\n         {\n             align: 'right',\n             text: 'Another button'\n         }\n     ]\n });\n```\n\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-container>\n    <ext-titlebar title=\"App Title\" docked=\"top\">\n        <ext-button align=\"left\" iconCls=\"x-fa fa-bars\"></ext-button>\n        <ext-button align=\"right\" iconCls=\"x-fa fa-inbox\" text=\"Inbox\"></ext-button>\n        <ext-button align=\"right\" iconCls=\"x-fa fa-user\" text=\"Profile\"></ext-button>\n    </ext-titlebar>\n</ext-container>\n\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\n\nimport '@sencha/ext-web-components/dist/ext-button.component';\nimport '@sencha/ext-web-components/dist/ext-container.component';\nimport '@sencha/ext-web-components/dist/ext-titlebar.component';\n\nexport default class TitleBarComponent {}\n\n```\n\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtContainer, ExtTitleBar, ExtButton } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n    render() {\n        return (\n            <ExtContainer>\n                <ExtTitleBar title=\"App Title\" docked=\"top\">\n                    <ExtButton align=\"left\" iconCls=\"x-fa fa-bars\"/>\n                    <ExtButton align=\"right\" iconCls=\"x-fa fa-inbox\" text=\"Inbox\"/>\n                    <ExtButton align=\"right\" iconCls=\"x-fa fa-user\" text=\"Profile\"/>\n                </ExtTitleBar>\n            </ExtContainer>\n        )\n    }\n}\n```\n\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [`\n             `],\n     template: `\n             <ExtTitleBar title=\"App Title\" docked=\"top\">\n                 <ExtButton align=\"left\" iconCls=\"x-fa fa-bars\"></ExtButton>\n                 <ExtButton align=\"right\" iconCls=\"x-fa fa-inbox\" text=\"Inbox\"></ExtButton>\n                 <ExtButton align=\"right\" iconCls=\"x-fa fa-user\" text=\"Profile\"></ExtButton>\n             </ExtTitleBar>\n             `\n })\n export class AppComponent {\n     buttonHandler = function() {\n         Ext.toast('Hello World!');\n     }\n }\n```\n    Ext.Viewport.setHtml('This shows how the title and buttons will automatically adjust their\n    size when the width of the items are too wide..');\n\nThe {@link #cfg!defaultType #defaultType} of Toolbar's is {@link Ext.Button}.\n"
 },
 {
  "name": "Ext.Tool",
  "xtype": "tool",
  "text": "This class is used to display small visual icons in the header of a panel. There are a set of\n25 icons that can be specified by using the {@link #cfg!type #type} config. The {@link #cfg!handler #handler} config\ncan be used to provide a function that will respond to any click events. In general, this class\nwill not be instantiated directly, rather it will be created by specifying the\n{@link Ext.Panel#cfg!tools Ext.Panel#tools} configuration on the Panel itself.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Panel', {\n    title: 'A Panel',\n    fullscreen: true,\n\n    tools: [{\n        type: 'help',\n        handler: function() {\n            // show help here\n        }\n    }, {\n        itemId: 'refresh',\n        type: 'refresh',\n        hidden: true,\n        handler: function () {\n            // do refresh\n        }\n    }, {\n        type: 'search',\n        handler: function (panel) {\n            // do search\n            panel.down('#refresh').show();\n        }\n    }]\n});\n```\n"
 },
 {
  "name": "Ext.Tool",
  "xtype": "paneltool",
  "text": "This class is used to display small visual icons in the header of a panel. There are a set of\n25 icons that can be specified by using the {@link #cfg!type #type} config. The {@link #cfg!handler #handler} config\ncan be used to provide a function that will respond to any click events. In general, this class\nwill not be instantiated directly, rather it will be created by specifying the\n{@link Ext.Panel#cfg!tools Ext.Panel#tools} configuration on the Panel itself.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Panel', {\n    title: 'A Panel',\n    fullscreen: true,\n\n    tools: [{\n        type: 'help',\n        handler: function() {\n            // show help here\n        }\n    }, {\n        itemId: 'refresh',\n        type: 'refresh',\n        hidden: true,\n        handler: function () {\n            // do refresh\n        }\n    }, {\n        type: 'search',\n        handler: function (panel) {\n            // do search\n            panel.down('#refresh').show();\n        }\n    }]\n});\n```\n"
 },
 {
  "name": "Ext.Tool",
  "xtype": "tool",
  "text": "This class is used to display small visual icons in the header of a panel. There are a set of\n25 icons that can be specified by using the {@link #cfg!type #type} config. The {@link #cfg!handler #handler} config\ncan be used to provide a function that will respond to any click events. In general, this class\nwill not be instantiated directly, rather it will be created by specifying the\n{@link Ext.Panel#cfg!tools Ext.Panel#tools} configuration on the Panel itself.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Panel', {\n    title: 'A Panel',\n    fullscreen: true,\n\n    tools: [{\n        type: 'help',\n        handler: function() {\n            // show help here\n        }\n    }, {\n        itemId: 'refresh',\n        type: 'refresh',\n        hidden: true,\n        handler: function () {\n            // do refresh\n        }\n    }, {\n        type: 'search',\n        handler: function (panel) {\n            // do search\n            panel.down('#refresh').show();\n        }\n    }]\n});\n```\n"
 },
 {
  "name": "Ext.Tool",
  "xtype": "paneltool",
  "text": "This class is used to display small visual icons in the header of a panel. There are a set of\n25 icons that can be specified by using the {@link #cfg!type #type} config. The {@link #cfg!handler #handler} config\ncan be used to provide a function that will respond to any click events. In general, this class\nwill not be instantiated directly, rather it will be created by specifying the\n{@link Ext.Panel#cfg!tools Ext.Panel#tools} configuration on the Panel itself.\n\n```javascript\n@example({ framework: 'extjs' })\nExt.create('Ext.Panel', {\n    title: 'A Panel',\n    fullscreen: true,\n\n    tools: [{\n        type: 'help',\n        handler: function() {\n            // show help here\n        }\n    }, {\n        itemId: 'refresh',\n        type: 'refresh',\n        hidden: true,\n        handler: function () {\n            // do refresh\n        }\n    }, {\n        type: 'search',\n        handler: function (panel) {\n            // do search\n            panel.down('#refresh').show();\n        }\n    }]\n});\n```\n"
 },
 {
  "name": "Ext.Toolbar",
  "xtype": "toolbar",
  "text": "{@link Ext.Toolbar}s are most commonly used as docked items as within a {@link Ext.Container}.\nThey can be docked either `{@link #cfg!top top}` or `{@link #cfg!bottom bottom}` using the {@link #cfg!docked #docked} configuration.\n\nThey allow you to insert items (normally {@link Ext.Button}) and also add a\n{@link #cfg!title #title}.\n\nThe {@link #cfg!defaultType #defaultType} of {@link Ext.Toolbar} is {@link Ext.Button}.\n\nYou can alternatively use {@link Ext.TitleBar} if you want the title to automatically adjust the\nsize of its items.\n\n## Examples\n\n```javascript\n@example({ framework: 'extjs' })\n    Ext.create('Ext.Container', {\n        fullscreen: true,\n        layout: {\n            type: 'vbox',\n            pack: 'center'\n        },\n        items: [\n            {\n                xtype : 'toolbar',\n                docked: 'top',\n                title: 'My Toolbar'\n            },\n            {\n                xtype: 'container',\n                defaults: {\n                    xtype: 'button',\n                    margin: '10 10 0 10'\n                },\n                items: [\n                    {\n                        text: 'Toggle docked',\n                        handler: function() {\n                            var toolbar = Ext.ComponentQuery.query('toolbar')[0],\n                                newDocked = (toolbar.getDocked() === 'top') ? 'bottom' : 'top';\n\n                            toolbar.setDocked(newDocked);\n                        }\n                    },\n                    {\n                        text: 'Toggle UI',\n                        handler: function() {\n                            var toolbar = Ext.ComponentQuery.query('toolbar')[0],\n                                newUi = (toolbar.getUi() === 'light') ? 'dark' : 'light';\n\n                            toolbar.setUi(newUi);\n                        }\n                    },\n                    {\n                        text: 'Change title',\n                        handler: function() {\n                            var toolbar = Ext.ComponentQuery.query('toolbar')[0],\n                                titles = ['My Toolbar', 'Ext.Toolbar',\n                                         'Configurations are awesome!', 'Beautiful.'],\n                                  // internally, the title configuration gets converted into a\n                                  // {@link Ext.Title} component,\n                                  // so you must get the title configuration of that component\n                                title = toolbar.getTitle().getTitle(),\n                                newTitle = titles[titles.indexOf(title) + 1] || titles[0];\n\n                            toolbar.setTitle(newTitle);\n                        }\n                    }\n                ]\n            }\n        ]\n    });\n```\n\n```html\n@example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 1 })\n<ext-panel shadow bodyPadding=0>\n    <ext-toolbar docked=\"top\">\n        <ext-button text=\"Default\" badgeText=\"2\">\n        </ext-button>\n        <ext-spacer>\n            <ext-segmentedbutton>\n                <ext-button text=\"Option 1\" pressed></ext-button>\n                <ext-button text=\"Option 2\"></ext-button>\n            </ext-segmentedbutton>\n        </ext-spacer>\n        <ext-button ui=\"action\" text=\"Action\">\n        </ext-button>\n    </ext-toolbar>\n    Some Text!\n</ext-panel>\n```\n```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\n\nimport '@sencha/ext-web-components/dist/ext-toolbar.component';\nimport '@sencha/ext-web-components/dist/ext-button.component';\nimport '@sencha/ext-web-components/dist/ext-spacer.component';\nimport '@sencha/ext-web-components/dist/ext-segmentedbutton.component';\nimport '@sencha/ext-web-components/dist/ext-panel.component';\n\nexport default class ToolbarComponent {}\n```\n\n```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react';\nimport { ExtToolbar, ExtPanel, ExtButton, ExtSegmentedButton, ExtSpacer, ExtSearchField }\n   from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     render() {\n         return (\n             <ExtPanel shadow bodyPadding={0}>\n                 <ExtToolbar docked=\"top\">\n                     <ExtButton text=\"Default\" badgeText=\"2\"/>\n                     <ExtSpacer/>\n                     <ExtSegmentedButton>\n                         <ExtButton text=\"Option 1\" pressed/>\n                         <ExtButton text=\"Option 2\"/>\n                     </ExtSegmentedButton>\n                     <ExtSpacer/>\n                     <ExtButton ui=\"action\" text=\"Action\"/>\n                 </ExtToolbar>\n                Some Text!\n             </ExtPanel>\n         )\n     }\n }\n```\n\n```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [`\n             `],\n     template: `\n         <ExtToolBar docked=\"top\">\n             <ExtButton text=\"Default\" badgeText=\"2\"></ExtButton>\n             <ExtSpacer></ExtSpacer>\n             <ExtSegmentedButton>\n                 <ExtButton text=\"Option 1\" pressed=\"true\"></ExtButton>\n                 <ExtButton text=\"Option 2\"></ExtButton>\n             </ExtSegmentedButton>\n             <ExtSpacer> </ExtSpacer>\n             <ExtButton ui=\"action\" text=\"Action\"></ExtButton>\n         </ExtToolBar>\n             `\n })\n export class AppComponent {\n }\n```\n## Notes\n\nYou must use a HTML5 doctype for {@link #cfg!docked #docked} `{@link #cfg!bottom bottom}` to work. To do this, simply add the\nfollowing code to the HTML file:\n\n    <!doctype html>\n\nSo your index.html file should look a little like this:\n\n    <!doctype html>\n    <html>\n        <head>\n            <title>MY application title</title>\n            ...\n"
 },
 {
  "name": "Ext.ux.colorpick.Button",
  "xtype": "colorbutton",
  "text": "A simple color swatch that can be clicked to bring up the color selector.\n\nThe selected color is configurable via {@link #cfg!value #value} and\nThe Format is configurable via {@link #cfg!format #format}.\n\n    @example\n    Ext.create('Ext.ux.colorpick.Button', {\n        value: '993300',  // initial selected color\n        format: 'hex6', // by default it's hex6\n        renderTo: Ext.getBody(),\n\n        listeners: {\n            select: function(picker, selColor) {\n                Ext.Msg.alert('Color', selColor);\n            }\n        }\n    });\n"
 },
 {
  "name": "Ext.ux.colorpick.ColorPreview",
  "xtype": "colorpickercolorpreview",
  "text": "A basic component that changes background color, with considerations for opacity\nsupport (checkered background image and IE8 support).\n"
 },
 {
  "name": "Ext.ux.colorpick.Field",
  "xtype": "colorfield",
  "text": "A field that can be clicked to bring up the color picker.\nThe selected color is configurable via {@link #cfg!value #value} and\nThe Format is configurable via {@link #cfg!format #format}.\n\n     @example\n     Ext.create({\n         xtype: 'colorfield',\n         renderTo: Ext.getBody(),\n\n         value: '#993300',  // initial selected color\n         format: 'hex6', // by default it's hex6\n\n         listeners : {\n             change: function (field, color) {\n                 console.log('New color: ' + color);\n             }\n         }\n     });\n"
 },
 {
  "name": "Ext.ux.colorpick.Selector",
  "xtype": "colorselector",
  "text": "Sencha Pro Services presents xtype \"colorselector\".\nAPI has been kept as close to the regular colorpicker as possible. The Selector can be\nrendered to any container.\n\nThe defaul selected color is configurable via {@link #cfg!value #value} config\nand The Format is configurable via {@link #cfg!format #format}. Usually used in\nforms via {@link Ext.ux.colorpick.Button} or {@link Ext.ux.colorpick.Field}.\n\nTypically you will need to listen for the change event to be notified when the user\nchooses a color. Alternatively, you can bind to the \"value\" config\n\n    @example\n    Ext.create('Ext.ux.colorpick.Selector', {\n        value     : '993300',  // initial selected color\n        format   : 'hex6', // by default it's hex6\n        renderTo  : Ext.getBody(),\n\n        listeners: {\n            change: function (colorselector, color) {\n                console.log('New color: ' + color);\n            }\n        }\n    });\n"
 },
 {
  "name": "Ext.ux.gauge.Gauge",
  "xtype": "gauge",
  "text": "Displays a value within the given interval as a gauge. For example:\n\n    @example\n    Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        width: 200,\n        height: 200,\n        layout: 'fit',\n        items: {\n            xtype: 'gauge',\n            padding: 20,\n            value: 55,\n            minValue: 40,\n            maxValue: 80\n        }\n    });\n\nIt's also possible to use gauges to create loading indicators:\n\n    @example\n    Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        width: 200,\n        height: 200,\n        layout: 'fit',\n        items: {\n            xtype: 'gauge',\n            padding: 20,\n            trackStart: 0,\n            trackLength: 360,\n            value: 20,\n            valueStyle: {\n                round: true\n            },\n            textTpl: 'Loading...',\n            animation: {\n                easing: 'linear',\n                duration: 100000\n            }\n        }\n    }).items.first().setAngleOffset(360 * 100);\n\nGauges can contain needles as well.\n\n     @example\n     Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        width: 200,\n        height: 200,\n        layout: 'fit',\n        items: {\n            xtype: 'gauge',\n            padding: 20,\n            value: 55,\n            minValue: 40,\n            maxValue: 80,\n            needle: 'wedge'\n        }\n    });\n"
 },
 {
  "name": "Ext.ux.gauge.Gauge",
  "xtype": "gauge",
  "text": "Displays a value within the given interval as a gauge. For example:\n\n    @example\n    Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        width: 200,\n        height: 200,\n        layout: 'fit',\n        items: {\n            xtype: 'gauge',\n            padding: 20,\n            value: 55,\n            minValue: 40,\n            maxValue: 80\n        }\n    });\n\nIt's also possible to use gauges to create loading indicators:\n\n    @example\n    Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        width: 200,\n        height: 200,\n        layout: 'fit',\n        items: {\n            xtype: 'gauge',\n            padding: 20,\n            trackStart: 0,\n            trackLength: 360,\n            value: 20,\n            valueStyle: {\n                round: true\n            },\n            textTpl: 'Loading...',\n            animation: {\n                easing: 'linear',\n                duration: 100000\n            }\n        }\n    }).items.first().setAngleOffset(360 * 100);\n\nGauges can contain needles as well.\n\n     @example\n     Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        width: 200,\n        height: 200,\n        layout: 'fit',\n        items: {\n            xtype: 'gauge',\n            padding: 20,\n            value: 55,\n            minValue: 40,\n            maxValue: 80,\n            needle: 'wedge'\n        }\n    });\n"
 },
 {
  "name": "Ext.ux.google.Map",
  "xtype": "map",
  "text": "Wraps a Google Map in an Ext.Component using the [Google Maps API](http://code.google.com/apis/maps/documentation/v3/introduction.html).\n\nThis component will automatically include the google maps API script from:\n`//maps.google.com/maps/api/js`\n\n## Example\n\n    Ext.Viewport.add({\n        xtype: 'map',\n        useCurrentLocation: true\n    });\n"
 },
 {
  "name": "Ext.ux.google.Map",
  "xtype": "google-map",
  "text": "Wraps a Google Map in an Ext.Component using the [Google Maps API](http://code.google.com/apis/maps/documentation/v3/introduction.html).\n\nThis component will automatically include the google maps API script from:\n`//maps.google.com/maps/api/js`\n\n## Example\n\n    Ext.Viewport.add({\n        xtype: 'map',\n        useCurrentLocation: true\n    });\n"
 },
 {
  "name": "Ext.ux.google.Map",
  "xtype": "map",
  "text": "Wraps a Google Map in an Ext.Component using the [Google Maps API](http://code.google.com/apis/maps/documentation/v3/introduction.html).\n\nThis component will automatically include the google maps API script from:\n`//maps.google.com/maps/api/js`\n\n## Example\n\n    Ext.Viewport.add({\n        xtype: 'map',\n        useCurrentLocation: true\n    });\n"
 },
 {
  "name": "Ext.ux.google.Map",
  "xtype": "google-map",
  "text": "Wraps a Google Map in an Ext.Component using the [Google Maps API](http://code.google.com/apis/maps/documentation/v3/introduction.html).\n\nThis component will automatically include the google maps API script from:\n`//maps.google.com/maps/api/js`\n\n## Example\n\n    Ext.Viewport.add({\n        xtype: 'map',\n        useCurrentLocation: true\n    });\n"
 },
 {
  "name": "Ext.ux.rating.Picker",
  "xtype": "rating",
  "text": "A ratings picker based on `{@link Ext.Gadget}`.\n\n     @example\n     Ext.create({\n         xtype: 'rating',\n         renderTo: Ext.getBody(),\n         listeners: {\n             change: function (picker, value) {\n                console.log('Rating ' + value);\n             }\n         }\n     });\n"
 },
 {
  "name": "Ext.Video",
  "xtype": "video",
  "text": "Provides a simple Container for HTML5 Video.\n\n## Notes\n\n- There are quite a few issues with the `<video>` tag on Android devices. On Android 2+,\n  the video will appear and play on first attempt, but any attempt afterwards will not work.\n\n## Useful Properties\n\n- {@link #cfg!url #url}\n- {@link #cfg!autoPause #autoPause}\n- {@link #cfg!autoResume #autoResume}\n\n## Useful Methods\n\n- {@link #method!pause #method-pause}\n- {@link #method!play #method-play}\n- {@link #method!toggle #toggle}\n\n## Example\n\n    var panel = Ext.create('Ext.Panel', {\n        fullscreen: true,\n        layout: 'fit',\n        items: [\n            {\n                xtype    : 'video',\n                url      : 'porsche911.mov',\n                posterUrl: 'porsche.png'\n            }\n        ]\n    });\n"
 },
 {
  "name": "Ext.viewport.Default",
  "xtype": "viewport",
  "text": "Base class for iOS and Android viewports.\n"
 },
 {
  "name": "Ext.Widget",
  "xtype": "widget",
  "text": "Ext.Widget is a light-weight Component that consists of nothing more than a template\nElement that can be cloned to quickly and efficiently replicate many instances.\nExt.Widget is typically not instantiated directly, because the default template is\njust a single element with no listeners. Instead Ext.Widget should be extended to\ncreate Widgets that have a useful markup structure and event listeners.\n\nFor example:\n\n     Ext.define('MyWidget', {\n         extend: 'Ext.Widget',\n\n         // The element template passed to Ext.Element.create()\n         element: {\n             reference: 'element',\n             listeners: {\n                 click: 'onClick'\n             },\n             children: [{\n                 reference: 'innerElement',\n                 listeners: {\n                     click: 'onInnerClick'\n                 }\n             }]\n         },\n\n         constructor: function(config) {\n             // It is important to remember to call the Widget superclass constructor\n             // when overriding the constructor in a derived class. This ensures that\n             // the element is initialized from the template, and that initConfig() is\n             // is called.\n             this.callParent([config]);\n\n             // After calling the superclass constructor, the Element is available and\n             // can safely be manipulated. Reference Elements are instances of\n             // Ext.Element, and are cached on each Widget instance by reference name.\n             Ext.getBody().appendChild(this.element);\n         },\n\n         onClick: function() {\n             // listeners use this Widget instance as their scope\n             console.log('element clicked', this);\n         },\n\n         onInnerClick: function() {\n             // access the innerElement reference by name\n             console.log('inner element clicked', this.innerElement);\n         }\n     });\n"
 },
 {
  "name": "Ext.Widget",
  "xtype": "widget",
  "text": "Ext.Widget is a light-weight Component that consists of nothing more than a template\nElement that can be cloned to quickly and efficiently replicate many instances.\nExt.Widget is typically not instantiated directly, because the default template is\njust a single element with no listeners. Instead Ext.Widget should be extended to\ncreate Widgets that have a useful markup structure and event listeners.\n\nFor example:\n\n     Ext.define('MyWidget', {\n         extend: 'Ext.Widget',\n\n         // The element template passed to Ext.Element.create()\n         element: {\n             reference: 'element',\n             listeners: {\n                 click: 'onClick'\n             },\n             children: [{\n                 reference: 'innerElement',\n                 listeners: {\n                     click: 'onInnerClick'\n                 }\n             }]\n         },\n\n         constructor: function(config) {\n             // It is important to remember to call the Widget superclass constructor\n             // when overriding the constructor in a derived class. This ensures that\n             // the element is initialized from the template, and that initConfig() is\n             // is called.\n             this.callParent([config]);\n\n             // After calling the superclass constructor, the Element is available and\n             // can safely be manipulated. Reference Elements are instances of\n             // Ext.Element, and are cached on each Widget instance by reference name.\n             Ext.getBody().appendChild(this.element);\n         },\n\n         onClick: function() {\n             // listeners use this Widget instance as their scope\n             console.log('element clicked', this);\n         },\n\n         onInnerClick: function() {\n             // access the innerElement reference by name\n             console.log('inner element clicked', this.innerElement);\n         }\n     });\n"
 }
]